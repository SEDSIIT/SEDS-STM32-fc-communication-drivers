
fc-communication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077c4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08007988  08007988  00017988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079e8  080079e8  00020190  2**0
                  CONTENTS
  4 .ARM          00000008  080079e8  080079e8  000179e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079f0  080079f0  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079f0  080079f0  000179f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079f4  080079f4  000179f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  080079f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bb8  20000190  08007b88  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  20001d48  08007b88  00021d48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012cca  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fba  00000000  00000000  00032e8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de0  00000000  00000000  00035e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd0  00000000  00000000  00036c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024267  00000000  00000000  000378f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001395c  00000000  00000000  0005bb5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc655  00000000  00000000  0006f4bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013bb10  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003868  00000000  00000000  0013bb60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000190 	.word	0x20000190
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08007970 	.word	0x08007970

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000194 	.word	0x20000194
 8000200:	08007970 	.word	0x08007970

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 fc06 	bl	8000d1c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f84a 	bl	80005a8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
	  MX_GPIO_Init();
 8000514:	f000 f8de 	bl	80006d4 <MX_GPIO_Init>
	  MX_USART2_UART_Init();
 8000518:	f000 f8b2 	bl	8000680 <MX_USART2_UART_Init>
	  MX_USB_DEVICE_Init();
 800051c:	f006 fd24 	bl	8006f68 <MX_USB_DEVICE_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      // poll to see if we've gotten data
	  data_received_length = vcp_recv(data_buffer, 5);
 8000520:	2105      	movs	r1, #5
 8000522:	481d      	ldr	r0, [pc, #116]	; (8000598 <main+0x90>)
 8000524:	f000 fb3c 	bl	8000ba0 <vcp_recv>
 8000528:	4603      	mov	r3, r0
 800052a:	4a1c      	ldr	r2, [pc, #112]	; (800059c <main+0x94>)
 800052c:	6013      	str	r3, [r2, #0]
      if(data_received_length  > 0){
 800052e:	4b1b      	ldr	r3, [pc, #108]	; (800059c <main+0x94>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	2b00      	cmp	r3, #0
 8000534:	ddf4      	ble.n	8000520 <main+0x18>

    	  MESSAGE_PACKET.validityState = data_buffer[0];
 8000536:	4b18      	ldr	r3, [pc, #96]	; (8000598 <main+0x90>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4a19      	ldr	r2, [pc, #100]	; (80005a0 <main+0x98>)
 800053c:	6013      	str	r3, [r2, #0]
    	  MESSAGE_PACKET.transmissionMode = data_buffer[1];
 800053e:	4b16      	ldr	r3, [pc, #88]	; (8000598 <main+0x90>)
 8000540:	685b      	ldr	r3, [r3, #4]
 8000542:	4a17      	ldr	r2, [pc, #92]	; (80005a0 <main+0x98>)
 8000544:	6053      	str	r3, [r2, #4]
    	  MESSAGE_PACKET.systemSelector = data_buffer[2];
 8000546:	4b14      	ldr	r3, [pc, #80]	; (8000598 <main+0x90>)
 8000548:	689b      	ldr	r3, [r3, #8]
 800054a:	4a15      	ldr	r2, [pc, #84]	; (80005a0 <main+0x98>)
 800054c:	6093      	str	r3, [r2, #8]
    	  MESSAGE_PACKET.variableSelector = data_buffer[3];
 800054e:	4b12      	ldr	r3, [pc, #72]	; (8000598 <main+0x90>)
 8000550:	68db      	ldr	r3, [r3, #12]
 8000552:	4a13      	ldr	r2, [pc, #76]	; (80005a0 <main+0x98>)
 8000554:	60d3      	str	r3, [r2, #12]
    	  MESSAGE_PACKET.data = data_buffer[4];
 8000556:	4b10      	ldr	r3, [pc, #64]	; (8000598 <main+0x90>)
 8000558:	691b      	ldr	r3, [r3, #16]
 800055a:	4a11      	ldr	r2, [pc, #68]	; (80005a0 <main+0x98>)
 800055c:	6113      	str	r3, [r2, #16]


    	  data_buffer_s[0] = MESSAGE_PACKET.data;
 800055e:	4b10      	ldr	r3, [pc, #64]	; (80005a0 <main+0x98>)
 8000560:	691b      	ldr	r3, [r3, #16]
 8000562:	4a10      	ldr	r2, [pc, #64]	; (80005a4 <main+0x9c>)
 8000564:	6013      	str	r3, [r2, #0]
    	  data_buffer_s[1] = MESSAGE_PACKET.variableSelector;
 8000566:	4b0e      	ldr	r3, [pc, #56]	; (80005a0 <main+0x98>)
 8000568:	68db      	ldr	r3, [r3, #12]
 800056a:	4a0e      	ldr	r2, [pc, #56]	; (80005a4 <main+0x9c>)
 800056c:	6053      	str	r3, [r2, #4]
		  data_buffer_s[2] = MESSAGE_PACKET.systemSelector ;
 800056e:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <main+0x98>)
 8000570:	689b      	ldr	r3, [r3, #8]
 8000572:	4a0c      	ldr	r2, [pc, #48]	; (80005a4 <main+0x9c>)
 8000574:	6093      	str	r3, [r2, #8]
	      data_buffer_s[3] = MESSAGE_PACKET.transmissionMode;
 8000576:	4b0a      	ldr	r3, [pc, #40]	; (80005a0 <main+0x98>)
 8000578:	685b      	ldr	r3, [r3, #4]
 800057a:	4a0a      	ldr	r2, [pc, #40]	; (80005a4 <main+0x9c>)
 800057c:	60d3      	str	r3, [r2, #12]
		  data_buffer_s[4] = MESSAGE_PACKET.validityState;
 800057e:	4b08      	ldr	r3, [pc, #32]	; (80005a0 <main+0x98>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a08      	ldr	r2, [pc, #32]	; (80005a4 <main+0x9c>)
 8000584:	6113      	str	r3, [r2, #16]

    	  data_received_length = vcp_send(data_buffer_s, 5);
 8000586:	2105      	movs	r1, #5
 8000588:	4806      	ldr	r0, [pc, #24]	; (80005a4 <main+0x9c>)
 800058a:	f000 faa7 	bl	8000adc <vcp_send>
 800058e:	4603      	mov	r3, r0
 8000590:	4a02      	ldr	r2, [pc, #8]	; (800059c <main+0x94>)
 8000592:	6013      	str	r3, [r2, #0]
  {
 8000594:	e7c4      	b.n	8000520 <main+0x18>
 8000596:	bf00      	nop
 8000598:	20000204 	.word	0x20000204
 800059c:	20000224 	.word	0x20000224
 80005a0:	200001f0 	.word	0x200001f0
 80005a4:	20000214 	.word	0x20000214

080005a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b094      	sub	sp, #80	; 0x50
 80005ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	f107 031c 	add.w	r3, r7, #28
 80005b2:	2234      	movs	r2, #52	; 0x34
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f007 f9d2 	bl	8007960 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005bc:	f107 0308 	add.w	r3, r7, #8
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005cc:	2300      	movs	r3, #0
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	4b29      	ldr	r3, [pc, #164]	; (8000678 <SystemClock_Config+0xd0>)
 80005d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d4:	4a28      	ldr	r2, [pc, #160]	; (8000678 <SystemClock_Config+0xd0>)
 80005d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005da:	6413      	str	r3, [r2, #64]	; 0x40
 80005dc:	4b26      	ldr	r3, [pc, #152]	; (8000678 <SystemClock_Config+0xd0>)
 80005de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005e8:	2300      	movs	r3, #0
 80005ea:	603b      	str	r3, [r7, #0]
 80005ec:	4b23      	ldr	r3, [pc, #140]	; (800067c <SystemClock_Config+0xd4>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005f4:	4a21      	ldr	r2, [pc, #132]	; (800067c <SystemClock_Config+0xd4>)
 80005f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005fa:	6013      	str	r3, [r2, #0]
 80005fc:	4b1f      	ldr	r3, [pc, #124]	; (800067c <SystemClock_Config+0xd4>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000604:	603b      	str	r3, [r7, #0]
 8000606:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000608:	2301      	movs	r3, #1
 800060a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800060c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000610:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000612:	2302      	movs	r3, #2
 8000614:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000616:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800061a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800061c:	2304      	movs	r3, #4
 800061e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000620:	2348      	movs	r3, #72	; 0x48
 8000622:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000624:	2302      	movs	r3, #2
 8000626:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000628:	2303      	movs	r3, #3
 800062a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800062c:	2302      	movs	r3, #2
 800062e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000630:	f107 031c 	add.w	r3, r7, #28
 8000634:	4618      	mov	r0, r3
 8000636:	f002 ff09 	bl	800344c <HAL_RCC_OscConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000640:	f000 f8b6 	bl	80007b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000644:	230f      	movs	r3, #15
 8000646:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000648:	2302      	movs	r3, #2
 800064a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000650:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000654:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800065a:	f107 0308 	add.w	r3, r7, #8
 800065e:	2102      	movs	r1, #2
 8000660:	4618      	mov	r0, r3
 8000662:	f002 f87f 	bl	8002764 <HAL_RCC_ClockConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800066c:	f000 f8a0 	bl	80007b0 <Error_Handler>
  }
}
 8000670:	bf00      	nop
 8000672:	3750      	adds	r7, #80	; 0x50
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40023800 	.word	0x40023800
 800067c:	40007000 	.word	0x40007000

08000680 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000684:	4b11      	ldr	r3, [pc, #68]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 8000686:	4a12      	ldr	r2, [pc, #72]	; (80006d0 <MX_USART2_UART_Init+0x50>)
 8000688:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800068a:	4b10      	ldr	r3, [pc, #64]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 800068c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000690:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000692:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000698:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800069e:	4b0b      	ldr	r3, [pc, #44]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006a4:	4b09      	ldr	r3, [pc, #36]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 80006a6:	220c      	movs	r2, #12
 80006a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006aa:	4b08      	ldr	r3, [pc, #32]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006b6:	4805      	ldr	r0, [pc, #20]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 80006b8:	f003 f966 	bl	8003988 <HAL_UART_Init>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006c2:	f000 f875 	bl	80007b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	200001ac 	.word	0x200001ac
 80006d0:	40004400 	.word	0x40004400

080006d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08a      	sub	sp, #40	; 0x28
 80006d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
 80006e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	613b      	str	r3, [r7, #16]
 80006ee:	4b2d      	ldr	r3, [pc, #180]	; (80007a4 <MX_GPIO_Init+0xd0>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a2c      	ldr	r2, [pc, #176]	; (80007a4 <MX_GPIO_Init+0xd0>)
 80006f4:	f043 0304 	orr.w	r3, r3, #4
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b2a      	ldr	r3, [pc, #168]	; (80007a4 <MX_GPIO_Init+0xd0>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0304 	and.w	r3, r3, #4
 8000702:	613b      	str	r3, [r7, #16]
 8000704:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	60fb      	str	r3, [r7, #12]
 800070a:	4b26      	ldr	r3, [pc, #152]	; (80007a4 <MX_GPIO_Init+0xd0>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a25      	ldr	r2, [pc, #148]	; (80007a4 <MX_GPIO_Init+0xd0>)
 8000710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b23      	ldr	r3, [pc, #140]	; (80007a4 <MX_GPIO_Init+0xd0>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <MX_GPIO_Init+0xd0>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a1e      	ldr	r2, [pc, #120]	; (80007a4 <MX_GPIO_Init+0xd0>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b1c      	ldr	r3, [pc, #112]	; (80007a4 <MX_GPIO_Init+0xd0>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	4b18      	ldr	r3, [pc, #96]	; (80007a4 <MX_GPIO_Init+0xd0>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a17      	ldr	r2, [pc, #92]	; (80007a4 <MX_GPIO_Init+0xd0>)
 8000748:	f043 0302 	orr.w	r3, r3, #2
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <MX_GPIO_Init+0xd0>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0302 	and.w	r3, r3, #2
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	2120      	movs	r1, #32
 800075e:	4812      	ldr	r0, [pc, #72]	; (80007a8 <MX_GPIO_Init+0xd4>)
 8000760:	f000 fe18 	bl	8001394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000764:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000768:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800076a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800076e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000774:	f107 0314 	add.w	r3, r7, #20
 8000778:	4619      	mov	r1, r3
 800077a:	480c      	ldr	r0, [pc, #48]	; (80007ac <MX_GPIO_Init+0xd8>)
 800077c:	f000 fc76 	bl	800106c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000780:	2320      	movs	r3, #32
 8000782:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000784:	2301      	movs	r3, #1
 8000786:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078c:	2300      	movs	r3, #0
 800078e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000790:	f107 0314 	add.w	r3, r7, #20
 8000794:	4619      	mov	r1, r3
 8000796:	4804      	ldr	r0, [pc, #16]	; (80007a8 <MX_GPIO_Init+0xd4>)
 8000798:	f000 fc68 	bl	800106c <HAL_GPIO_Init>

}
 800079c:	bf00      	nop
 800079e:	3728      	adds	r7, #40	; 0x28
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40020000 	.word	0x40020000
 80007ac:	40020800 	.word	0x40020800

080007b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b4:	b672      	cpsid	i
}
 80007b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <Error_Handler+0x8>
	...

080007bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	4b10      	ldr	r3, [pc, #64]	; (8000808 <HAL_MspInit+0x4c>)
 80007c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ca:	4a0f      	ldr	r2, [pc, #60]	; (8000808 <HAL_MspInit+0x4c>)
 80007cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007d0:	6453      	str	r3, [r2, #68]	; 0x44
 80007d2:	4b0d      	ldr	r3, [pc, #52]	; (8000808 <HAL_MspInit+0x4c>)
 80007d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	603b      	str	r3, [r7, #0]
 80007e2:	4b09      	ldr	r3, [pc, #36]	; (8000808 <HAL_MspInit+0x4c>)
 80007e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e6:	4a08      	ldr	r2, [pc, #32]	; (8000808 <HAL_MspInit+0x4c>)
 80007e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ec:	6413      	str	r3, [r2, #64]	; 0x40
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <HAL_MspInit+0x4c>)
 80007f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f6:	603b      	str	r3, [r7, #0]
 80007f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007fa:	2007      	movs	r0, #7
 80007fc:	f000 fbf4 	bl	8000fe8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000800:	bf00      	nop
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40023800 	.word	0x40023800

0800080c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08a      	sub	sp, #40	; 0x28
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a19      	ldr	r2, [pc, #100]	; (8000890 <HAL_UART_MspInit+0x84>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d12b      	bne.n	8000886 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	613b      	str	r3, [r7, #16]
 8000832:	4b18      	ldr	r3, [pc, #96]	; (8000894 <HAL_UART_MspInit+0x88>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000836:	4a17      	ldr	r2, [pc, #92]	; (8000894 <HAL_UART_MspInit+0x88>)
 8000838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800083c:	6413      	str	r3, [r2, #64]	; 0x40
 800083e:	4b15      	ldr	r3, [pc, #84]	; (8000894 <HAL_UART_MspInit+0x88>)
 8000840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000846:	613b      	str	r3, [r7, #16]
 8000848:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	4b11      	ldr	r3, [pc, #68]	; (8000894 <HAL_UART_MspInit+0x88>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a10      	ldr	r2, [pc, #64]	; (8000894 <HAL_UART_MspInit+0x88>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <HAL_UART_MspInit+0x88>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000866:	230c      	movs	r3, #12
 8000868:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086a:	2302      	movs	r3, #2
 800086c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000872:	2303      	movs	r3, #3
 8000874:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000876:	2307      	movs	r3, #7
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	4619      	mov	r1, r3
 8000880:	4805      	ldr	r0, [pc, #20]	; (8000898 <HAL_UART_MspInit+0x8c>)
 8000882:	f000 fbf3 	bl	800106c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000886:	bf00      	nop
 8000888:	3728      	adds	r7, #40	; 0x28
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40004400 	.word	0x40004400
 8000894:	40023800 	.word	0x40023800
 8000898:	40020000 	.word	0x40020000

0800089c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <NMI_Handler+0x4>

080008a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a6:	e7fe      	b.n	80008a6 <HardFault_Handler+0x4>

080008a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008ac:	e7fe      	b.n	80008ac <MemManage_Handler+0x4>

080008ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b2:	e7fe      	b.n	80008b2 <BusFault_Handler+0x4>

080008b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <UsageFault_Handler+0x4>

080008ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr

080008c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr

080008d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr

080008e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008e8:	f000 fa6a 	bl	8000dc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  vcp_service();
 80008ec:	f000 f9a2 	bl	8000c34 <vcp_service>
  /* USER CODE END SysTick_IRQn 1 */
}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80008f8:	4802      	ldr	r0, [pc, #8]	; (8000904 <OTG_FS_IRQHandler+0x10>)
 80008fa:	f000 febb 	bl	8001674 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20001720 	.word	0x20001720

08000908 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <SystemInit+0x20>)
 800090e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000912:	4a05      	ldr	r2, [pc, #20]	; (8000928 <SystemInit+0x20>)
 8000914:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000918:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	e000ed00 	.word	0xe000ed00

0800092c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  // Circular FIFO initializations :
  vcp_tx_fifo.data = UserTxBufferFS;  // Use the buffer generated by Cube
 8000930:	4b11      	ldr	r3, [pc, #68]	; (8000978 <CDC_Init_FS+0x4c>)
 8000932:	4a12      	ldr	r2, [pc, #72]	; (800097c <CDC_Init_FS+0x50>)
 8000934:	601a      	str	r2, [r3, #0]
  vcp_tx_fifo.wr = 0;
 8000936:	4b10      	ldr	r3, [pc, #64]	; (8000978 <CDC_Init_FS+0x4c>)
 8000938:	2200      	movs	r2, #0
 800093a:	605a      	str	r2, [r3, #4]
  vcp_tx_fifo.rd = 0;
 800093c:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <CDC_Init_FS+0x4c>)
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
  vcp_tx_fifo.lb = 0;
 8000942:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <CDC_Init_FS+0x4c>)
 8000944:	2200      	movs	r2, #0
 8000946:	60da      	str	r2, [r3, #12]
  vcp_rx_fifo.data = UserRxBufferFS;  // Use the buffer generated by Cube
 8000948:	4b0d      	ldr	r3, [pc, #52]	; (8000980 <CDC_Init_FS+0x54>)
 800094a:	4a0e      	ldr	r2, [pc, #56]	; (8000984 <CDC_Init_FS+0x58>)
 800094c:	601a      	str	r2, [r3, #0]
  vcp_rx_fifo.wr = 0;
 800094e:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <CDC_Init_FS+0x54>)
 8000950:	2200      	movs	r2, #0
 8000952:	605a      	str	r2, [r3, #4]
  vcp_rx_fifo.rd = 0;
 8000954:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <CDC_Init_FS+0x54>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  vcp_rx_fifo.lb = 0;
 800095a:	4b09      	ldr	r3, [pc, #36]	; (8000980 <CDC_Init_FS+0x54>)
 800095c:	2200      	movs	r2, #0
 800095e:	60da      	str	r2, [r3, #12]

  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8000960:	2200      	movs	r2, #0
 8000962:	4906      	ldr	r1, [pc, #24]	; (800097c <CDC_Init_FS+0x50>)
 8000964:	4808      	ldr	r0, [pc, #32]	; (8000988 <CDC_Init_FS+0x5c>)
 8000966:	f005 f8da 	bl	8005b1e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800096a:	4906      	ldr	r1, [pc, #24]	; (8000984 <CDC_Init_FS+0x58>)
 800096c:	4806      	ldr	r0, [pc, #24]	; (8000988 <CDC_Init_FS+0x5c>)
 800096e:	f005 f8f4 	bl	8005b5a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8000972:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8000974:	4618      	mov	r0, r3
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20001228 	.word	0x20001228
 800097c:	20000a28 	.word	0x20000a28
 8000980:	20001238 	.word	0x20001238
 8000984:	20000228 	.word	0x20000228
 8000988:	20001250 	.word	0x20001250

0800098c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8000990:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8000992:	4618      	mov	r0, r3
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	6039      	str	r1, [r7, #0]
 80009a6:	71fb      	strb	r3, [r7, #7]
 80009a8:	4613      	mov	r3, r2
 80009aa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80009ac:	79fb      	ldrb	r3, [r7, #7]
 80009ae:	2b23      	cmp	r3, #35	; 0x23
 80009b0:	d84a      	bhi.n	8000a48 <CDC_Control_FS+0xac>
 80009b2:	a201      	add	r2, pc, #4	; (adr r2, 80009b8 <CDC_Control_FS+0x1c>)
 80009b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009b8:	08000a49 	.word	0x08000a49
 80009bc:	08000a49 	.word	0x08000a49
 80009c0:	08000a49 	.word	0x08000a49
 80009c4:	08000a49 	.word	0x08000a49
 80009c8:	08000a49 	.word	0x08000a49
 80009cc:	08000a49 	.word	0x08000a49
 80009d0:	08000a49 	.word	0x08000a49
 80009d4:	08000a49 	.word	0x08000a49
 80009d8:	08000a49 	.word	0x08000a49
 80009dc:	08000a49 	.word	0x08000a49
 80009e0:	08000a49 	.word	0x08000a49
 80009e4:	08000a49 	.word	0x08000a49
 80009e8:	08000a49 	.word	0x08000a49
 80009ec:	08000a49 	.word	0x08000a49
 80009f0:	08000a49 	.word	0x08000a49
 80009f4:	08000a49 	.word	0x08000a49
 80009f8:	08000a49 	.word	0x08000a49
 80009fc:	08000a49 	.word	0x08000a49
 8000a00:	08000a49 	.word	0x08000a49
 8000a04:	08000a49 	.word	0x08000a49
 8000a08:	08000a49 	.word	0x08000a49
 8000a0c:	08000a49 	.word	0x08000a49
 8000a10:	08000a49 	.word	0x08000a49
 8000a14:	08000a49 	.word	0x08000a49
 8000a18:	08000a49 	.word	0x08000a49
 8000a1c:	08000a49 	.word	0x08000a49
 8000a20:	08000a49 	.word	0x08000a49
 8000a24:	08000a49 	.word	0x08000a49
 8000a28:	08000a49 	.word	0x08000a49
 8000a2c:	08000a49 	.word	0x08000a49
 8000a30:	08000a49 	.word	0x08000a49
 8000a34:	08000a49 	.word	0x08000a49
 8000a38:	08000a49 	.word	0x08000a49
 8000a3c:	08000a49 	.word	0x08000a49
 8000a40:	08000a49 	.word	0x08000a49
 8000a44:	08000a49 	.word	0x08000a49
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8000a48:	bf00      	nop
  }

  return (USBD_OK);
 8000a4a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  // Update the write index for the next incoming packet
  vcp_rx_fifo.wr += *Len;
 8000a62:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <CDC_Receive_FS+0x58>)
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	461a      	mov	r2, r3
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	461a      	mov	r2, r3
 8000a70:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <CDC_Receive_FS+0x58>)
 8000a72:	605a      	str	r2, [r3, #4]
  // Is the new value too close to the end of the FIFO ?
  if (vcp_rx_fifo.wr >= RX_BUFFER_MAX_WRITE_INDEX)
 8000a74:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <CDC_Receive_FS+0x58>)
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	f5b3 6ff8 	cmp.w	r3, #1984	; 0x7c0
 8000a7c:	d306      	bcc.n	8000a8c <CDC_Receive_FS+0x34>
  {
    // Solution : wrap-around (and save wr as lb)
    vcp_rx_fifo.lb = vcp_rx_fifo.wr;
 8000a7e:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <CDC_Receive_FS+0x58>)
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	4a0b      	ldr	r2, [pc, #44]	; (8000ab0 <CDC_Receive_FS+0x58>)
 8000a84:	60d3      	str	r3, [r2, #12]
    vcp_rx_fifo.wr = 0;
 8000a86:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <CDC_Receive_FS+0x58>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	605a      	str	r2, [r3, #4]
  }
  // Tell the driver where to write the next incoming packet
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, vcp_rx_fifo.data + vcp_rx_fifo.wr);
 8000a8c:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <CDC_Receive_FS+0x58>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a07      	ldr	r2, [pc, #28]	; (8000ab0 <CDC_Receive_FS+0x58>)
 8000a92:	6852      	ldr	r2, [r2, #4]
 8000a94:	4413      	add	r3, r2
 8000a96:	4619      	mov	r1, r3
 8000a98:	4806      	ldr	r0, [pc, #24]	; (8000ab4 <CDC_Receive_FS+0x5c>)
 8000a9a:	f005 f85e 	bl	8005b5a <USBD_CDC_SetRxBuffer>
  // Receive the next packet
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8000a9e:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <CDC_Receive_FS+0x5c>)
 8000aa0:	f005 f8a4 	bl	8005bec <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8000aa4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20001238 	.word	0x20001238
 8000ab4:	20001250 	.word	0x20001250

08000ab8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b087      	sub	sp, #28
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	4613      	mov	r3, r2
 8000ac4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8000aca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	371c      	adds	r7, #28
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
	...

08000adc <vcp_send>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
int vcp_send(uint8_t* buf, uint16_t len)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	460b      	mov	r3, r1
 8000ae6:	807b      	strh	r3, [r7, #2]
  // Step 1 : calculate the occupied space in the Tx FIFO
  int cap = vcp_tx_fifo.wr - vcp_tx_fifo.rd;   // occupied capacity
 8000ae8:	4b2c      	ldr	r3, [pc, #176]	; (8000b9c <vcp_send+0xc0>)
 8000aea:	685a      	ldr	r2, [r3, #4]
 8000aec:	4b2b      	ldr	r3, [pc, #172]	; (8000b9c <vcp_send+0xc0>)
 8000aee:	689b      	ldr	r3, [r3, #8]
 8000af0:	1ad3      	subs	r3, r2, r3
 8000af2:	60fb      	str	r3, [r7, #12]
  if (cap < 0)    // FIFO contents wrap around
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	da03      	bge.n	8000b02 <vcp_send+0x26>
    cap += APP_TX_DATA_SIZE;
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000b00:	60fb      	str	r3, [r7, #12]
  cap = APP_TX_DATA_SIZE - cap;      // available capacity
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8000b08:	60fb      	str	r3, [r7, #12]

  // Step 2 : compare with argument
  if (cap < len)
 8000b0a:	887b      	ldrh	r3, [r7, #2]
 8000b0c:	68fa      	ldr	r2, [r7, #12]
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	da02      	bge.n	8000b18 <vcp_send+0x3c>
    return -1;   // Not enough room to copy "buf" into the FIFO => error
 8000b12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b16:	e03c      	b.n	8000b92 <vcp_send+0xb6>

  // Step 3 : does buf fit in the tail ?
  int tail = APP_TX_DATA_SIZE - vcp_tx_fifo.wr;
 8000b18:	4b20      	ldr	r3, [pc, #128]	; (8000b9c <vcp_send+0xc0>)
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8000b20:	60bb      	str	r3, [r7, #8]
  if (tail >= len)
 8000b22:	887b      	ldrh	r3, [r7, #2]
 8000b24:	68ba      	ldr	r2, [r7, #8]
 8000b26:	429a      	cmp	r2, r3
 8000b28:	db18      	blt.n	8000b5c <vcp_send+0x80>
  {
    // Copy buf into the tail of the FIFO
    memcpy (&vcp_tx_fifo.data[vcp_tx_fifo.wr], buf, len);
 8000b2a:	4b1c      	ldr	r3, [pc, #112]	; (8000b9c <vcp_send+0xc0>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a1b      	ldr	r2, [pc, #108]	; (8000b9c <vcp_send+0xc0>)
 8000b30:	6852      	ldr	r2, [r2, #4]
 8000b32:	4413      	add	r3, r2
 8000b34:	887a      	ldrh	r2, [r7, #2]
 8000b36:	6879      	ldr	r1, [r7, #4]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f006 ff03 	bl	8007944 <memcpy>
    // Update "wr" index
    vcp_tx_fifo.wr += len;
 8000b3e:	4b17      	ldr	r3, [pc, #92]	; (8000b9c <vcp_send+0xc0>)
 8000b40:	685a      	ldr	r2, [r3, #4]
 8000b42:	887b      	ldrh	r3, [r7, #2]
 8000b44:	4413      	add	r3, r2
 8000b46:	4a15      	ldr	r2, [pc, #84]	; (8000b9c <vcp_send+0xc0>)
 8000b48:	6053      	str	r3, [r2, #4]
    // In case "len" == "tail", next write goes to the head
    if (vcp_tx_fifo.wr == APP_TX_DATA_SIZE)
 8000b4a:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <vcp_send+0xc0>)
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000b52:	d11d      	bne.n	8000b90 <vcp_send+0xb4>
      vcp_tx_fifo.wr = 0;
 8000b54:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <vcp_send+0xc0>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	e019      	b.n	8000b90 <vcp_send+0xb4>
  }
  else
  {
    // Copy the head of "buf" to the tail of the FIFO
    memcpy (&vcp_tx_fifo.data[vcp_tx_fifo.wr], buf, tail);
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <vcp_send+0xc0>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a0e      	ldr	r2, [pc, #56]	; (8000b9c <vcp_send+0xc0>)
 8000b62:	6852      	ldr	r2, [r2, #4]
 8000b64:	4413      	add	r3, r2
 8000b66:	68ba      	ldr	r2, [r7, #8]
 8000b68:	6879      	ldr	r1, [r7, #4]
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f006 feea 	bl	8007944 <memcpy>
    // Copy the tail of "buf" to the head of the FIFO :
    memcpy (vcp_tx_fifo.data, &buf[tail], len - tail);
 8000b70:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <vcp_send+0xc0>)
 8000b72:	6818      	ldr	r0, [r3, #0]
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	18d1      	adds	r1, r2, r3
 8000b7a:	887a      	ldrh	r2, [r7, #2]
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	1ad3      	subs	r3, r2, r3
 8000b80:	461a      	mov	r2, r3
 8000b82:	f006 fedf 	bl	8007944 <memcpy>
    // Update the "wr" index
    vcp_tx_fifo.wr = len - tail;
 8000b86:	887a      	ldrh	r2, [r7, #2]
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	1ad3      	subs	r3, r2, r3
 8000b8c:	4a03      	ldr	r2, [pc, #12]	; (8000b9c <vcp_send+0xc0>)
 8000b8e:	6053      	str	r3, [r2, #4]
  }
  return 0;  // successful completion
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3710      	adds	r7, #16
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20001228 	.word	0x20001228

08000ba0 <vcp_recv>:


int vcp_recv(uint8_t* buf, uint16_t len)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	460b      	mov	r3, r1
 8000baa:	807b      	strh	r3, [r7, #2]
  // Compute how much data is in the FIFO
  int cap = vcp_rx_fifo.wr - vcp_rx_fifo.rd;
 8000bac:	4b20      	ldr	r3, [pc, #128]	; (8000c30 <vcp_recv+0x90>)
 8000bae:	685a      	ldr	r2, [r3, #4]
 8000bb0:	4b1f      	ldr	r3, [pc, #124]	; (8000c30 <vcp_recv+0x90>)
 8000bb2:	689b      	ldr	r3, [r3, #8]
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	60fb      	str	r3, [r7, #12]
  if (cap == 0)
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d101      	bne.n	8000bc2 <vcp_recv+0x22>
    return 0;      // Empty FIFO, no data to read
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	e030      	b.n	8000c24 <vcp_recv+0x84>
  if (cap < 0)  // FIFO contents wrap around
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	da04      	bge.n	8000bd2 <vcp_recv+0x32>
    cap += vcp_rx_fifo.lb;  // Notice the use of lb
 8000bc8:	4b19      	ldr	r3, [pc, #100]	; (8000c30 <vcp_recv+0x90>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	68fa      	ldr	r2, [r7, #12]
 8000bce:	4413      	add	r3, r2
 8000bd0:	60fb      	str	r3, [r7, #12]
  // Limit the FIFO read to the available data
  if (len > cap)
 8000bd2:	887b      	ldrh	r3, [r7, #2]
 8000bd4:	68fa      	ldr	r2, [r7, #12]
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	da01      	bge.n	8000bde <vcp_recv+0x3e>
    len = cap;
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	807b      	strh	r3, [r7, #2]
  // Save len : it'll be the return value
  int retval = len;
 8000bde:	887b      	ldrh	r3, [r7, #2]
 8000be0:	60bb      	str	r3, [r7, #8]
  // Read the data
  while (len)
 8000be2:	e01b      	b.n	8000c1c <vcp_recv+0x7c>
  {
    len--;
 8000be4:	887b      	ldrh	r3, [r7, #2]
 8000be6:	3b01      	subs	r3, #1
 8000be8:	807b      	strh	r3, [r7, #2]
    *buf = vcp_rx_fifo.data[vcp_rx_fifo.rd];
 8000bea:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <vcp_recv+0x90>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a10      	ldr	r2, [pc, #64]	; (8000c30 <vcp_recv+0x90>)
 8000bf0:	6892      	ldr	r2, [r2, #8]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	781a      	ldrb	r2, [r3, #0]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	701a      	strb	r2, [r3, #0]
    buf++;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	607b      	str	r3, [r7, #4]
    vcp_rx_fifo.rd++;    // Update read index
 8000c00:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <vcp_recv+0x90>)
 8000c02:	689b      	ldr	r3, [r3, #8]
 8000c04:	3301      	adds	r3, #1
 8000c06:	4a0a      	ldr	r2, [pc, #40]	; (8000c30 <vcp_recv+0x90>)
 8000c08:	6093      	str	r3, [r2, #8]
    if (vcp_rx_fifo.rd == vcp_rx_fifo.lb)  // Check for wrap-around
 8000c0a:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <vcp_recv+0x90>)
 8000c0c:	689a      	ldr	r2, [r3, #8]
 8000c0e:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <vcp_recv+0x90>)
 8000c10:	68db      	ldr	r3, [r3, #12]
 8000c12:	429a      	cmp	r2, r3
 8000c14:	d102      	bne.n	8000c1c <vcp_recv+0x7c>
      vcp_rx_fifo.rd = 0;      // Follow wrap-around
 8000c16:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <vcp_recv+0x90>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	609a      	str	r2, [r3, #8]
  while (len)
 8000c1c:	887b      	ldrh	r3, [r7, #2]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d1e0      	bne.n	8000be4 <vcp_recv+0x44>
  }
  return retval;
 8000c22:	68bb      	ldr	r3, [r7, #8]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3714      	adds	r7, #20
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	20001238 	.word	0x20001238

08000c34 <vcp_service>:


void vcp_service()
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8000c3a:	4b21      	ldr	r3, [pc, #132]	; (8000cc0 <vcp_service+0x8c>)
 8000c3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8000c40:	607b      	str	r3, [r7, #4]

  // Test if the USB CDC is ready to transmit
  if (hcdc->TxState == 0)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d134      	bne.n	8000cb6 <vcp_service+0x82>
  {
    // Update the FIFO to reflect the completion of the last transmission
    vcp_tx_fifo.rd = vcp_tx_fifo.lb;
 8000c4c:	4b1d      	ldr	r3, [pc, #116]	; (8000cc4 <vcp_service+0x90>)
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	4a1c      	ldr	r2, [pc, #112]	; (8000cc4 <vcp_service+0x90>)
 8000c52:	6093      	str	r3, [r2, #8]

    // Compute how much data is in the FIFO
    int cap = vcp_tx_fifo.wr - vcp_tx_fifo.rd;
 8000c54:	4b1b      	ldr	r3, [pc, #108]	; (8000cc4 <vcp_service+0x90>)
 8000c56:	685a      	ldr	r2, [r3, #4]
 8000c58:	4b1a      	ldr	r3, [pc, #104]	; (8000cc4 <vcp_service+0x90>)
 8000c5a:	689b      	ldr	r3, [r3, #8]
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	603b      	str	r3, [r7, #0]
    if (cap != 0)  // The FIFO is empty : return immediately
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d027      	beq.n	8000cb6 <vcp_service+0x82>
    {
      if (cap < 0)  // The FIFO contents wrap-around
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	da13      	bge.n	8000c94 <vcp_service+0x60>
      {
        // Send only the tail of the FIFO
        USBD_CDC_SetTxBuffer(&hUsbDeviceFS, &vcp_tx_fifo.data[vcp_tx_fifo.rd], APP_TX_DATA_SIZE - vcp_tx_fifo.rd);
 8000c6c:	4b15      	ldr	r3, [pc, #84]	; (8000cc4 <vcp_service+0x90>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a14      	ldr	r2, [pc, #80]	; (8000cc4 <vcp_service+0x90>)
 8000c72:	6892      	ldr	r2, [r2, #8]
 8000c74:	1899      	adds	r1, r3, r2
 8000c76:	4b13      	ldr	r3, [pc, #76]	; (8000cc4 <vcp_service+0x90>)
 8000c78:	689b      	ldr	r3, [r3, #8]
 8000c7a:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8000c7e:	461a      	mov	r2, r3
 8000c80:	480f      	ldr	r0, [pc, #60]	; (8000cc0 <vcp_service+0x8c>)
 8000c82:	f004 ff4c 	bl	8005b1e <USBD_CDC_SetTxBuffer>
        USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8000c86:	480e      	ldr	r0, [pc, #56]	; (8000cc0 <vcp_service+0x8c>)
 8000c88:	f004 ff80 	bl	8005b8c <USBD_CDC_TransmitPacket>
        vcp_tx_fifo.lb = 0;    // Lock the tail’s data
 8000c8c:	4b0d      	ldr	r3, [pc, #52]	; (8000cc4 <vcp_service+0x90>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	60da      	str	r2, [r3, #12]
        USBD_CDC_TransmitPacket(&hUsbDeviceFS);
        vcp_tx_fifo.lb = vcp_tx_fifo.wr; // lock the data
      }
    }
  }
}
 8000c92:	e010      	b.n	8000cb6 <vcp_service+0x82>
        USBD_CDC_SetTxBuffer(&hUsbDeviceFS, &vcp_tx_fifo.data[vcp_tx_fifo.rd], cap);
 8000c94:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <vcp_service+0x90>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a0a      	ldr	r2, [pc, #40]	; (8000cc4 <vcp_service+0x90>)
 8000c9a:	6892      	ldr	r2, [r2, #8]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	683a      	ldr	r2, [r7, #0]
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4807      	ldr	r0, [pc, #28]	; (8000cc0 <vcp_service+0x8c>)
 8000ca4:	f004 ff3b 	bl	8005b1e <USBD_CDC_SetTxBuffer>
        USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8000ca8:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <vcp_service+0x8c>)
 8000caa:	f004 ff6f 	bl	8005b8c <USBD_CDC_TransmitPacket>
        vcp_tx_fifo.lb = vcp_tx_fifo.wr; // lock the data
 8000cae:	4b05      	ldr	r3, [pc, #20]	; (8000cc4 <vcp_service+0x90>)
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	4a04      	ldr	r2, [pc, #16]	; (8000cc4 <vcp_service+0x90>)
 8000cb4:	60d3      	str	r3, [r2, #12]
}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20001250 	.word	0x20001250
 8000cc4:	20001228 	.word	0x20001228

08000cc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ccc:	480d      	ldr	r0, [pc, #52]	; (8000d04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cce:	490e      	ldr	r1, [pc, #56]	; (8000d08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cd0:	4a0e      	ldr	r2, [pc, #56]	; (8000d0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd4:	e002      	b.n	8000cdc <LoopCopyDataInit>

08000cd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cda:	3304      	adds	r3, #4

08000cdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce0:	d3f9      	bcc.n	8000cd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ce2:	4a0b      	ldr	r2, [pc, #44]	; (8000d10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ce4:	4c0b      	ldr	r4, [pc, #44]	; (8000d14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ce6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce8:	e001      	b.n	8000cee <LoopFillZerobss>

08000cea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cec:	3204      	adds	r2, #4

08000cee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf0:	d3fb      	bcc.n	8000cea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cf2:	f7ff fe09 	bl	8000908 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cf6:	f006 fe01 	bl	80078fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cfa:	f7ff fc05 	bl	8000508 <main>
  bx  lr    
 8000cfe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d08:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8000d0c:	080079f8 	.word	0x080079f8
  ldr r2, =_sbss
 8000d10:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8000d14:	20001d48 	.word	0x20001d48

08000d18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d18:	e7fe      	b.n	8000d18 <ADC_IRQHandler>
	...

08000d1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d20:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <HAL_Init+0x40>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a0d      	ldr	r2, [pc, #52]	; (8000d5c <HAL_Init+0x40>)
 8000d26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d2c:	4b0b      	ldr	r3, [pc, #44]	; (8000d5c <HAL_Init+0x40>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a0a      	ldr	r2, [pc, #40]	; (8000d5c <HAL_Init+0x40>)
 8000d32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d38:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <HAL_Init+0x40>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a07      	ldr	r2, [pc, #28]	; (8000d5c <HAL_Init+0x40>)
 8000d3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d44:	2003      	movs	r0, #3
 8000d46:	f000 f94f 	bl	8000fe8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	f000 f808 	bl	8000d60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d50:	f7ff fd34 	bl	80007bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40023c00 	.word	0x40023c00

08000d60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d68:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <HAL_InitTick+0x54>)
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <HAL_InitTick+0x58>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	4619      	mov	r1, r3
 8000d72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 f967 	bl	8001052 <HAL_SYSTICK_Config>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e00e      	b.n	8000dac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2b0f      	cmp	r3, #15
 8000d92:	d80a      	bhi.n	8000daa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d94:	2200      	movs	r2, #0
 8000d96:	6879      	ldr	r1, [r7, #4]
 8000d98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d9c:	f000 f92f 	bl	8000ffe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000da0:	4a06      	ldr	r2, [pc, #24]	; (8000dbc <HAL_InitTick+0x5c>)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000da6:	2300      	movs	r3, #0
 8000da8:	e000      	b.n	8000dac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000000 	.word	0x20000000
 8000db8:	2000001c 	.word	0x2000001c
 8000dbc:	20000018 	.word	0x20000018

08000dc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <HAL_IncTick+0x20>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <HAL_IncTick+0x24>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4413      	add	r3, r2
 8000dd0:	4a04      	ldr	r2, [pc, #16]	; (8000de4 <HAL_IncTick+0x24>)
 8000dd2:	6013      	str	r3, [r2, #0]
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	2000001c 	.word	0x2000001c
 8000de4:	20001248 	.word	0x20001248

08000de8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return uwTick;
 8000dec:	4b03      	ldr	r3, [pc, #12]	; (8000dfc <HAL_GetTick+0x14>)
 8000dee:	681b      	ldr	r3, [r3, #0]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	20001248 	.word	0x20001248

08000e00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e08:	f7ff ffee 	bl	8000de8 <HAL_GetTick>
 8000e0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e18:	d005      	beq.n	8000e26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e1a:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <HAL_Delay+0x44>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	461a      	mov	r2, r3
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	4413      	add	r3, r2
 8000e24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e26:	bf00      	nop
 8000e28:	f7ff ffde 	bl	8000de8 <HAL_GetTick>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	68fa      	ldr	r2, [r7, #12]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d8f7      	bhi.n	8000e28 <HAL_Delay+0x28>
  {
  }
}
 8000e38:	bf00      	nop
 8000e3a:	bf00      	nop
 8000e3c:	3710      	adds	r7, #16
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	2000001c 	.word	0x2000001c

08000e48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e58:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <__NVIC_SetPriorityGrouping+0x44>)
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e5e:	68ba      	ldr	r2, [r7, #8]
 8000e60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e64:	4013      	ands	r3, r2
 8000e66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e7a:	4a04      	ldr	r2, [pc, #16]	; (8000e8c <__NVIC_SetPriorityGrouping+0x44>)
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	60d3      	str	r3, [r2, #12]
}
 8000e80:	bf00      	nop
 8000e82:	3714      	adds	r7, #20
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e94:	4b04      	ldr	r3, [pc, #16]	; (8000ea8 <__NVIC_GetPriorityGrouping+0x18>)
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	0a1b      	lsrs	r3, r3, #8
 8000e9a:	f003 0307 	and.w	r3, r3, #7
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	db0b      	blt.n	8000ed6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	f003 021f 	and.w	r2, r3, #31
 8000ec4:	4907      	ldr	r1, [pc, #28]	; (8000ee4 <__NVIC_EnableIRQ+0x38>)
 8000ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eca:	095b      	lsrs	r3, r3, #5
 8000ecc:	2001      	movs	r0, #1
 8000ece:	fa00 f202 	lsl.w	r2, r0, r2
 8000ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	e000e100 	.word	0xe000e100

08000ee8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	6039      	str	r1, [r7, #0]
 8000ef2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	db0a      	blt.n	8000f12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	b2da      	uxtb	r2, r3
 8000f00:	490c      	ldr	r1, [pc, #48]	; (8000f34 <__NVIC_SetPriority+0x4c>)
 8000f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f06:	0112      	lsls	r2, r2, #4
 8000f08:	b2d2      	uxtb	r2, r2
 8000f0a:	440b      	add	r3, r1
 8000f0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f10:	e00a      	b.n	8000f28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	4908      	ldr	r1, [pc, #32]	; (8000f38 <__NVIC_SetPriority+0x50>)
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	f003 030f 	and.w	r3, r3, #15
 8000f1e:	3b04      	subs	r3, #4
 8000f20:	0112      	lsls	r2, r2, #4
 8000f22:	b2d2      	uxtb	r2, r2
 8000f24:	440b      	add	r3, r1
 8000f26:	761a      	strb	r2, [r3, #24]
}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	e000e100 	.word	0xe000e100
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b089      	sub	sp, #36	; 0x24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	f1c3 0307 	rsb	r3, r3, #7
 8000f56:	2b04      	cmp	r3, #4
 8000f58:	bf28      	it	cs
 8000f5a:	2304      	movcs	r3, #4
 8000f5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	3304      	adds	r3, #4
 8000f62:	2b06      	cmp	r3, #6
 8000f64:	d902      	bls.n	8000f6c <NVIC_EncodePriority+0x30>
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	3b03      	subs	r3, #3
 8000f6a:	e000      	b.n	8000f6e <NVIC_EncodePriority+0x32>
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43da      	mvns	r2, r3
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	401a      	ands	r2, r3
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8e:	43d9      	mvns	r1, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f94:	4313      	orrs	r3, r2
         );
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3724      	adds	r7, #36	; 0x24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
	...

08000fa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3b01      	subs	r3, #1
 8000fb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fb4:	d301      	bcc.n	8000fba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e00f      	b.n	8000fda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fba:	4a0a      	ldr	r2, [pc, #40]	; (8000fe4 <SysTick_Config+0x40>)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fc2:	210f      	movs	r1, #15
 8000fc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fc8:	f7ff ff8e 	bl	8000ee8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fcc:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <SysTick_Config+0x40>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fd2:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <SysTick_Config+0x40>)
 8000fd4:	2207      	movs	r2, #7
 8000fd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	e000e010 	.word	0xe000e010

08000fe8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f7ff ff29 	bl	8000e48 <__NVIC_SetPriorityGrouping>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b086      	sub	sp, #24
 8001002:	af00      	add	r7, sp, #0
 8001004:	4603      	mov	r3, r0
 8001006:	60b9      	str	r1, [r7, #8]
 8001008:	607a      	str	r2, [r7, #4]
 800100a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001010:	f7ff ff3e 	bl	8000e90 <__NVIC_GetPriorityGrouping>
 8001014:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	68b9      	ldr	r1, [r7, #8]
 800101a:	6978      	ldr	r0, [r7, #20]
 800101c:	f7ff ff8e 	bl	8000f3c <NVIC_EncodePriority>
 8001020:	4602      	mov	r2, r0
 8001022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001026:	4611      	mov	r1, r2
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff ff5d 	bl	8000ee8 <__NVIC_SetPriority>
}
 800102e:	bf00      	nop
 8001030:	3718      	adds	r7, #24
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b082      	sub	sp, #8
 800103a:	af00      	add	r7, sp, #0
 800103c:	4603      	mov	r3, r0
 800103e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff ff31 	bl	8000eac <__NVIC_EnableIRQ>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff ffa2 	bl	8000fa4 <SysTick_Config>
 8001060:	4603      	mov	r3, r0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
	...

0800106c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800106c:	b480      	push	{r7}
 800106e:	b089      	sub	sp, #36	; 0x24
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001076:	2300      	movs	r3, #0
 8001078:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800107a:	2300      	movs	r3, #0
 800107c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800107e:	2300      	movs	r3, #0
 8001080:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001082:	2300      	movs	r3, #0
 8001084:	61fb      	str	r3, [r7, #28]
 8001086:	e165      	b.n	8001354 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001088:	2201      	movs	r2, #1
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	697a      	ldr	r2, [r7, #20]
 8001098:	4013      	ands	r3, r2
 800109a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	f040 8154 	bne.w	800134e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f003 0303 	and.w	r3, r3, #3
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d005      	beq.n	80010be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d130      	bne.n	8001120 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	2203      	movs	r2, #3
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	43db      	mvns	r3, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4013      	ands	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	68da      	ldr	r2, [r3, #12]
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010f4:	2201      	movs	r2, #1
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	43db      	mvns	r3, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4013      	ands	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	091b      	lsrs	r3, r3, #4
 800110a:	f003 0201 	and.w	r2, r3, #1
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4313      	orrs	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 0303 	and.w	r3, r3, #3
 8001128:	2b03      	cmp	r3, #3
 800112a:	d017      	beq.n	800115c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	2203      	movs	r2, #3
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	689a      	ldr	r2, [r3, #8]
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f003 0303 	and.w	r3, r3, #3
 8001164:	2b02      	cmp	r3, #2
 8001166:	d123      	bne.n	80011b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	08da      	lsrs	r2, r3, #3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3208      	adds	r2, #8
 8001170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001174:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	f003 0307 	and.w	r3, r3, #7
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	220f      	movs	r2, #15
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4013      	ands	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	691a      	ldr	r2, [r3, #16]
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	08da      	lsrs	r2, r3, #3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	3208      	adds	r2, #8
 80011aa:	69b9      	ldr	r1, [r7, #24]
 80011ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	2203      	movs	r2, #3
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4013      	ands	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f003 0203 	and.w	r2, r3, #3
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4313      	orrs	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	f000 80ae 	beq.w	800134e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	4b5d      	ldr	r3, [pc, #372]	; (800136c <HAL_GPIO_Init+0x300>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fa:	4a5c      	ldr	r2, [pc, #368]	; (800136c <HAL_GPIO_Init+0x300>)
 80011fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001200:	6453      	str	r3, [r2, #68]	; 0x44
 8001202:	4b5a      	ldr	r3, [pc, #360]	; (800136c <HAL_GPIO_Init+0x300>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800120e:	4a58      	ldr	r2, [pc, #352]	; (8001370 <HAL_GPIO_Init+0x304>)
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	089b      	lsrs	r3, r3, #2
 8001214:	3302      	adds	r3, #2
 8001216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800121a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	f003 0303 	and.w	r3, r3, #3
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	220f      	movs	r2, #15
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	43db      	mvns	r3, r3
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	4013      	ands	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a4f      	ldr	r2, [pc, #316]	; (8001374 <HAL_GPIO_Init+0x308>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d025      	beq.n	8001286 <HAL_GPIO_Init+0x21a>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a4e      	ldr	r2, [pc, #312]	; (8001378 <HAL_GPIO_Init+0x30c>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d01f      	beq.n	8001282 <HAL_GPIO_Init+0x216>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a4d      	ldr	r2, [pc, #308]	; (800137c <HAL_GPIO_Init+0x310>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d019      	beq.n	800127e <HAL_GPIO_Init+0x212>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a4c      	ldr	r2, [pc, #304]	; (8001380 <HAL_GPIO_Init+0x314>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d013      	beq.n	800127a <HAL_GPIO_Init+0x20e>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a4b      	ldr	r2, [pc, #300]	; (8001384 <HAL_GPIO_Init+0x318>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d00d      	beq.n	8001276 <HAL_GPIO_Init+0x20a>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a4a      	ldr	r2, [pc, #296]	; (8001388 <HAL_GPIO_Init+0x31c>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d007      	beq.n	8001272 <HAL_GPIO_Init+0x206>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a49      	ldr	r2, [pc, #292]	; (800138c <HAL_GPIO_Init+0x320>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d101      	bne.n	800126e <HAL_GPIO_Init+0x202>
 800126a:	2306      	movs	r3, #6
 800126c:	e00c      	b.n	8001288 <HAL_GPIO_Init+0x21c>
 800126e:	2307      	movs	r3, #7
 8001270:	e00a      	b.n	8001288 <HAL_GPIO_Init+0x21c>
 8001272:	2305      	movs	r3, #5
 8001274:	e008      	b.n	8001288 <HAL_GPIO_Init+0x21c>
 8001276:	2304      	movs	r3, #4
 8001278:	e006      	b.n	8001288 <HAL_GPIO_Init+0x21c>
 800127a:	2303      	movs	r3, #3
 800127c:	e004      	b.n	8001288 <HAL_GPIO_Init+0x21c>
 800127e:	2302      	movs	r3, #2
 8001280:	e002      	b.n	8001288 <HAL_GPIO_Init+0x21c>
 8001282:	2301      	movs	r3, #1
 8001284:	e000      	b.n	8001288 <HAL_GPIO_Init+0x21c>
 8001286:	2300      	movs	r3, #0
 8001288:	69fa      	ldr	r2, [r7, #28]
 800128a:	f002 0203 	and.w	r2, r2, #3
 800128e:	0092      	lsls	r2, r2, #2
 8001290:	4093      	lsls	r3, r2
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	4313      	orrs	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001298:	4935      	ldr	r1, [pc, #212]	; (8001370 <HAL_GPIO_Init+0x304>)
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	089b      	lsrs	r3, r3, #2
 800129e:	3302      	adds	r3, #2
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012a6:	4b3a      	ldr	r3, [pc, #232]	; (8001390 <HAL_GPIO_Init+0x324>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	43db      	mvns	r3, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4013      	ands	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012ca:	4a31      	ldr	r2, [pc, #196]	; (8001390 <HAL_GPIO_Init+0x324>)
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012d0:	4b2f      	ldr	r3, [pc, #188]	; (8001390 <HAL_GPIO_Init+0x324>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	43db      	mvns	r3, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d003      	beq.n	80012f4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012f4:	4a26      	ldr	r2, [pc, #152]	; (8001390 <HAL_GPIO_Init+0x324>)
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012fa:	4b25      	ldr	r3, [pc, #148]	; (8001390 <HAL_GPIO_Init+0x324>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	43db      	mvns	r3, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4013      	ands	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	4313      	orrs	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800131e:	4a1c      	ldr	r2, [pc, #112]	; (8001390 <HAL_GPIO_Init+0x324>)
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001324:	4b1a      	ldr	r3, [pc, #104]	; (8001390 <HAL_GPIO_Init+0x324>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	43db      	mvns	r3, r3
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4013      	ands	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d003      	beq.n	8001348 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	4313      	orrs	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001348:	4a11      	ldr	r2, [pc, #68]	; (8001390 <HAL_GPIO_Init+0x324>)
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	3301      	adds	r3, #1
 8001352:	61fb      	str	r3, [r7, #28]
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	2b0f      	cmp	r3, #15
 8001358:	f67f ae96 	bls.w	8001088 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800135c:	bf00      	nop
 800135e:	bf00      	nop
 8001360:	3724      	adds	r7, #36	; 0x24
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	40023800 	.word	0x40023800
 8001370:	40013800 	.word	0x40013800
 8001374:	40020000 	.word	0x40020000
 8001378:	40020400 	.word	0x40020400
 800137c:	40020800 	.word	0x40020800
 8001380:	40020c00 	.word	0x40020c00
 8001384:	40021000 	.word	0x40021000
 8001388:	40021400 	.word	0x40021400
 800138c:	40021800 	.word	0x40021800
 8001390:	40013c00 	.word	0x40013c00

08001394 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	460b      	mov	r3, r1
 800139e:	807b      	strh	r3, [r7, #2]
 80013a0:	4613      	mov	r3, r2
 80013a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013a4:	787b      	ldrb	r3, [r7, #1]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d003      	beq.n	80013b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013aa:	887a      	ldrh	r2, [r7, #2]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013b0:	e003      	b.n	80013ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013b2:	887b      	ldrh	r3, [r7, #2]
 80013b4:	041a      	lsls	r2, r3, #16
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	619a      	str	r2, [r3, #24]
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80013c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013c8:	b08f      	sub	sp, #60	; 0x3c
 80013ca:	af0a      	add	r7, sp, #40	; 0x28
 80013cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d101      	bne.n	80013d8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e116      	b.n	8001606 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d106      	bne.n	80013f8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f005 ff0a 	bl	800720c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2203      	movs	r2, #3
 80013fc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001408:	2b00      	cmp	r3, #0
 800140a:	d102      	bne.n	8001412 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2200      	movs	r2, #0
 8001410:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4618      	mov	r0, r3
 8001418:	f002 fe8d 	bl	8004136 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	603b      	str	r3, [r7, #0]
 8001422:	687e      	ldr	r6, [r7, #4]
 8001424:	466d      	mov	r5, sp
 8001426:	f106 0410 	add.w	r4, r6, #16
 800142a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800142c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800142e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001430:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001432:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001436:	e885 0003 	stmia.w	r5, {r0, r1}
 800143a:	1d33      	adds	r3, r6, #4
 800143c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800143e:	6838      	ldr	r0, [r7, #0]
 8001440:	f002 fd64 	bl	8003f0c <USB_CoreInit>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d005      	beq.n	8001456 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2202      	movs	r2, #2
 800144e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e0d7      	b.n	8001606 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2100      	movs	r1, #0
 800145c:	4618      	mov	r0, r3
 800145e:	f002 fe7b 	bl	8004158 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001462:	2300      	movs	r3, #0
 8001464:	73fb      	strb	r3, [r7, #15]
 8001466:	e04a      	b.n	80014fe <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001468:	7bfa      	ldrb	r2, [r7, #15]
 800146a:	6879      	ldr	r1, [r7, #4]
 800146c:	4613      	mov	r3, r2
 800146e:	00db      	lsls	r3, r3, #3
 8001470:	1a9b      	subs	r3, r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	440b      	add	r3, r1
 8001476:	333d      	adds	r3, #61	; 0x3d
 8001478:	2201      	movs	r2, #1
 800147a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800147c:	7bfa      	ldrb	r2, [r7, #15]
 800147e:	6879      	ldr	r1, [r7, #4]
 8001480:	4613      	mov	r3, r2
 8001482:	00db      	lsls	r3, r3, #3
 8001484:	1a9b      	subs	r3, r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	440b      	add	r3, r1
 800148a:	333c      	adds	r3, #60	; 0x3c
 800148c:	7bfa      	ldrb	r2, [r7, #15]
 800148e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001490:	7bfa      	ldrb	r2, [r7, #15]
 8001492:	7bfb      	ldrb	r3, [r7, #15]
 8001494:	b298      	uxth	r0, r3
 8001496:	6879      	ldr	r1, [r7, #4]
 8001498:	4613      	mov	r3, r2
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	1a9b      	subs	r3, r3, r2
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	440b      	add	r3, r1
 80014a2:	3342      	adds	r3, #66	; 0x42
 80014a4:	4602      	mov	r2, r0
 80014a6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80014a8:	7bfa      	ldrb	r2, [r7, #15]
 80014aa:	6879      	ldr	r1, [r7, #4]
 80014ac:	4613      	mov	r3, r2
 80014ae:	00db      	lsls	r3, r3, #3
 80014b0:	1a9b      	subs	r3, r3, r2
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	440b      	add	r3, r1
 80014b6:	333f      	adds	r3, #63	; 0x3f
 80014b8:	2200      	movs	r2, #0
 80014ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80014bc:	7bfa      	ldrb	r2, [r7, #15]
 80014be:	6879      	ldr	r1, [r7, #4]
 80014c0:	4613      	mov	r3, r2
 80014c2:	00db      	lsls	r3, r3, #3
 80014c4:	1a9b      	subs	r3, r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	440b      	add	r3, r1
 80014ca:	3344      	adds	r3, #68	; 0x44
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80014d0:	7bfa      	ldrb	r2, [r7, #15]
 80014d2:	6879      	ldr	r1, [r7, #4]
 80014d4:	4613      	mov	r3, r2
 80014d6:	00db      	lsls	r3, r3, #3
 80014d8:	1a9b      	subs	r3, r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	440b      	add	r3, r1
 80014de:	3348      	adds	r3, #72	; 0x48
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80014e4:	7bfa      	ldrb	r2, [r7, #15]
 80014e6:	6879      	ldr	r1, [r7, #4]
 80014e8:	4613      	mov	r3, r2
 80014ea:	00db      	lsls	r3, r3, #3
 80014ec:	1a9b      	subs	r3, r3, r2
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	440b      	add	r3, r1
 80014f2:	3350      	adds	r3, #80	; 0x50
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
 80014fa:	3301      	adds	r3, #1
 80014fc:	73fb      	strb	r3, [r7, #15]
 80014fe:	7bfa      	ldrb	r2, [r7, #15]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	429a      	cmp	r2, r3
 8001506:	d3af      	bcc.n	8001468 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001508:	2300      	movs	r3, #0
 800150a:	73fb      	strb	r3, [r7, #15]
 800150c:	e044      	b.n	8001598 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800150e:	7bfa      	ldrb	r2, [r7, #15]
 8001510:	6879      	ldr	r1, [r7, #4]
 8001512:	4613      	mov	r3, r2
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	1a9b      	subs	r3, r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	440b      	add	r3, r1
 800151c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001520:	2200      	movs	r2, #0
 8001522:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001524:	7bfa      	ldrb	r2, [r7, #15]
 8001526:	6879      	ldr	r1, [r7, #4]
 8001528:	4613      	mov	r3, r2
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	1a9b      	subs	r3, r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	440b      	add	r3, r1
 8001532:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001536:	7bfa      	ldrb	r2, [r7, #15]
 8001538:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800153a:	7bfa      	ldrb	r2, [r7, #15]
 800153c:	6879      	ldr	r1, [r7, #4]
 800153e:	4613      	mov	r3, r2
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	1a9b      	subs	r3, r3, r2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	440b      	add	r3, r1
 8001548:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800154c:	2200      	movs	r2, #0
 800154e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001550:	7bfa      	ldrb	r2, [r7, #15]
 8001552:	6879      	ldr	r1, [r7, #4]
 8001554:	4613      	mov	r3, r2
 8001556:	00db      	lsls	r3, r3, #3
 8001558:	1a9b      	subs	r3, r3, r2
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	440b      	add	r3, r1
 800155e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001566:	7bfa      	ldrb	r2, [r7, #15]
 8001568:	6879      	ldr	r1, [r7, #4]
 800156a:	4613      	mov	r3, r2
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	1a9b      	subs	r3, r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	440b      	add	r3, r1
 8001574:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800157c:	7bfa      	ldrb	r2, [r7, #15]
 800157e:	6879      	ldr	r1, [r7, #4]
 8001580:	4613      	mov	r3, r2
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	1a9b      	subs	r3, r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	440b      	add	r3, r1
 800158a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001592:	7bfb      	ldrb	r3, [r7, #15]
 8001594:	3301      	adds	r3, #1
 8001596:	73fb      	strb	r3, [r7, #15]
 8001598:	7bfa      	ldrb	r2, [r7, #15]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d3b5      	bcc.n	800150e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	603b      	str	r3, [r7, #0]
 80015a8:	687e      	ldr	r6, [r7, #4]
 80015aa:	466d      	mov	r5, sp
 80015ac:	f106 0410 	add.w	r4, r6, #16
 80015b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015bc:	e885 0003 	stmia.w	r5, {r0, r1}
 80015c0:	1d33      	adds	r3, r6, #4
 80015c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015c4:	6838      	ldr	r0, [r7, #0]
 80015c6:	f002 fe13 	bl	80041f0 <USB_DevInit>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d005      	beq.n	80015dc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2202      	movs	r2, #2
 80015d4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e014      	b.n	8001606 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2201      	movs	r2, #1
 80015e8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d102      	bne.n	80015fa <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f001 f891 	bl	800271c <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4618      	mov	r0, r3
 8001600:	f003 fe82 	bl	8005308 <USB_DevDisconnect>

  return HAL_OK;
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3714      	adds	r7, #20
 800160a:	46bd      	mov	sp, r7
 800160c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800160e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b084      	sub	sp, #16
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001622:	2b01      	cmp	r3, #1
 8001624:	d101      	bne.n	800162a <HAL_PCD_Start+0x1c>
 8001626:	2302      	movs	r3, #2
 8001628:	e020      	b.n	800166c <HAL_PCD_Start+0x5e>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2201      	movs	r2, #1
 800162e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001636:	2b01      	cmp	r3, #1
 8001638:	d109      	bne.n	800164e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800163e:	2b01      	cmp	r3, #1
 8001640:	d005      	beq.n	800164e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001646:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4618      	mov	r0, r3
 8001654:	f002 fd5e 	bl	8004114 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4618      	mov	r0, r3
 800165e:	f003 fe32 	bl	80052c6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800166a:	2300      	movs	r3, #0
}
 800166c:	4618      	mov	r0, r3
 800166e:	3710      	adds	r7, #16
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001674:	b590      	push	{r4, r7, lr}
 8001676:	b08d      	sub	sp, #52	; 0x34
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001682:	6a3b      	ldr	r3, [r7, #32]
 8001684:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4618      	mov	r0, r3
 800168c:	f003 fef0 	bl	8005470 <USB_GetMode>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	f040 83ca 	bne.w	8001e2c <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f003 fe54 	bl	800534a <USB_ReadInterrupts>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	f000 83c0 	beq.w	8001e2a <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f003 fe4b 	bl	800534a <USB_ReadInterrupts>
 80016b4:	4603      	mov	r3, r0
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d107      	bne.n	80016ce <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	695a      	ldr	r2, [r3, #20]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f002 0202 	and.w	r2, r2, #2
 80016cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f003 fe39 	bl	800534a <USB_ReadInterrupts>
 80016d8:	4603      	mov	r3, r0
 80016da:	f003 0310 	and.w	r3, r3, #16
 80016de:	2b10      	cmp	r3, #16
 80016e0:	d161      	bne.n	80017a6 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	699a      	ldr	r2, [r3, #24]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f022 0210 	bic.w	r2, r2, #16
 80016f0:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80016f2:	6a3b      	ldr	r3, [r7, #32]
 80016f4:	6a1b      	ldr	r3, [r3, #32]
 80016f6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	f003 020f 	and.w	r2, r3, #15
 80016fe:	4613      	mov	r3, r2
 8001700:	00db      	lsls	r3, r3, #3
 8001702:	1a9b      	subs	r3, r3, r2
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	4413      	add	r3, r2
 800170e:	3304      	adds	r3, #4
 8001710:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	0c5b      	lsrs	r3, r3, #17
 8001716:	f003 030f 	and.w	r3, r3, #15
 800171a:	2b02      	cmp	r3, #2
 800171c:	d124      	bne.n	8001768 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001724:	4013      	ands	r3, r2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d035      	beq.n	8001796 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	091b      	lsrs	r3, r3, #4
 8001732:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001734:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001738:	b29b      	uxth	r3, r3
 800173a:	461a      	mov	r2, r3
 800173c:	6a38      	ldr	r0, [r7, #32]
 800173e:	f003 fc70 	bl	8005022 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	68da      	ldr	r2, [r3, #12]
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	091b      	lsrs	r3, r3, #4
 800174a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800174e:	441a      	add	r2, r3
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	699a      	ldr	r2, [r3, #24]
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	091b      	lsrs	r3, r3, #4
 800175c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001760:	441a      	add	r2, r3
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	619a      	str	r2, [r3, #24]
 8001766:	e016      	b.n	8001796 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	0c5b      	lsrs	r3, r3, #17
 800176c:	f003 030f 	and.w	r3, r3, #15
 8001770:	2b06      	cmp	r3, #6
 8001772:	d110      	bne.n	8001796 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800177a:	2208      	movs	r2, #8
 800177c:	4619      	mov	r1, r3
 800177e:	6a38      	ldr	r0, [r7, #32]
 8001780:	f003 fc4f 	bl	8005022 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	699a      	ldr	r2, [r3, #24]
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	091b      	lsrs	r3, r3, #4
 800178c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001790:	441a      	add	r2, r3
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	699a      	ldr	r2, [r3, #24]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f042 0210 	orr.w	r2, r2, #16
 80017a4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f003 fdcd 	bl	800534a <USB_ReadInterrupts>
 80017b0:	4603      	mov	r3, r0
 80017b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017b6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80017ba:	d16e      	bne.n	800189a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80017bc:	2300      	movs	r3, #0
 80017be:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f003 fdd3 	bl	8005370 <USB_ReadDevAllOutEpInterrupt>
 80017ca:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80017cc:	e062      	b.n	8001894 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80017ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017d0:	f003 0301 	and.w	r3, r3, #1
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d057      	beq.n	8001888 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017de:	b2d2      	uxtb	r2, r2
 80017e0:	4611      	mov	r1, r2
 80017e2:	4618      	mov	r0, r3
 80017e4:	f003 fdf8 	bl	80053d8 <USB_ReadDevOutEPInterrupt>
 80017e8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d00c      	beq.n	800180e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80017f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f6:	015a      	lsls	r2, r3, #5
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	4413      	add	r3, r2
 80017fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001800:	461a      	mov	r2, r3
 8001802:	2301      	movs	r3, #1
 8001804:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001806:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f000 fddd 	bl	80023c8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	f003 0308 	and.w	r3, r3, #8
 8001814:	2b00      	cmp	r3, #0
 8001816:	d00c      	beq.n	8001832 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181a:	015a      	lsls	r2, r3, #5
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	4413      	add	r3, r2
 8001820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001824:	461a      	mov	r2, r3
 8001826:	2308      	movs	r3, #8
 8001828:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800182a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f000 fed7 	bl	80025e0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	f003 0310 	and.w	r3, r3, #16
 8001838:	2b00      	cmp	r3, #0
 800183a:	d008      	beq.n	800184e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183e:	015a      	lsls	r2, r3, #5
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	4413      	add	r3, r2
 8001844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001848:	461a      	mov	r2, r3
 800184a:	2310      	movs	r3, #16
 800184c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	f003 0320 	and.w	r3, r3, #32
 8001854:	2b00      	cmp	r3, #0
 8001856:	d008      	beq.n	800186a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185a:	015a      	lsls	r2, r3, #5
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	4413      	add	r3, r2
 8001860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001864:	461a      	mov	r2, r3
 8001866:	2320      	movs	r3, #32
 8001868:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d009      	beq.n	8001888 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001876:	015a      	lsls	r2, r3, #5
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	4413      	add	r3, r2
 800187c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001880:	461a      	mov	r2, r3
 8001882:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001886:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188a:	3301      	adds	r3, #1
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800188e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001890:	085b      	lsrs	r3, r3, #1
 8001892:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001896:	2b00      	cmp	r3, #0
 8001898:	d199      	bne.n	80017ce <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f003 fd53 	bl	800534a <USB_ReadInterrupts>
 80018a4:	4603      	mov	r3, r0
 80018a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80018ae:	f040 80c0 	bne.w	8001a32 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f003 fd74 	bl	80053a4 <USB_ReadDevAllInEpInterrupt>
 80018bc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80018be:	2300      	movs	r3, #0
 80018c0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80018c2:	e0b2      	b.n	8001a2a <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80018c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f000 80a7 	beq.w	8001a1e <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018d6:	b2d2      	uxtb	r2, r2
 80018d8:	4611      	mov	r1, r2
 80018da:	4618      	mov	r0, r3
 80018dc:	f003 fd9a 	bl	8005414 <USB_ReadDevInEPInterrupt>
 80018e0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	f003 0301 	and.w	r3, r3, #1
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d057      	beq.n	800199c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	f003 030f 	and.w	r3, r3, #15
 80018f2:	2201      	movs	r2, #1
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001900:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	43db      	mvns	r3, r3
 8001906:	69f9      	ldr	r1, [r7, #28]
 8001908:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800190c:	4013      	ands	r3, r2
 800190e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001912:	015a      	lsls	r2, r3, #5
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	4413      	add	r3, r2
 8001918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800191c:	461a      	mov	r2, r3
 800191e:	2301      	movs	r3, #1
 8001920:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d132      	bne.n	8001990 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800192a:	6879      	ldr	r1, [r7, #4]
 800192c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800192e:	4613      	mov	r3, r2
 8001930:	00db      	lsls	r3, r3, #3
 8001932:	1a9b      	subs	r3, r3, r2
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	440b      	add	r3, r1
 8001938:	3348      	adds	r3, #72	; 0x48
 800193a:	6819      	ldr	r1, [r3, #0]
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001940:	4613      	mov	r3, r2
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	1a9b      	subs	r3, r3, r2
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	4403      	add	r3, r0
 800194a:	3344      	adds	r3, #68	; 0x44
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4419      	add	r1, r3
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001954:	4613      	mov	r3, r2
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	1a9b      	subs	r3, r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	4403      	add	r3, r0
 800195e:	3348      	adds	r3, #72	; 0x48
 8001960:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	2b00      	cmp	r3, #0
 8001966:	d113      	bne.n	8001990 <HAL_PCD_IRQHandler+0x31c>
 8001968:	6879      	ldr	r1, [r7, #4]
 800196a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800196c:	4613      	mov	r3, r2
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	1a9b      	subs	r3, r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	440b      	add	r3, r1
 8001976:	3350      	adds	r3, #80	; 0x50
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d108      	bne.n	8001990 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6818      	ldr	r0, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001988:	461a      	mov	r2, r3
 800198a:	2101      	movs	r1, #1
 800198c:	f003 fda2 	bl	80054d4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001992:	b2db      	uxtb	r3, r3
 8001994:	4619      	mov	r1, r3
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f005 fccf 	bl	800733a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	f003 0308 	and.w	r3, r3, #8
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d008      	beq.n	80019b8 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	015a      	lsls	r2, r3, #5
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	4413      	add	r3, r2
 80019ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019b2:	461a      	mov	r2, r3
 80019b4:	2308      	movs	r3, #8
 80019b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	f003 0310 	and.w	r3, r3, #16
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d008      	beq.n	80019d4 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80019c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c4:	015a      	lsls	r2, r3, #5
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	4413      	add	r3, r2
 80019ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019ce:	461a      	mov	r2, r3
 80019d0:	2310      	movs	r3, #16
 80019d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d008      	beq.n	80019f0 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	015a      	lsls	r2, r3, #5
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	4413      	add	r3, r2
 80019e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019ea:	461a      	mov	r2, r3
 80019ec:	2340      	movs	r3, #64	; 0x40
 80019ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d008      	beq.n	8001a0c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80019fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fc:	015a      	lsls	r2, r3, #5
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	4413      	add	r3, r2
 8001a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a06:	461a      	mov	r2, r3
 8001a08:	2302      	movs	r3, #2
 8001a0a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001a16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f000 fc48 	bl	80022ae <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a20:	3301      	adds	r3, #1
 8001a22:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a26:	085b      	lsrs	r3, r3, #1
 8001a28:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f47f af49 	bne.w	80018c4 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f003 fc87 	bl	800534a <USB_ReadInterrupts>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001a42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001a46:	d122      	bne.n	8001a8e <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	69fa      	ldr	r2, [r7, #28]
 8001a52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a56:	f023 0301 	bic.w	r3, r3, #1
 8001a5a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d108      	bne.n	8001a78 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001a6e:	2100      	movs	r1, #0
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f005 feb1 	bl	80077d8 <HAL_PCDEx_LPM_Callback>
 8001a76:	e002      	b.n	8001a7e <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f005 fcd5 	bl	8007428 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	695a      	ldr	r2, [r3, #20]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001a8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f003 fc59 	bl	800534a <USB_ReadInterrupts>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001aa2:	d112      	bne.n	8001aca <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d102      	bne.n	8001aba <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f005 fc91 	bl	80073dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	695a      	ldr	r2, [r3, #20]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001ac8:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f003 fc3b 	bl	800534a <USB_ReadInterrupts>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ada:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001ade:	d121      	bne.n	8001b24 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	695a      	ldr	r2, [r3, #20]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001aee:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d111      	bne.n	8001b1e <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2201      	movs	r2, #1
 8001afe:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b08:	089b      	lsrs	r3, r3, #2
 8001b0a:	f003 020f 	and.w	r2, r3, #15
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001b14:	2101      	movs	r1, #1
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f005 fe5e 	bl	80077d8 <HAL_PCDEx_LPM_Callback>
 8001b1c:	e002      	b.n	8001b24 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f005 fc5c 	bl	80073dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f003 fc0e 	bl	800534a <USB_ReadInterrupts>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b38:	f040 80c7 	bne.w	8001cca <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	69fa      	ldr	r2, [r7, #28]
 8001b46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b4a:	f023 0301 	bic.w	r3, r3, #1
 8001b4e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2110      	movs	r1, #16
 8001b56:	4618      	mov	r0, r3
 8001b58:	f002 fca8 	bl	80044ac <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b60:	e056      	b.n	8001c10 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b64:	015a      	lsls	r2, r3, #5
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	4413      	add	r3, r2
 8001b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b6e:	461a      	mov	r2, r3
 8001b70:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001b74:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b78:	015a      	lsls	r2, r3, #5
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b86:	0151      	lsls	r1, r2, #5
 8001b88:	69fa      	ldr	r2, [r7, #28]
 8001b8a:	440a      	add	r2, r1
 8001b8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001b90:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b94:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b98:	015a      	lsls	r2, r3, #5
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ba6:	0151      	lsls	r1, r2, #5
 8001ba8:	69fa      	ldr	r2, [r7, #28]
 8001baa:	440a      	add	r2, r1
 8001bac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001bb0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001bb4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bb8:	015a      	lsls	r2, r3, #5
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001bc8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bcc:	015a      	lsls	r2, r3, #5
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bda:	0151      	lsls	r1, r2, #5
 8001bdc:	69fa      	ldr	r2, [r7, #28]
 8001bde:	440a      	add	r2, r1
 8001be0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001be4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001be8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bec:	015a      	lsls	r2, r3, #5
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bfa:	0151      	lsls	r1, r2, #5
 8001bfc:	69fa      	ldr	r2, [r7, #28]
 8001bfe:	440a      	add	r2, r1
 8001c00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001c04:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001c08:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d3a3      	bcc.n	8001b62 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	69fa      	ldr	r2, [r7, #28]
 8001c24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c28:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001c2c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d016      	beq.n	8001c64 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c40:	69fa      	ldr	r2, [r7, #28]
 8001c42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c46:	f043 030b 	orr.w	r3, r3, #11
 8001c4a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c56:	69fa      	ldr	r2, [r7, #28]
 8001c58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c5c:	f043 030b 	orr.w	r3, r3, #11
 8001c60:	6453      	str	r3, [r2, #68]	; 0x44
 8001c62:	e015      	b.n	8001c90 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c6a:	695b      	ldr	r3, [r3, #20]
 8001c6c:	69fa      	ldr	r2, [r7, #28]
 8001c6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c72:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c76:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001c7a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c82:	691b      	ldr	r3, [r3, #16]
 8001c84:	69fa      	ldr	r2, [r7, #28]
 8001c86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c8a:	f043 030b 	orr.w	r3, r3, #11
 8001c8e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	69fa      	ldr	r2, [r7, #28]
 8001c9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c9e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001ca2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6818      	ldr	r0, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	691b      	ldr	r3, [r3, #16]
 8001cac:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	f003 fc0d 	bl	80054d4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	695a      	ldr	r2, [r3, #20]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001cc8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f003 fb3b 	bl	800534a <USB_ReadInterrupts>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cde:	d124      	bne.n	8001d2a <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f003 fbd1 	bl	800548c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f002 fc39 	bl	8004566 <USB_GetDevSpeed>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681c      	ldr	r4, [r3, #0]
 8001d00:	f000 fe16 	bl	8002930 <HAL_RCC_GetHCLKFreq>
 8001d04:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	4620      	mov	r0, r4
 8001d10:	f002 f95e 	bl	8003fd0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f005 fb38 	bl	800738a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	695a      	ldr	r2, [r3, #20]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001d28:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f003 fb0b 	bl	800534a <USB_ReadInterrupts>
 8001d34:	4603      	mov	r3, r0
 8001d36:	f003 0308 	and.w	r3, r3, #8
 8001d3a:	2b08      	cmp	r3, #8
 8001d3c:	d10a      	bne.n	8001d54 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f005 fb15 	bl	800736e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	695a      	ldr	r2, [r3, #20]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f002 0208 	and.w	r2, r2, #8
 8001d52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f003 faf6 	bl	800534a <USB_ReadInterrupts>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d68:	d10f      	bne.n	8001d8a <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	4619      	mov	r1, r3
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f005 fb77 	bl	8007468 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	695a      	ldr	r2, [r3, #20]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001d88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f003 fadb 	bl	800534a <USB_ReadInterrupts>
 8001d94:	4603      	mov	r3, r0
 8001d96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001d9e:	d10f      	bne.n	8001dc0 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001da0:	2300      	movs	r3, #0
 8001da2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	4619      	mov	r1, r3
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f005 fb4a 	bl	8007444 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	695a      	ldr	r2, [r3, #20]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001dbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f003 fac0 	bl	800534a <USB_ReadInterrupts>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dd4:	d10a      	bne.n	8001dec <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f005 fb58 	bl	800748c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	695a      	ldr	r2, [r3, #20]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001dea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f003 faaa 	bl	800534a <USB_ReadInterrupts>
 8001df6:	4603      	mov	r3, r0
 8001df8:	f003 0304 	and.w	r3, r3, #4
 8001dfc:	2b04      	cmp	r3, #4
 8001dfe:	d115      	bne.n	8001e2c <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	f003 0304 	and.w	r3, r3, #4
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d002      	beq.n	8001e18 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f005 fb48 	bl	80074a8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6859      	ldr	r1, [r3, #4]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	430a      	orrs	r2, r1
 8001e26:	605a      	str	r2, [r3, #4]
 8001e28:	e000      	b.n	8001e2c <HAL_PCD_IRQHandler+0x7b8>
      return;
 8001e2a:	bf00      	nop
    }
  }
}
 8001e2c:	3734      	adds	r7, #52	; 0x34
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd90      	pop	{r4, r7, pc}

08001e32 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b082      	sub	sp, #8
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d101      	bne.n	8001e4c <HAL_PCD_SetAddress+0x1a>
 8001e48:	2302      	movs	r3, #2
 8001e4a:	e013      	b.n	8001e74 <HAL_PCD_SetAddress+0x42>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	78fa      	ldrb	r2, [r7, #3]
 8001e58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	78fa      	ldrb	r2, [r7, #3]
 8001e62:	4611      	mov	r1, r2
 8001e64:	4618      	mov	r0, r3
 8001e66:	f003 fa08 	bl	800527a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	4608      	mov	r0, r1
 8001e86:	4611      	mov	r1, r2
 8001e88:	461a      	mov	r2, r3
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	70fb      	strb	r3, [r7, #3]
 8001e8e:	460b      	mov	r3, r1
 8001e90:	803b      	strh	r3, [r7, #0]
 8001e92:	4613      	mov	r3, r2
 8001e94:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001e96:	2300      	movs	r3, #0
 8001e98:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	da0f      	bge.n	8001ec2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ea2:	78fb      	ldrb	r3, [r7, #3]
 8001ea4:	f003 020f 	and.w	r2, r3, #15
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	1a9b      	subs	r3, r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	3338      	adds	r3, #56	; 0x38
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	3304      	adds	r3, #4
 8001eb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	705a      	strb	r2, [r3, #1]
 8001ec0:	e00f      	b.n	8001ee2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ec2:	78fb      	ldrb	r3, [r7, #3]
 8001ec4:	f003 020f 	and.w	r2, r3, #15
 8001ec8:	4613      	mov	r3, r2
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	1a9b      	subs	r3, r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	3304      	adds	r3, #4
 8001eda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001ee2:	78fb      	ldrb	r3, [r7, #3]
 8001ee4:	f003 030f 	and.w	r3, r3, #15
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001eee:	883a      	ldrh	r2, [r7, #0]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	78ba      	ldrb	r2, [r7, #2]
 8001ef8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	785b      	ldrb	r3, [r3, #1]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d004      	beq.n	8001f0c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001f0c:	78bb      	ldrb	r3, [r7, #2]
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d102      	bne.n	8001f18 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2200      	movs	r2, #0
 8001f16:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d101      	bne.n	8001f26 <HAL_PCD_EP_Open+0xaa>
 8001f22:	2302      	movs	r3, #2
 8001f24:	e00e      	b.n	8001f44 <HAL_PCD_EP_Open+0xc8>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68f9      	ldr	r1, [r7, #12]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f002 fb3b 	bl	80045b0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001f42:	7afb      	ldrb	r3, [r7, #11]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3710      	adds	r7, #16
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	460b      	mov	r3, r1
 8001f56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	da0f      	bge.n	8001f80 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f60:	78fb      	ldrb	r3, [r7, #3]
 8001f62:	f003 020f 	and.w	r2, r3, #15
 8001f66:	4613      	mov	r3, r2
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	1a9b      	subs	r3, r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	3338      	adds	r3, #56	; 0x38
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	4413      	add	r3, r2
 8001f74:	3304      	adds	r3, #4
 8001f76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	705a      	strb	r2, [r3, #1]
 8001f7e:	e00f      	b.n	8001fa0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f80:	78fb      	ldrb	r3, [r7, #3]
 8001f82:	f003 020f 	and.w	r2, r3, #15
 8001f86:	4613      	mov	r3, r2
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	1a9b      	subs	r3, r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	4413      	add	r3, r2
 8001f96:	3304      	adds	r3, #4
 8001f98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001fa0:	78fb      	ldrb	r3, [r7, #3]
 8001fa2:	f003 030f 	and.w	r3, r3, #15
 8001fa6:	b2da      	uxtb	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d101      	bne.n	8001fba <HAL_PCD_EP_Close+0x6e>
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	e00e      	b.n	8001fd8 <HAL_PCD_EP_Close+0x8c>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68f9      	ldr	r1, [r7, #12]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f002 fb79 	bl	80046c0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3710      	adds	r7, #16
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	607a      	str	r2, [r7, #4]
 8001fea:	603b      	str	r3, [r7, #0]
 8001fec:	460b      	mov	r3, r1
 8001fee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ff0:	7afb      	ldrb	r3, [r7, #11]
 8001ff2:	f003 020f 	and.w	r2, r3, #15
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	00db      	lsls	r3, r3, #3
 8001ffa:	1a9b      	subs	r3, r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	4413      	add	r3, r2
 8002006:	3304      	adds	r3, #4
 8002008:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	2200      	movs	r2, #0
 800201a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	2200      	movs	r2, #0
 8002020:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002022:	7afb      	ldrb	r3, [r7, #11]
 8002024:	f003 030f 	and.w	r3, r3, #15
 8002028:	b2da      	uxtb	r2, r3
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d102      	bne.n	800203c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800203c:	7afb      	ldrb	r3, [r7, #11]
 800203e:	f003 030f 	and.w	r3, r3, #15
 8002042:	2b00      	cmp	r3, #0
 8002044:	d109      	bne.n	800205a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	6818      	ldr	r0, [r3, #0]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	b2db      	uxtb	r3, r3
 8002050:	461a      	mov	r2, r3
 8002052:	6979      	ldr	r1, [r7, #20]
 8002054:	f002 fe54 	bl	8004d00 <USB_EP0StartXfer>
 8002058:	e008      	b.n	800206c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6818      	ldr	r0, [r3, #0]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	b2db      	uxtb	r3, r3
 8002064:	461a      	mov	r2, r3
 8002066:	6979      	ldr	r1, [r7, #20]
 8002068:	f002 fc06 	bl	8004878 <USB_EPStartXfer>
  }

  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3718      	adds	r7, #24
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002076:	b480      	push	{r7}
 8002078:	b083      	sub	sp, #12
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
 800207e:	460b      	mov	r3, r1
 8002080:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002082:	78fb      	ldrb	r3, [r7, #3]
 8002084:	f003 020f 	and.w	r2, r3, #15
 8002088:	6879      	ldr	r1, [r7, #4]
 800208a:	4613      	mov	r3, r2
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	1a9b      	subs	r3, r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	440b      	add	r3, r1
 8002094:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002098:	681b      	ldr	r3, [r3, #0]
}
 800209a:	4618      	mov	r0, r3
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr

080020a6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b086      	sub	sp, #24
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	60f8      	str	r0, [r7, #12]
 80020ae:	607a      	str	r2, [r7, #4]
 80020b0:	603b      	str	r3, [r7, #0]
 80020b2:	460b      	mov	r3, r1
 80020b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020b6:	7afb      	ldrb	r3, [r7, #11]
 80020b8:	f003 020f 	and.w	r2, r3, #15
 80020bc:	4613      	mov	r3, r2
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	1a9b      	subs	r3, r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	3338      	adds	r3, #56	; 0x38
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	4413      	add	r3, r2
 80020ca:	3304      	adds	r3, #4
 80020cc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	2200      	movs	r2, #0
 80020de:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	2201      	movs	r2, #1
 80020e4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020e6:	7afb      	ldrb	r3, [r7, #11]
 80020e8:	f003 030f 	and.w	r3, r3, #15
 80020ec:	b2da      	uxtb	r2, r3
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d102      	bne.n	8002100 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002100:	7afb      	ldrb	r3, [r7, #11]
 8002102:	f003 030f 	and.w	r3, r3, #15
 8002106:	2b00      	cmp	r3, #0
 8002108:	d109      	bne.n	800211e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6818      	ldr	r0, [r3, #0]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	b2db      	uxtb	r3, r3
 8002114:	461a      	mov	r2, r3
 8002116:	6979      	ldr	r1, [r7, #20]
 8002118:	f002 fdf2 	bl	8004d00 <USB_EP0StartXfer>
 800211c:	e008      	b.n	8002130 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6818      	ldr	r0, [r3, #0]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	b2db      	uxtb	r3, r3
 8002128:	461a      	mov	r2, r3
 800212a:	6979      	ldr	r1, [r7, #20]
 800212c:	f002 fba4 	bl	8004878 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3718      	adds	r7, #24
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b084      	sub	sp, #16
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
 8002142:	460b      	mov	r3, r1
 8002144:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002146:	78fb      	ldrb	r3, [r7, #3]
 8002148:	f003 020f 	and.w	r2, r3, #15
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	429a      	cmp	r2, r3
 8002152:	d901      	bls.n	8002158 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e050      	b.n	80021fa <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002158:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800215c:	2b00      	cmp	r3, #0
 800215e:	da0f      	bge.n	8002180 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002160:	78fb      	ldrb	r3, [r7, #3]
 8002162:	f003 020f 	and.w	r2, r3, #15
 8002166:	4613      	mov	r3, r2
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	1a9b      	subs	r3, r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	3338      	adds	r3, #56	; 0x38
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	4413      	add	r3, r2
 8002174:	3304      	adds	r3, #4
 8002176:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2201      	movs	r2, #1
 800217c:	705a      	strb	r2, [r3, #1]
 800217e:	e00d      	b.n	800219c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002180:	78fa      	ldrb	r2, [r7, #3]
 8002182:	4613      	mov	r3, r2
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	1a9b      	subs	r3, r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	4413      	add	r3, r2
 8002192:	3304      	adds	r3, #4
 8002194:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2200      	movs	r2, #0
 800219a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2201      	movs	r2, #1
 80021a0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021a2:	78fb      	ldrb	r3, [r7, #3]
 80021a4:	f003 030f 	and.w	r3, r3, #15
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d101      	bne.n	80021bc <HAL_PCD_EP_SetStall+0x82>
 80021b8:	2302      	movs	r3, #2
 80021ba:	e01e      	b.n	80021fa <HAL_PCD_EP_SetStall+0xc0>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68f9      	ldr	r1, [r7, #12]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f002 ff81 	bl	80050d2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021d0:	78fb      	ldrb	r3, [r7, #3]
 80021d2:	f003 030f 	and.w	r3, r3, #15
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d10a      	bne.n	80021f0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6818      	ldr	r0, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	b2d9      	uxtb	r1, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80021ea:	461a      	mov	r2, r3
 80021ec:	f003 f972 	bl	80054d4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b084      	sub	sp, #16
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
 800220a:	460b      	mov	r3, r1
 800220c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800220e:	78fb      	ldrb	r3, [r7, #3]
 8002210:	f003 020f 	and.w	r2, r3, #15
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	429a      	cmp	r2, r3
 800221a:	d901      	bls.n	8002220 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e042      	b.n	80022a6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002220:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002224:	2b00      	cmp	r3, #0
 8002226:	da0f      	bge.n	8002248 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002228:	78fb      	ldrb	r3, [r7, #3]
 800222a:	f003 020f 	and.w	r2, r3, #15
 800222e:	4613      	mov	r3, r2
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	1a9b      	subs	r3, r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	3338      	adds	r3, #56	; 0x38
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	4413      	add	r3, r2
 800223c:	3304      	adds	r3, #4
 800223e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2201      	movs	r2, #1
 8002244:	705a      	strb	r2, [r3, #1]
 8002246:	e00f      	b.n	8002268 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002248:	78fb      	ldrb	r3, [r7, #3]
 800224a:	f003 020f 	and.w	r2, r3, #15
 800224e:	4613      	mov	r3, r2
 8002250:	00db      	lsls	r3, r3, #3
 8002252:	1a9b      	subs	r3, r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	4413      	add	r3, r2
 800225e:	3304      	adds	r3, #4
 8002260:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2200      	movs	r2, #0
 8002266:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2200      	movs	r2, #0
 800226c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800226e:	78fb      	ldrb	r3, [r7, #3]
 8002270:	f003 030f 	and.w	r3, r3, #15
 8002274:	b2da      	uxtb	r2, r3
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002280:	2b01      	cmp	r3, #1
 8002282:	d101      	bne.n	8002288 <HAL_PCD_EP_ClrStall+0x86>
 8002284:	2302      	movs	r3, #2
 8002286:	e00e      	b.n	80022a6 <HAL_PCD_EP_ClrStall+0xa4>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68f9      	ldr	r1, [r7, #12]
 8002296:	4618      	mov	r0, r3
 8002298:	f002 ff89 	bl	80051ae <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b08a      	sub	sp, #40	; 0x28
 80022b2:	af02      	add	r7, sp, #8
 80022b4:	6078      	str	r0, [r7, #4]
 80022b6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80022c2:	683a      	ldr	r2, [r7, #0]
 80022c4:	4613      	mov	r3, r2
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	1a9b      	subs	r3, r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	3338      	adds	r3, #56	; 0x38
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	4413      	add	r3, r2
 80022d2:	3304      	adds	r3, #4
 80022d4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	699a      	ldr	r2, [r3, #24]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	695b      	ldr	r3, [r3, #20]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d901      	bls.n	80022e6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e06c      	b.n	80023c0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	695a      	ldr	r2, [r3, #20]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	69fa      	ldr	r2, [r7, #28]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d902      	bls.n	8002302 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	3303      	adds	r3, #3
 8002306:	089b      	lsrs	r3, r3, #2
 8002308:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800230a:	e02b      	b.n	8002364 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	695a      	ldr	r2, [r3, #20]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	69fa      	ldr	r2, [r7, #28]
 800231e:	429a      	cmp	r2, r3
 8002320:	d902      	bls.n	8002328 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	3303      	adds	r3, #3
 800232c:	089b      	lsrs	r3, r3, #2
 800232e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	68d9      	ldr	r1, [r3, #12]
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	b2da      	uxtb	r2, r3
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002340:	b2db      	uxtb	r3, r3
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	4603      	mov	r3, r0
 8002346:	6978      	ldr	r0, [r7, #20]
 8002348:	f002 fe2d 	bl	8004fa6 <USB_WritePacket>

    ep->xfer_buff  += len;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	68da      	ldr	r2, [r3, #12]
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	441a      	add	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	699a      	ldr	r2, [r3, #24]
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	441a      	add	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	015a      	lsls	r2, r3, #5
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	4413      	add	r3, r2
 800236c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	b29b      	uxth	r3, r3
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	429a      	cmp	r2, r3
 8002378:	d809      	bhi.n	800238e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	699a      	ldr	r2, [r3, #24]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002382:	429a      	cmp	r2, r3
 8002384:	d203      	bcs.n	800238e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1be      	bne.n	800230c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	695a      	ldr	r2, [r3, #20]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	429a      	cmp	r2, r3
 8002398:	d811      	bhi.n	80023be <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	f003 030f 	and.w	r3, r3, #15
 80023a0:	2201      	movs	r2, #1
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	43db      	mvns	r3, r3
 80023b4:	6939      	ldr	r1, [r7, #16]
 80023b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80023ba:	4013      	ands	r3, r2
 80023bc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3720      	adds	r7, #32
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	333c      	adds	r3, #60	; 0x3c
 80023e0:	3304      	adds	r3, #4
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	015a      	lsls	r2, r3, #5
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	4413      	add	r3, r2
 80023ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	f040 80a0 	bne.w	8002540 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	f003 0308 	and.w	r3, r3, #8
 8002406:	2b00      	cmp	r3, #0
 8002408:	d015      	beq.n	8002436 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	4a72      	ldr	r2, [pc, #456]	; (80025d8 <PCD_EP_OutXfrComplete_int+0x210>)
 800240e:	4293      	cmp	r3, r2
 8002410:	f240 80dd 	bls.w	80025ce <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800241a:	2b00      	cmp	r3, #0
 800241c:	f000 80d7 	beq.w	80025ce <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	015a      	lsls	r2, r3, #5
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	4413      	add	r3, r2
 8002428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800242c:	461a      	mov	r2, r3
 800242e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002432:	6093      	str	r3, [r2, #8]
 8002434:	e0cb      	b.n	80025ce <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	f003 0320 	and.w	r3, r3, #32
 800243c:	2b00      	cmp	r3, #0
 800243e:	d009      	beq.n	8002454 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	015a      	lsls	r2, r3, #5
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	4413      	add	r3, r2
 8002448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800244c:	461a      	mov	r2, r3
 800244e:	2320      	movs	r3, #32
 8002450:	6093      	str	r3, [r2, #8]
 8002452:	e0bc      	b.n	80025ce <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800245a:	2b00      	cmp	r3, #0
 800245c:	f040 80b7 	bne.w	80025ce <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	4a5d      	ldr	r2, [pc, #372]	; (80025d8 <PCD_EP_OutXfrComplete_int+0x210>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d90f      	bls.n	8002488 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800246e:	2b00      	cmp	r3, #0
 8002470:	d00a      	beq.n	8002488 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	015a      	lsls	r2, r3, #5
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	4413      	add	r3, r2
 800247a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800247e:	461a      	mov	r2, r3
 8002480:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002484:	6093      	str	r3, [r2, #8]
 8002486:	e0a2      	b.n	80025ce <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002488:	6879      	ldr	r1, [r7, #4]
 800248a:	683a      	ldr	r2, [r7, #0]
 800248c:	4613      	mov	r3, r2
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	1a9b      	subs	r3, r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	440b      	add	r3, r1
 8002496:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800249a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	0159      	lsls	r1, r3, #5
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	440b      	add	r3, r1
 80024a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80024ae:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	4613      	mov	r3, r2
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	1a9b      	subs	r3, r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	4403      	add	r3, r0
 80024be:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80024c2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80024c4:	6879      	ldr	r1, [r7, #4]
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	4613      	mov	r3, r2
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	1a9b      	subs	r3, r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	440b      	add	r3, r1
 80024d2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80024d6:	6819      	ldr	r1, [r3, #0]
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	4613      	mov	r3, r2
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	1a9b      	subs	r3, r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	4403      	add	r3, r0
 80024e6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4419      	add	r1, r3
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	4613      	mov	r3, r2
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	1a9b      	subs	r3, r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	4403      	add	r3, r0
 80024fc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002500:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d114      	bne.n	8002532 <PCD_EP_OutXfrComplete_int+0x16a>
 8002508:	6879      	ldr	r1, [r7, #4]
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	4613      	mov	r3, r2
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	1a9b      	subs	r3, r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	440b      	add	r3, r1
 8002516:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d108      	bne.n	8002532 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6818      	ldr	r0, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800252a:	461a      	mov	r2, r3
 800252c:	2101      	movs	r1, #1
 800252e:	f002 ffd1 	bl	80054d4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	b2db      	uxtb	r3, r3
 8002536:	4619      	mov	r1, r3
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f004 fee3 	bl	8007304 <HAL_PCD_DataOutStageCallback>
 800253e:	e046      	b.n	80025ce <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	4a26      	ldr	r2, [pc, #152]	; (80025dc <PCD_EP_OutXfrComplete_int+0x214>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d124      	bne.n	8002592 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00a      	beq.n	8002568 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	015a      	lsls	r2, r3, #5
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	4413      	add	r3, r2
 800255a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800255e:	461a      	mov	r2, r3
 8002560:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002564:	6093      	str	r3, [r2, #8]
 8002566:	e032      	b.n	80025ce <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	f003 0320 	and.w	r3, r3, #32
 800256e:	2b00      	cmp	r3, #0
 8002570:	d008      	beq.n	8002584 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	015a      	lsls	r2, r3, #5
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	4413      	add	r3, r2
 800257a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800257e:	461a      	mov	r2, r3
 8002580:	2320      	movs	r3, #32
 8002582:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	b2db      	uxtb	r3, r3
 8002588:	4619      	mov	r1, r3
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f004 feba 	bl	8007304 <HAL_PCD_DataOutStageCallback>
 8002590:	e01d      	b.n	80025ce <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d114      	bne.n	80025c2 <PCD_EP_OutXfrComplete_int+0x1fa>
 8002598:	6879      	ldr	r1, [r7, #4]
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	4613      	mov	r3, r2
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	1a9b      	subs	r3, r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	440b      	add	r3, r1
 80025a6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d108      	bne.n	80025c2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6818      	ldr	r0, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80025ba:	461a      	mov	r2, r3
 80025bc:	2100      	movs	r1, #0
 80025be:	f002 ff89 	bl	80054d4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	4619      	mov	r1, r3
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f004 fe9b 	bl	8007304 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3718      	adds	r7, #24
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	4f54300a 	.word	0x4f54300a
 80025dc:	4f54310a 	.word	0x4f54310a

080025e0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	333c      	adds	r3, #60	; 0x3c
 80025f8:	3304      	adds	r3, #4
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	015a      	lsls	r2, r3, #5
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	4413      	add	r3, r2
 8002606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	4a15      	ldr	r2, [pc, #84]	; (8002668 <PCD_EP_OutSetupPacket_int+0x88>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d90e      	bls.n	8002634 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800261c:	2b00      	cmp	r3, #0
 800261e:	d009      	beq.n	8002634 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	015a      	lsls	r2, r3, #5
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	4413      	add	r3, r2
 8002628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800262c:	461a      	mov	r2, r3
 800262e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002632:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f004 fe53 	bl	80072e0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	4a0a      	ldr	r2, [pc, #40]	; (8002668 <PCD_EP_OutSetupPacket_int+0x88>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d90c      	bls.n	800265c <PCD_EP_OutSetupPacket_int+0x7c>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d108      	bne.n	800265c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6818      	ldr	r0, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002654:	461a      	mov	r2, r3
 8002656:	2101      	movs	r1, #1
 8002658:	f002 ff3c 	bl	80054d4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3718      	adds	r7, #24
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	4f54300a 	.word	0x4f54300a

0800266c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	460b      	mov	r3, r1
 8002676:	70fb      	strb	r3, [r7, #3]
 8002678:	4613      	mov	r3, r2
 800267a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002684:	78fb      	ldrb	r3, [r7, #3]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d107      	bne.n	800269a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800268a:	883b      	ldrh	r3, [r7, #0]
 800268c:	0419      	lsls	r1, r3, #16
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68ba      	ldr	r2, [r7, #8]
 8002694:	430a      	orrs	r2, r1
 8002696:	629a      	str	r2, [r3, #40]	; 0x28
 8002698:	e028      	b.n	80026ec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a0:	0c1b      	lsrs	r3, r3, #16
 80026a2:	68ba      	ldr	r2, [r7, #8]
 80026a4:	4413      	add	r3, r2
 80026a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80026a8:	2300      	movs	r3, #0
 80026aa:	73fb      	strb	r3, [r7, #15]
 80026ac:	e00d      	b.n	80026ca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	7bfb      	ldrb	r3, [r7, #15]
 80026b4:	3340      	adds	r3, #64	; 0x40
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	4413      	add	r3, r2
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	0c1b      	lsrs	r3, r3, #16
 80026be:	68ba      	ldr	r2, [r7, #8]
 80026c0:	4413      	add	r3, r2
 80026c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80026c4:	7bfb      	ldrb	r3, [r7, #15]
 80026c6:	3301      	adds	r3, #1
 80026c8:	73fb      	strb	r3, [r7, #15]
 80026ca:	7bfa      	ldrb	r2, [r7, #15]
 80026cc:	78fb      	ldrb	r3, [r7, #3]
 80026ce:	3b01      	subs	r3, #1
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d3ec      	bcc.n	80026ae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80026d4:	883b      	ldrh	r3, [r7, #0]
 80026d6:	0418      	lsls	r0, r3, #16
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6819      	ldr	r1, [r3, #0]
 80026dc:	78fb      	ldrb	r3, [r7, #3]
 80026de:	3b01      	subs	r3, #1
 80026e0:	68ba      	ldr	r2, [r7, #8]
 80026e2:	4302      	orrs	r2, r0
 80026e4:	3340      	adds	r3, #64	; 0x40
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	440b      	add	r3, r1
 80026ea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3714      	adds	r7, #20
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr

080026fa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80026fa:	b480      	push	{r7}
 80026fc:	b083      	sub	sp, #12
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
 8002702:	460b      	mov	r3, r1
 8002704:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	887a      	ldrh	r2, [r7, #2]
 800270c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2201      	movs	r2, #1
 800272e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800274a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800274e:	f043 0303 	orr.w	r3, r3, #3
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	3714      	adds	r7, #20
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d101      	bne.n	8002778 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e0cc      	b.n	8002912 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002778:	4b68      	ldr	r3, [pc, #416]	; (800291c <HAL_RCC_ClockConfig+0x1b8>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 030f 	and.w	r3, r3, #15
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	429a      	cmp	r2, r3
 8002784:	d90c      	bls.n	80027a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002786:	4b65      	ldr	r3, [pc, #404]	; (800291c <HAL_RCC_ClockConfig+0x1b8>)
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800278e:	4b63      	ldr	r3, [pc, #396]	; (800291c <HAL_RCC_ClockConfig+0x1b8>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 030f 	and.w	r3, r3, #15
 8002796:	683a      	ldr	r2, [r7, #0]
 8002798:	429a      	cmp	r2, r3
 800279a:	d001      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e0b8      	b.n	8002912 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d020      	beq.n	80027ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0304 	and.w	r3, r3, #4
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d005      	beq.n	80027c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027b8:	4b59      	ldr	r3, [pc, #356]	; (8002920 <HAL_RCC_ClockConfig+0x1bc>)
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	4a58      	ldr	r2, [pc, #352]	; (8002920 <HAL_RCC_ClockConfig+0x1bc>)
 80027be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0308 	and.w	r3, r3, #8
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d005      	beq.n	80027dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027d0:	4b53      	ldr	r3, [pc, #332]	; (8002920 <HAL_RCC_ClockConfig+0x1bc>)
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	4a52      	ldr	r2, [pc, #328]	; (8002920 <HAL_RCC_ClockConfig+0x1bc>)
 80027d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027dc:	4b50      	ldr	r3, [pc, #320]	; (8002920 <HAL_RCC_ClockConfig+0x1bc>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	494d      	ldr	r1, [pc, #308]	; (8002920 <HAL_RCC_ClockConfig+0x1bc>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d044      	beq.n	8002884 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d107      	bne.n	8002812 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002802:	4b47      	ldr	r3, [pc, #284]	; (8002920 <HAL_RCC_ClockConfig+0x1bc>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d119      	bne.n	8002842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e07f      	b.n	8002912 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	2b02      	cmp	r3, #2
 8002818:	d003      	beq.n	8002822 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800281e:	2b03      	cmp	r3, #3
 8002820:	d107      	bne.n	8002832 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002822:	4b3f      	ldr	r3, [pc, #252]	; (8002920 <HAL_RCC_ClockConfig+0x1bc>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d109      	bne.n	8002842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e06f      	b.n	8002912 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002832:	4b3b      	ldr	r3, [pc, #236]	; (8002920 <HAL_RCC_ClockConfig+0x1bc>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e067      	b.n	8002912 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002842:	4b37      	ldr	r3, [pc, #220]	; (8002920 <HAL_RCC_ClockConfig+0x1bc>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f023 0203 	bic.w	r2, r3, #3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	4934      	ldr	r1, [pc, #208]	; (8002920 <HAL_RCC_ClockConfig+0x1bc>)
 8002850:	4313      	orrs	r3, r2
 8002852:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002854:	f7fe fac8 	bl	8000de8 <HAL_GetTick>
 8002858:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800285a:	e00a      	b.n	8002872 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800285c:	f7fe fac4 	bl	8000de8 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	f241 3288 	movw	r2, #5000	; 0x1388
 800286a:	4293      	cmp	r3, r2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e04f      	b.n	8002912 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002872:	4b2b      	ldr	r3, [pc, #172]	; (8002920 <HAL_RCC_ClockConfig+0x1bc>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 020c 	and.w	r2, r3, #12
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	429a      	cmp	r2, r3
 8002882:	d1eb      	bne.n	800285c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002884:	4b25      	ldr	r3, [pc, #148]	; (800291c <HAL_RCC_ClockConfig+0x1b8>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 030f 	and.w	r3, r3, #15
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	429a      	cmp	r2, r3
 8002890:	d20c      	bcs.n	80028ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002892:	4b22      	ldr	r3, [pc, #136]	; (800291c <HAL_RCC_ClockConfig+0x1b8>)
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	b2d2      	uxtb	r2, r2
 8002898:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800289a:	4b20      	ldr	r3, [pc, #128]	; (800291c <HAL_RCC_ClockConfig+0x1b8>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 030f 	and.w	r3, r3, #15
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d001      	beq.n	80028ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e032      	b.n	8002912 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0304 	and.w	r3, r3, #4
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d008      	beq.n	80028ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028b8:	4b19      	ldr	r3, [pc, #100]	; (8002920 <HAL_RCC_ClockConfig+0x1bc>)
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	4916      	ldr	r1, [pc, #88]	; (8002920 <HAL_RCC_ClockConfig+0x1bc>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0308 	and.w	r3, r3, #8
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d009      	beq.n	80028ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028d6:	4b12      	ldr	r3, [pc, #72]	; (8002920 <HAL_RCC_ClockConfig+0x1bc>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	490e      	ldr	r1, [pc, #56]	; (8002920 <HAL_RCC_ClockConfig+0x1bc>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028ea:	f000 fb7f 	bl	8002fec <HAL_RCC_GetSysClockFreq>
 80028ee:	4602      	mov	r2, r0
 80028f0:	4b0b      	ldr	r3, [pc, #44]	; (8002920 <HAL_RCC_ClockConfig+0x1bc>)
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	091b      	lsrs	r3, r3, #4
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	490a      	ldr	r1, [pc, #40]	; (8002924 <HAL_RCC_ClockConfig+0x1c0>)
 80028fc:	5ccb      	ldrb	r3, [r1, r3]
 80028fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002902:	4a09      	ldr	r2, [pc, #36]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 8002904:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002906:	4b09      	ldr	r3, [pc, #36]	; (800292c <HAL_RCC_ClockConfig+0x1c8>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4618      	mov	r0, r3
 800290c:	f7fe fa28 	bl	8000d60 <HAL_InitTick>

  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	40023c00 	.word	0x40023c00
 8002920:	40023800 	.word	0x40023800
 8002924:	080079d0 	.word	0x080079d0
 8002928:	20000000 	.word	0x20000000
 800292c:	20000018 	.word	0x20000018

08002930 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002934:	4b03      	ldr	r3, [pc, #12]	; (8002944 <HAL_RCC_GetHCLKFreq+0x14>)
 8002936:	681b      	ldr	r3, [r3, #0]
}
 8002938:	4618      	mov	r0, r3
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	20000000 	.word	0x20000000

08002948 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800294c:	f7ff fff0 	bl	8002930 <HAL_RCC_GetHCLKFreq>
 8002950:	4602      	mov	r2, r0
 8002952:	4b05      	ldr	r3, [pc, #20]	; (8002968 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	0a9b      	lsrs	r3, r3, #10
 8002958:	f003 0307 	and.w	r3, r3, #7
 800295c:	4903      	ldr	r1, [pc, #12]	; (800296c <HAL_RCC_GetPCLK1Freq+0x24>)
 800295e:	5ccb      	ldrb	r3, [r1, r3]
 8002960:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002964:	4618      	mov	r0, r3
 8002966:	bd80      	pop	{r7, pc}
 8002968:	40023800 	.word	0x40023800
 800296c:	080079e0 	.word	0x080079e0

08002970 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002974:	f7ff ffdc 	bl	8002930 <HAL_RCC_GetHCLKFreq>
 8002978:	4602      	mov	r2, r0
 800297a:	4b05      	ldr	r3, [pc, #20]	; (8002990 <HAL_RCC_GetPCLK2Freq+0x20>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	0b5b      	lsrs	r3, r3, #13
 8002980:	f003 0307 	and.w	r3, r3, #7
 8002984:	4903      	ldr	r1, [pc, #12]	; (8002994 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002986:	5ccb      	ldrb	r3, [r1, r3]
 8002988:	fa22 f303 	lsr.w	r3, r2, r3
}
 800298c:	4618      	mov	r0, r3
 800298e:	bd80      	pop	{r7, pc}
 8002990:	40023800 	.word	0x40023800
 8002994:	080079e0 	.word	0x080079e0

08002998 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b08c      	sub	sp, #48	; 0x30
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029a0:	2300      	movs	r3, #0
 80029a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80029a4:	2300      	movs	r3, #0
 80029a6:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80029a8:	2300      	movs	r3, #0
 80029aa:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80029ac:	2300      	movs	r3, #0
 80029ae:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80029b0:	2300      	movs	r3, #0
 80029b2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80029b4:	2300      	movs	r3, #0
 80029b6:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80029b8:	2300      	movs	r3, #0
 80029ba:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80029bc:	2300      	movs	r3, #0
 80029be:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80029c0:	2300      	movs	r3, #0
 80029c2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d010      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80029d0:	4b6f      	ldr	r3, [pc, #444]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029d6:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029de:	496c      	ldr	r1, [pc, #432]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80029ee:	2301      	movs	r3, #1
 80029f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d010      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80029fe:	4b64      	ldr	r3, [pc, #400]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a04:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a0c:	4960      	ldr	r1, [pc, #384]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d101      	bne.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0304 	and.w	r3, r3, #4
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d017      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a2c:	4b58      	ldr	r3, [pc, #352]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3a:	4955      	ldr	r1, [pc, #340]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a4a:	d101      	bne.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d101      	bne.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0308 	and.w	r3, r3, #8
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d017      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a68:	4b49      	ldr	r3, [pc, #292]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a6e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a76:	4946      	ldr	r1, [pc, #280]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a86:	d101      	bne.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d101      	bne.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002a94:	2301      	movs	r3, #1
 8002a96:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0320 	and.w	r3, r3, #32
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f000 808a 	beq.w	8002bba <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	60bb      	str	r3, [r7, #8]
 8002aaa:	4b39      	ldr	r3, [pc, #228]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	4a38      	ldr	r2, [pc, #224]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ab6:	4b36      	ldr	r3, [pc, #216]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002abe:	60bb      	str	r3, [r7, #8]
 8002ac0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002ac2:	4b34      	ldr	r3, [pc, #208]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a33      	ldr	r2, [pc, #204]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002acc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002ace:	f7fe f98b 	bl	8000de8 <HAL_GetTick>
 8002ad2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002ad4:	e008      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002ad6:	f7fe f987 	bl	8000de8 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d901      	bls.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e278      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002ae8:	4b2a      	ldr	r3, [pc, #168]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d0f0      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002af4:	4b26      	ldr	r3, [pc, #152]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002afc:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002afe:	6a3b      	ldr	r3, [r7, #32]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d02f      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b0c:	6a3a      	ldr	r2, [r7, #32]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d028      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b12:	4b1f      	ldr	r3, [pc, #124]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b1a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b1c:	4b1e      	ldr	r3, [pc, #120]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002b1e:	2201      	movs	r2, #1
 8002b20:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b22:	4b1d      	ldr	r3, [pc, #116]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002b28:	4a19      	ldr	r2, [pc, #100]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b2a:	6a3b      	ldr	r3, [r7, #32]
 8002b2c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002b2e:	4b18      	ldr	r3, [pc, #96]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d114      	bne.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002b3a:	f7fe f955 	bl	8000de8 <HAL_GetTick>
 8002b3e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b40:	e00a      	b.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b42:	f7fe f951 	bl	8000de8 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e240      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b58:	4b0d      	ldr	r3, [pc, #52]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d0ee      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b70:	d114      	bne.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002b72:	4b07      	ldr	r3, [pc, #28]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002b82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b86:	4902      	ldr	r1, [pc, #8]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	608b      	str	r3, [r1, #8]
 8002b8c:	e00c      	b.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002b8e:	bf00      	nop
 8002b90:	40023800 	.word	0x40023800
 8002b94:	40007000 	.word	0x40007000
 8002b98:	42470e40 	.word	0x42470e40
 8002b9c:	4b4a      	ldr	r3, [pc, #296]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	4a49      	ldr	r2, [pc, #292]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ba2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002ba6:	6093      	str	r3, [r2, #8]
 8002ba8:	4b47      	ldr	r3, [pc, #284]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002baa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bb4:	4944      	ldr	r1, [pc, #272]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0310 	and.w	r3, r3, #16
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d004      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002bcc:	4b3f      	ldr	r3, [pc, #252]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002bce:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00a      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002bdc:	4b3a      	ldr	r3, [pc, #232]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002bde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002be2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bea:	4937      	ldr	r1, [pc, #220]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00a      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002bfe:	4b32      	ldr	r3, [pc, #200]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002c00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c04:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c0c:	492e      	ldr	r1, [pc, #184]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d011      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002c20:	4b29      	ldr	r3, [pc, #164]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002c22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c26:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c2e:	4926      	ldr	r1, [pc, #152]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c3e:	d101      	bne.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002c40:	2301      	movs	r3, #1
 8002c42:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00a      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002c50:	4b1d      	ldr	r3, [pc, #116]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002c52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c56:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5e:	491a      	ldr	r1, [pc, #104]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d011      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002c72:	4b15      	ldr	r3, [pc, #84]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002c74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c78:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c80:	4911      	ldr	r1, [pc, #68]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c90:	d101      	bne.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002c92:	2301      	movs	r3, #1
 8002c94:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d005      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ca4:	f040 80ff 	bne.w	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002ca8:	4b09      	ldr	r3, [pc, #36]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002cae:	f7fe f89b 	bl	8000de8 <HAL_GetTick>
 8002cb2:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002cb4:	e00e      	b.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002cb6:	f7fe f897 	bl	8000de8 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d907      	bls.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e188      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002cc8:	40023800 	.word	0x40023800
 8002ccc:	424711e0 	.word	0x424711e0
 8002cd0:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002cd4:	4b7e      	ldr	r3, [pc, #504]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d1ea      	bne.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0301 	and.w	r3, r3, #1
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d003      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d009      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d028      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d124      	bne.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002d08:	4b71      	ldr	r3, [pc, #452]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002d0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d0e:	0c1b      	lsrs	r3, r3, #16
 8002d10:	f003 0303 	and.w	r3, r3, #3
 8002d14:	3301      	adds	r3, #1
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002d1a:	4b6d      	ldr	r3, [pc, #436]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002d1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d20:	0e1b      	lsrs	r3, r3, #24
 8002d22:	f003 030f 	and.w	r3, r3, #15
 8002d26:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685a      	ldr	r2, [r3, #4]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	019b      	lsls	r3, r3, #6
 8002d32:	431a      	orrs	r2, r3
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	085b      	lsrs	r3, r3, #1
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	041b      	lsls	r3, r3, #16
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	061b      	lsls	r3, r3, #24
 8002d42:	431a      	orrs	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	695b      	ldr	r3, [r3, #20]
 8002d48:	071b      	lsls	r3, r3, #28
 8002d4a:	4961      	ldr	r1, [pc, #388]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0304 	and.w	r3, r3, #4
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d004      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d66:	d00a      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d035      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d7c:	d130      	bne.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002d7e:	4b54      	ldr	r3, [pc, #336]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002d80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d84:	0c1b      	lsrs	r3, r3, #16
 8002d86:	f003 0303 	and.w	r3, r3, #3
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002d90:	4b4f      	ldr	r3, [pc, #316]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002d92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d96:	0f1b      	lsrs	r3, r3, #28
 8002d98:	f003 0307 	and.w	r3, r3, #7
 8002d9c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	019b      	lsls	r3, r3, #6
 8002da8:	431a      	orrs	r2, r3
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	085b      	lsrs	r3, r3, #1
 8002dae:	3b01      	subs	r3, #1
 8002db0:	041b      	lsls	r3, r3, #16
 8002db2:	431a      	orrs	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	061b      	lsls	r3, r3, #24
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	071b      	lsls	r3, r3, #28
 8002dc0:	4943      	ldr	r1, [pc, #268]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002dc8:	4b41      	ldr	r3, [pc, #260]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002dca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dce:	f023 021f 	bic.w	r2, r3, #31
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	493d      	ldr	r1, [pc, #244]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d029      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002df0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002df4:	d124      	bne.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002df6:	4b36      	ldr	r3, [pc, #216]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002df8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dfc:	0c1b      	lsrs	r3, r3, #16
 8002dfe:	f003 0303 	and.w	r3, r3, #3
 8002e02:	3301      	adds	r3, #1
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e08:	4b31      	ldr	r3, [pc, #196]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e0e:	0f1b      	lsrs	r3, r3, #28
 8002e10:	f003 0307 	and.w	r3, r3, #7
 8002e14:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685a      	ldr	r2, [r3, #4]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	019b      	lsls	r3, r3, #6
 8002e20:	431a      	orrs	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	085b      	lsrs	r3, r3, #1
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	041b      	lsls	r3, r3, #16
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	061b      	lsls	r3, r3, #24
 8002e32:	431a      	orrs	r2, r3
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	071b      	lsls	r3, r3, #28
 8002e38:	4925      	ldr	r1, [pc, #148]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d016      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685a      	ldr	r2, [r3, #4]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	019b      	lsls	r3, r3, #6
 8002e56:	431a      	orrs	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	085b      	lsrs	r3, r3, #1
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	041b      	lsls	r3, r3, #16
 8002e62:	431a      	orrs	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	061b      	lsls	r3, r3, #24
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	695b      	ldr	r3, [r3, #20]
 8002e70:	071b      	lsls	r3, r3, #28
 8002e72:	4917      	ldr	r1, [pc, #92]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002e7a:	4b16      	ldr	r3, [pc, #88]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e80:	f7fd ffb2 	bl	8000de8 <HAL_GetTick>
 8002e84:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e86:	e008      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002e88:	f7fd ffae 	bl	8000de8 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e09f      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e9a:	4b0d      	ldr	r3, [pc, #52]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d0f0      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	f040 8095 	bne.w	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002eae:	4b0a      	ldr	r3, [pc, #40]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002eb4:	f7fd ff98 	bl	8000de8 <HAL_GetTick>
 8002eb8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002eba:	e00f      	b.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002ebc:	f7fd ff94 	bl	8000de8 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d908      	bls.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e085      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002ece:	bf00      	nop
 8002ed0:	40023800 	.word	0x40023800
 8002ed4:	42470068 	.word	0x42470068
 8002ed8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002edc:	4b41      	ldr	r3, [pc, #260]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ee4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ee8:	d0e8      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0304 	and.w	r3, r3, #4
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d009      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d02b      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d127      	bne.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002f12:	4b34      	ldr	r3, [pc, #208]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f18:	0c1b      	lsrs	r3, r3, #16
 8002f1a:	f003 0303 	and.w	r3, r3, #3
 8002f1e:	3301      	adds	r3, #1
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	699a      	ldr	r2, [r3, #24]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	69db      	ldr	r3, [r3, #28]
 8002f2c:	019b      	lsls	r3, r3, #6
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	085b      	lsrs	r3, r3, #1
 8002f34:	3b01      	subs	r3, #1
 8002f36:	041b      	lsls	r3, r3, #16
 8002f38:	431a      	orrs	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3e:	061b      	lsls	r3, r3, #24
 8002f40:	4928      	ldr	r1, [pc, #160]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002f48:	4b26      	ldr	r3, [pc, #152]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002f4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f4e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f56:	3b01      	subs	r3, #1
 8002f58:	021b      	lsls	r3, r3, #8
 8002f5a:	4922      	ldr	r1, [pc, #136]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d01d      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f76:	d118      	bne.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002f78:	4b1a      	ldr	r3, [pc, #104]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f7e:	0e1b      	lsrs	r3, r3, #24
 8002f80:	f003 030f 	and.w	r3, r3, #15
 8002f84:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	699a      	ldr	r2, [r3, #24]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	019b      	lsls	r3, r3, #6
 8002f90:	431a      	orrs	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	085b      	lsrs	r3, r3, #1
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	041b      	lsls	r3, r3, #16
 8002f9c:	431a      	orrs	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	061b      	lsls	r3, r3, #24
 8002fa2:	4910      	ldr	r1, [pc, #64]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002faa:	4b0f      	ldr	r3, [pc, #60]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002fac:	2201      	movs	r2, #1
 8002fae:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002fb0:	f7fd ff1a 	bl	8000de8 <HAL_GetTick>
 8002fb4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002fb6:	e008      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002fb8:	f7fd ff16 	bl	8000de8 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e007      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002fca:	4b06      	ldr	r3, [pc, #24]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fd6:	d1ef      	bne.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3730      	adds	r7, #48	; 0x30
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	40023800 	.word	0x40023800
 8002fe8:	42470070 	.word	0x42470070

08002fec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ff0:	b0ae      	sub	sp, #184	; 0xb8
 8002ff2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003000:	2300      	movs	r3, #0
 8003002:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003006:	2300      	movs	r3, #0
 8003008:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800300c:	2300      	movs	r3, #0
 800300e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003012:	4bcb      	ldr	r3, [pc, #812]	; (8003340 <HAL_RCC_GetSysClockFreq+0x354>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 030c 	and.w	r3, r3, #12
 800301a:	2b0c      	cmp	r3, #12
 800301c:	f200 8206 	bhi.w	800342c <HAL_RCC_GetSysClockFreq+0x440>
 8003020:	a201      	add	r2, pc, #4	; (adr r2, 8003028 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003026:	bf00      	nop
 8003028:	0800305d 	.word	0x0800305d
 800302c:	0800342d 	.word	0x0800342d
 8003030:	0800342d 	.word	0x0800342d
 8003034:	0800342d 	.word	0x0800342d
 8003038:	08003065 	.word	0x08003065
 800303c:	0800342d 	.word	0x0800342d
 8003040:	0800342d 	.word	0x0800342d
 8003044:	0800342d 	.word	0x0800342d
 8003048:	0800306d 	.word	0x0800306d
 800304c:	0800342d 	.word	0x0800342d
 8003050:	0800342d 	.word	0x0800342d
 8003054:	0800342d 	.word	0x0800342d
 8003058:	0800325d 	.word	0x0800325d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800305c:	4bb9      	ldr	r3, [pc, #740]	; (8003344 <HAL_RCC_GetSysClockFreq+0x358>)
 800305e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003062:	e1e7      	b.n	8003434 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003064:	4bb8      	ldr	r3, [pc, #736]	; (8003348 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003066:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800306a:	e1e3      	b.n	8003434 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800306c:	4bb4      	ldr	r3, [pc, #720]	; (8003340 <HAL_RCC_GetSysClockFreq+0x354>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003074:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003078:	4bb1      	ldr	r3, [pc, #708]	; (8003340 <HAL_RCC_GetSysClockFreq+0x354>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d071      	beq.n	8003168 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003084:	4bae      	ldr	r3, [pc, #696]	; (8003340 <HAL_RCC_GetSysClockFreq+0x354>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	099b      	lsrs	r3, r3, #6
 800308a:	2200      	movs	r2, #0
 800308c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003090:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003094:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003098:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800309c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80030a0:	2300      	movs	r3, #0
 80030a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80030a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80030aa:	4622      	mov	r2, r4
 80030ac:	462b      	mov	r3, r5
 80030ae:	f04f 0000 	mov.w	r0, #0
 80030b2:	f04f 0100 	mov.w	r1, #0
 80030b6:	0159      	lsls	r1, r3, #5
 80030b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030bc:	0150      	lsls	r0, r2, #5
 80030be:	4602      	mov	r2, r0
 80030c0:	460b      	mov	r3, r1
 80030c2:	4621      	mov	r1, r4
 80030c4:	1a51      	subs	r1, r2, r1
 80030c6:	6439      	str	r1, [r7, #64]	; 0x40
 80030c8:	4629      	mov	r1, r5
 80030ca:	eb63 0301 	sbc.w	r3, r3, r1
 80030ce:	647b      	str	r3, [r7, #68]	; 0x44
 80030d0:	f04f 0200 	mov.w	r2, #0
 80030d4:	f04f 0300 	mov.w	r3, #0
 80030d8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80030dc:	4649      	mov	r1, r9
 80030de:	018b      	lsls	r3, r1, #6
 80030e0:	4641      	mov	r1, r8
 80030e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030e6:	4641      	mov	r1, r8
 80030e8:	018a      	lsls	r2, r1, #6
 80030ea:	4641      	mov	r1, r8
 80030ec:	1a51      	subs	r1, r2, r1
 80030ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80030f0:	4649      	mov	r1, r9
 80030f2:	eb63 0301 	sbc.w	r3, r3, r1
 80030f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030f8:	f04f 0200 	mov.w	r2, #0
 80030fc:	f04f 0300 	mov.w	r3, #0
 8003100:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003104:	4649      	mov	r1, r9
 8003106:	00cb      	lsls	r3, r1, #3
 8003108:	4641      	mov	r1, r8
 800310a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800310e:	4641      	mov	r1, r8
 8003110:	00ca      	lsls	r2, r1, #3
 8003112:	4610      	mov	r0, r2
 8003114:	4619      	mov	r1, r3
 8003116:	4603      	mov	r3, r0
 8003118:	4622      	mov	r2, r4
 800311a:	189b      	adds	r3, r3, r2
 800311c:	633b      	str	r3, [r7, #48]	; 0x30
 800311e:	462b      	mov	r3, r5
 8003120:	460a      	mov	r2, r1
 8003122:	eb42 0303 	adc.w	r3, r2, r3
 8003126:	637b      	str	r3, [r7, #52]	; 0x34
 8003128:	f04f 0200 	mov.w	r2, #0
 800312c:	f04f 0300 	mov.w	r3, #0
 8003130:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003134:	4629      	mov	r1, r5
 8003136:	024b      	lsls	r3, r1, #9
 8003138:	4621      	mov	r1, r4
 800313a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800313e:	4621      	mov	r1, r4
 8003140:	024a      	lsls	r2, r1, #9
 8003142:	4610      	mov	r0, r2
 8003144:	4619      	mov	r1, r3
 8003146:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800314a:	2200      	movs	r2, #0
 800314c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003150:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003154:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003158:	f7fd f854 	bl	8000204 <__aeabi_uldivmod>
 800315c:	4602      	mov	r2, r0
 800315e:	460b      	mov	r3, r1
 8003160:	4613      	mov	r3, r2
 8003162:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003166:	e067      	b.n	8003238 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003168:	4b75      	ldr	r3, [pc, #468]	; (8003340 <HAL_RCC_GetSysClockFreq+0x354>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	099b      	lsrs	r3, r3, #6
 800316e:	2200      	movs	r2, #0
 8003170:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003174:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003178:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800317c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003180:	67bb      	str	r3, [r7, #120]	; 0x78
 8003182:	2300      	movs	r3, #0
 8003184:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003186:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800318a:	4622      	mov	r2, r4
 800318c:	462b      	mov	r3, r5
 800318e:	f04f 0000 	mov.w	r0, #0
 8003192:	f04f 0100 	mov.w	r1, #0
 8003196:	0159      	lsls	r1, r3, #5
 8003198:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800319c:	0150      	lsls	r0, r2, #5
 800319e:	4602      	mov	r2, r0
 80031a0:	460b      	mov	r3, r1
 80031a2:	4621      	mov	r1, r4
 80031a4:	1a51      	subs	r1, r2, r1
 80031a6:	62b9      	str	r1, [r7, #40]	; 0x28
 80031a8:	4629      	mov	r1, r5
 80031aa:	eb63 0301 	sbc.w	r3, r3, r1
 80031ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031b0:	f04f 0200 	mov.w	r2, #0
 80031b4:	f04f 0300 	mov.w	r3, #0
 80031b8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80031bc:	4649      	mov	r1, r9
 80031be:	018b      	lsls	r3, r1, #6
 80031c0:	4641      	mov	r1, r8
 80031c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031c6:	4641      	mov	r1, r8
 80031c8:	018a      	lsls	r2, r1, #6
 80031ca:	4641      	mov	r1, r8
 80031cc:	ebb2 0a01 	subs.w	sl, r2, r1
 80031d0:	4649      	mov	r1, r9
 80031d2:	eb63 0b01 	sbc.w	fp, r3, r1
 80031d6:	f04f 0200 	mov.w	r2, #0
 80031da:	f04f 0300 	mov.w	r3, #0
 80031de:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80031e2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80031e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031ea:	4692      	mov	sl, r2
 80031ec:	469b      	mov	fp, r3
 80031ee:	4623      	mov	r3, r4
 80031f0:	eb1a 0303 	adds.w	r3, sl, r3
 80031f4:	623b      	str	r3, [r7, #32]
 80031f6:	462b      	mov	r3, r5
 80031f8:	eb4b 0303 	adc.w	r3, fp, r3
 80031fc:	627b      	str	r3, [r7, #36]	; 0x24
 80031fe:	f04f 0200 	mov.w	r2, #0
 8003202:	f04f 0300 	mov.w	r3, #0
 8003206:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800320a:	4629      	mov	r1, r5
 800320c:	028b      	lsls	r3, r1, #10
 800320e:	4621      	mov	r1, r4
 8003210:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003214:	4621      	mov	r1, r4
 8003216:	028a      	lsls	r2, r1, #10
 8003218:	4610      	mov	r0, r2
 800321a:	4619      	mov	r1, r3
 800321c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003220:	2200      	movs	r2, #0
 8003222:	673b      	str	r3, [r7, #112]	; 0x70
 8003224:	677a      	str	r2, [r7, #116]	; 0x74
 8003226:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800322a:	f7fc ffeb 	bl	8000204 <__aeabi_uldivmod>
 800322e:	4602      	mov	r2, r0
 8003230:	460b      	mov	r3, r1
 8003232:	4613      	mov	r3, r2
 8003234:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003238:	4b41      	ldr	r3, [pc, #260]	; (8003340 <HAL_RCC_GetSysClockFreq+0x354>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	0c1b      	lsrs	r3, r3, #16
 800323e:	f003 0303 	and.w	r3, r3, #3
 8003242:	3301      	adds	r3, #1
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800324a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800324e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003252:	fbb2 f3f3 	udiv	r3, r2, r3
 8003256:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800325a:	e0eb      	b.n	8003434 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800325c:	4b38      	ldr	r3, [pc, #224]	; (8003340 <HAL_RCC_GetSysClockFreq+0x354>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003264:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003268:	4b35      	ldr	r3, [pc, #212]	; (8003340 <HAL_RCC_GetSysClockFreq+0x354>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d06b      	beq.n	800334c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003274:	4b32      	ldr	r3, [pc, #200]	; (8003340 <HAL_RCC_GetSysClockFreq+0x354>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	099b      	lsrs	r3, r3, #6
 800327a:	2200      	movs	r2, #0
 800327c:	66bb      	str	r3, [r7, #104]	; 0x68
 800327e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003280:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003286:	663b      	str	r3, [r7, #96]	; 0x60
 8003288:	2300      	movs	r3, #0
 800328a:	667b      	str	r3, [r7, #100]	; 0x64
 800328c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003290:	4622      	mov	r2, r4
 8003292:	462b      	mov	r3, r5
 8003294:	f04f 0000 	mov.w	r0, #0
 8003298:	f04f 0100 	mov.w	r1, #0
 800329c:	0159      	lsls	r1, r3, #5
 800329e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032a2:	0150      	lsls	r0, r2, #5
 80032a4:	4602      	mov	r2, r0
 80032a6:	460b      	mov	r3, r1
 80032a8:	4621      	mov	r1, r4
 80032aa:	1a51      	subs	r1, r2, r1
 80032ac:	61b9      	str	r1, [r7, #24]
 80032ae:	4629      	mov	r1, r5
 80032b0:	eb63 0301 	sbc.w	r3, r3, r1
 80032b4:	61fb      	str	r3, [r7, #28]
 80032b6:	f04f 0200 	mov.w	r2, #0
 80032ba:	f04f 0300 	mov.w	r3, #0
 80032be:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80032c2:	4659      	mov	r1, fp
 80032c4:	018b      	lsls	r3, r1, #6
 80032c6:	4651      	mov	r1, sl
 80032c8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032cc:	4651      	mov	r1, sl
 80032ce:	018a      	lsls	r2, r1, #6
 80032d0:	4651      	mov	r1, sl
 80032d2:	ebb2 0801 	subs.w	r8, r2, r1
 80032d6:	4659      	mov	r1, fp
 80032d8:	eb63 0901 	sbc.w	r9, r3, r1
 80032dc:	f04f 0200 	mov.w	r2, #0
 80032e0:	f04f 0300 	mov.w	r3, #0
 80032e4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032e8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032ec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032f0:	4690      	mov	r8, r2
 80032f2:	4699      	mov	r9, r3
 80032f4:	4623      	mov	r3, r4
 80032f6:	eb18 0303 	adds.w	r3, r8, r3
 80032fa:	613b      	str	r3, [r7, #16]
 80032fc:	462b      	mov	r3, r5
 80032fe:	eb49 0303 	adc.w	r3, r9, r3
 8003302:	617b      	str	r3, [r7, #20]
 8003304:	f04f 0200 	mov.w	r2, #0
 8003308:	f04f 0300 	mov.w	r3, #0
 800330c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003310:	4629      	mov	r1, r5
 8003312:	024b      	lsls	r3, r1, #9
 8003314:	4621      	mov	r1, r4
 8003316:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800331a:	4621      	mov	r1, r4
 800331c:	024a      	lsls	r2, r1, #9
 800331e:	4610      	mov	r0, r2
 8003320:	4619      	mov	r1, r3
 8003322:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003326:	2200      	movs	r2, #0
 8003328:	65bb      	str	r3, [r7, #88]	; 0x58
 800332a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800332c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003330:	f7fc ff68 	bl	8000204 <__aeabi_uldivmod>
 8003334:	4602      	mov	r2, r0
 8003336:	460b      	mov	r3, r1
 8003338:	4613      	mov	r3, r2
 800333a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800333e:	e065      	b.n	800340c <HAL_RCC_GetSysClockFreq+0x420>
 8003340:	40023800 	.word	0x40023800
 8003344:	00f42400 	.word	0x00f42400
 8003348:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800334c:	4b3d      	ldr	r3, [pc, #244]	; (8003444 <HAL_RCC_GetSysClockFreq+0x458>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	099b      	lsrs	r3, r3, #6
 8003352:	2200      	movs	r2, #0
 8003354:	4618      	mov	r0, r3
 8003356:	4611      	mov	r1, r2
 8003358:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800335c:	653b      	str	r3, [r7, #80]	; 0x50
 800335e:	2300      	movs	r3, #0
 8003360:	657b      	str	r3, [r7, #84]	; 0x54
 8003362:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003366:	4642      	mov	r2, r8
 8003368:	464b      	mov	r3, r9
 800336a:	f04f 0000 	mov.w	r0, #0
 800336e:	f04f 0100 	mov.w	r1, #0
 8003372:	0159      	lsls	r1, r3, #5
 8003374:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003378:	0150      	lsls	r0, r2, #5
 800337a:	4602      	mov	r2, r0
 800337c:	460b      	mov	r3, r1
 800337e:	4641      	mov	r1, r8
 8003380:	1a51      	subs	r1, r2, r1
 8003382:	60b9      	str	r1, [r7, #8]
 8003384:	4649      	mov	r1, r9
 8003386:	eb63 0301 	sbc.w	r3, r3, r1
 800338a:	60fb      	str	r3, [r7, #12]
 800338c:	f04f 0200 	mov.w	r2, #0
 8003390:	f04f 0300 	mov.w	r3, #0
 8003394:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003398:	4659      	mov	r1, fp
 800339a:	018b      	lsls	r3, r1, #6
 800339c:	4651      	mov	r1, sl
 800339e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033a2:	4651      	mov	r1, sl
 80033a4:	018a      	lsls	r2, r1, #6
 80033a6:	4651      	mov	r1, sl
 80033a8:	1a54      	subs	r4, r2, r1
 80033aa:	4659      	mov	r1, fp
 80033ac:	eb63 0501 	sbc.w	r5, r3, r1
 80033b0:	f04f 0200 	mov.w	r2, #0
 80033b4:	f04f 0300 	mov.w	r3, #0
 80033b8:	00eb      	lsls	r3, r5, #3
 80033ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033be:	00e2      	lsls	r2, r4, #3
 80033c0:	4614      	mov	r4, r2
 80033c2:	461d      	mov	r5, r3
 80033c4:	4643      	mov	r3, r8
 80033c6:	18e3      	adds	r3, r4, r3
 80033c8:	603b      	str	r3, [r7, #0]
 80033ca:	464b      	mov	r3, r9
 80033cc:	eb45 0303 	adc.w	r3, r5, r3
 80033d0:	607b      	str	r3, [r7, #4]
 80033d2:	f04f 0200 	mov.w	r2, #0
 80033d6:	f04f 0300 	mov.w	r3, #0
 80033da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033de:	4629      	mov	r1, r5
 80033e0:	028b      	lsls	r3, r1, #10
 80033e2:	4621      	mov	r1, r4
 80033e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033e8:	4621      	mov	r1, r4
 80033ea:	028a      	lsls	r2, r1, #10
 80033ec:	4610      	mov	r0, r2
 80033ee:	4619      	mov	r1, r3
 80033f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80033f4:	2200      	movs	r2, #0
 80033f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80033f8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80033fa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80033fe:	f7fc ff01 	bl	8000204 <__aeabi_uldivmod>
 8003402:	4602      	mov	r2, r0
 8003404:	460b      	mov	r3, r1
 8003406:	4613      	mov	r3, r2
 8003408:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800340c:	4b0d      	ldr	r3, [pc, #52]	; (8003444 <HAL_RCC_GetSysClockFreq+0x458>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	0f1b      	lsrs	r3, r3, #28
 8003412:	f003 0307 	and.w	r3, r3, #7
 8003416:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800341a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800341e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003422:	fbb2 f3f3 	udiv	r3, r2, r3
 8003426:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800342a:	e003      	b.n	8003434 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800342c:	4b06      	ldr	r3, [pc, #24]	; (8003448 <HAL_RCC_GetSysClockFreq+0x45c>)
 800342e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003432:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003434:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003438:	4618      	mov	r0, r3
 800343a:	37b8      	adds	r7, #184	; 0xb8
 800343c:	46bd      	mov	sp, r7
 800343e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003442:	bf00      	nop
 8003444:	40023800 	.word	0x40023800
 8003448:	00f42400 	.word	0x00f42400

0800344c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e28d      	b.n	800397a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b00      	cmp	r3, #0
 8003468:	f000 8083 	beq.w	8003572 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800346c:	4b94      	ldr	r3, [pc, #592]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f003 030c 	and.w	r3, r3, #12
 8003474:	2b04      	cmp	r3, #4
 8003476:	d019      	beq.n	80034ac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003478:	4b91      	ldr	r3, [pc, #580]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003480:	2b08      	cmp	r3, #8
 8003482:	d106      	bne.n	8003492 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003484:	4b8e      	ldr	r3, [pc, #568]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800348c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003490:	d00c      	beq.n	80034ac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003492:	4b8b      	ldr	r3, [pc, #556]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800349a:	2b0c      	cmp	r3, #12
 800349c:	d112      	bne.n	80034c4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800349e:	4b88      	ldr	r3, [pc, #544]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034aa:	d10b      	bne.n	80034c4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034ac:	4b84      	ldr	r3, [pc, #528]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d05b      	beq.n	8003570 <HAL_RCC_OscConfig+0x124>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d157      	bne.n	8003570 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e25a      	b.n	800397a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034cc:	d106      	bne.n	80034dc <HAL_RCC_OscConfig+0x90>
 80034ce:	4b7c      	ldr	r3, [pc, #496]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a7b      	ldr	r2, [pc, #492]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 80034d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034d8:	6013      	str	r3, [r2, #0]
 80034da:	e01d      	b.n	8003518 <HAL_RCC_OscConfig+0xcc>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034e4:	d10c      	bne.n	8003500 <HAL_RCC_OscConfig+0xb4>
 80034e6:	4b76      	ldr	r3, [pc, #472]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a75      	ldr	r2, [pc, #468]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 80034ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034f0:	6013      	str	r3, [r2, #0]
 80034f2:	4b73      	ldr	r3, [pc, #460]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a72      	ldr	r2, [pc, #456]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 80034f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034fc:	6013      	str	r3, [r2, #0]
 80034fe:	e00b      	b.n	8003518 <HAL_RCC_OscConfig+0xcc>
 8003500:	4b6f      	ldr	r3, [pc, #444]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a6e      	ldr	r2, [pc, #440]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 8003506:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800350a:	6013      	str	r3, [r2, #0]
 800350c:	4b6c      	ldr	r3, [pc, #432]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a6b      	ldr	r2, [pc, #428]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 8003512:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003516:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d013      	beq.n	8003548 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003520:	f7fd fc62 	bl	8000de8 <HAL_GetTick>
 8003524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003526:	e008      	b.n	800353a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003528:	f7fd fc5e 	bl	8000de8 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b64      	cmp	r3, #100	; 0x64
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e21f      	b.n	800397a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800353a:	4b61      	ldr	r3, [pc, #388]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d0f0      	beq.n	8003528 <HAL_RCC_OscConfig+0xdc>
 8003546:	e014      	b.n	8003572 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003548:	f7fd fc4e 	bl	8000de8 <HAL_GetTick>
 800354c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800354e:	e008      	b.n	8003562 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003550:	f7fd fc4a 	bl	8000de8 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b64      	cmp	r3, #100	; 0x64
 800355c:	d901      	bls.n	8003562 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e20b      	b.n	800397a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003562:	4b57      	ldr	r3, [pc, #348]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1f0      	bne.n	8003550 <HAL_RCC_OscConfig+0x104>
 800356e:	e000      	b.n	8003572 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003570:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d06f      	beq.n	800365e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800357e:	4b50      	ldr	r3, [pc, #320]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f003 030c 	and.w	r3, r3, #12
 8003586:	2b00      	cmp	r3, #0
 8003588:	d017      	beq.n	80035ba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800358a:	4b4d      	ldr	r3, [pc, #308]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003592:	2b08      	cmp	r3, #8
 8003594:	d105      	bne.n	80035a2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003596:	4b4a      	ldr	r3, [pc, #296]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00b      	beq.n	80035ba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035a2:	4b47      	ldr	r3, [pc, #284]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80035aa:	2b0c      	cmp	r3, #12
 80035ac:	d11c      	bne.n	80035e8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035ae:	4b44      	ldr	r3, [pc, #272]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d116      	bne.n	80035e8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ba:	4b41      	ldr	r3, [pc, #260]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d005      	beq.n	80035d2 <HAL_RCC_OscConfig+0x186>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d001      	beq.n	80035d2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e1d3      	b.n	800397a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035d2:	4b3b      	ldr	r3, [pc, #236]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	4937      	ldr	r1, [pc, #220]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035e6:	e03a      	b.n	800365e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d020      	beq.n	8003632 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035f0:	4b34      	ldr	r3, [pc, #208]	; (80036c4 <HAL_RCC_OscConfig+0x278>)
 80035f2:	2201      	movs	r2, #1
 80035f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f6:	f7fd fbf7 	bl	8000de8 <HAL_GetTick>
 80035fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035fc:	e008      	b.n	8003610 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035fe:	f7fd fbf3 	bl	8000de8 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e1b4      	b.n	800397a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003610:	4b2b      	ldr	r3, [pc, #172]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d0f0      	beq.n	80035fe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800361c:	4b28      	ldr	r3, [pc, #160]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	00db      	lsls	r3, r3, #3
 800362a:	4925      	ldr	r1, [pc, #148]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 800362c:	4313      	orrs	r3, r2
 800362e:	600b      	str	r3, [r1, #0]
 8003630:	e015      	b.n	800365e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003632:	4b24      	ldr	r3, [pc, #144]	; (80036c4 <HAL_RCC_OscConfig+0x278>)
 8003634:	2200      	movs	r2, #0
 8003636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003638:	f7fd fbd6 	bl	8000de8 <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003640:	f7fd fbd2 	bl	8000de8 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e193      	b.n	800397a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003652:	4b1b      	ldr	r3, [pc, #108]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1f0      	bne.n	8003640 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0308 	and.w	r3, r3, #8
 8003666:	2b00      	cmp	r3, #0
 8003668:	d036      	beq.n	80036d8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d016      	beq.n	80036a0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003672:	4b15      	ldr	r3, [pc, #84]	; (80036c8 <HAL_RCC_OscConfig+0x27c>)
 8003674:	2201      	movs	r2, #1
 8003676:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003678:	f7fd fbb6 	bl	8000de8 <HAL_GetTick>
 800367c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800367e:	e008      	b.n	8003692 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003680:	f7fd fbb2 	bl	8000de8 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e173      	b.n	800397a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003692:	4b0b      	ldr	r3, [pc, #44]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 8003694:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d0f0      	beq.n	8003680 <HAL_RCC_OscConfig+0x234>
 800369e:	e01b      	b.n	80036d8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036a0:	4b09      	ldr	r3, [pc, #36]	; (80036c8 <HAL_RCC_OscConfig+0x27c>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a6:	f7fd fb9f 	bl	8000de8 <HAL_GetTick>
 80036aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036ac:	e00e      	b.n	80036cc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036ae:	f7fd fb9b 	bl	8000de8 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d907      	bls.n	80036cc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e15c      	b.n	800397a <HAL_RCC_OscConfig+0x52e>
 80036c0:	40023800 	.word	0x40023800
 80036c4:	42470000 	.word	0x42470000
 80036c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036cc:	4b8a      	ldr	r3, [pc, #552]	; (80038f8 <HAL_RCC_OscConfig+0x4ac>)
 80036ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1ea      	bne.n	80036ae <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0304 	and.w	r3, r3, #4
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f000 8097 	beq.w	8003814 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036e6:	2300      	movs	r3, #0
 80036e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036ea:	4b83      	ldr	r3, [pc, #524]	; (80038f8 <HAL_RCC_OscConfig+0x4ac>)
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10f      	bne.n	8003716 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036f6:	2300      	movs	r3, #0
 80036f8:	60bb      	str	r3, [r7, #8]
 80036fa:	4b7f      	ldr	r3, [pc, #508]	; (80038f8 <HAL_RCC_OscConfig+0x4ac>)
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	4a7e      	ldr	r2, [pc, #504]	; (80038f8 <HAL_RCC_OscConfig+0x4ac>)
 8003700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003704:	6413      	str	r3, [r2, #64]	; 0x40
 8003706:	4b7c      	ldr	r3, [pc, #496]	; (80038f8 <HAL_RCC_OscConfig+0x4ac>)
 8003708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800370e:	60bb      	str	r3, [r7, #8]
 8003710:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003712:	2301      	movs	r3, #1
 8003714:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003716:	4b79      	ldr	r3, [pc, #484]	; (80038fc <HAL_RCC_OscConfig+0x4b0>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800371e:	2b00      	cmp	r3, #0
 8003720:	d118      	bne.n	8003754 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003722:	4b76      	ldr	r3, [pc, #472]	; (80038fc <HAL_RCC_OscConfig+0x4b0>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a75      	ldr	r2, [pc, #468]	; (80038fc <HAL_RCC_OscConfig+0x4b0>)
 8003728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800372c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800372e:	f7fd fb5b 	bl	8000de8 <HAL_GetTick>
 8003732:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003734:	e008      	b.n	8003748 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003736:	f7fd fb57 	bl	8000de8 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	2b02      	cmp	r3, #2
 8003742:	d901      	bls.n	8003748 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e118      	b.n	800397a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003748:	4b6c      	ldr	r3, [pc, #432]	; (80038fc <HAL_RCC_OscConfig+0x4b0>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003750:	2b00      	cmp	r3, #0
 8003752:	d0f0      	beq.n	8003736 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d106      	bne.n	800376a <HAL_RCC_OscConfig+0x31e>
 800375c:	4b66      	ldr	r3, [pc, #408]	; (80038f8 <HAL_RCC_OscConfig+0x4ac>)
 800375e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003760:	4a65      	ldr	r2, [pc, #404]	; (80038f8 <HAL_RCC_OscConfig+0x4ac>)
 8003762:	f043 0301 	orr.w	r3, r3, #1
 8003766:	6713      	str	r3, [r2, #112]	; 0x70
 8003768:	e01c      	b.n	80037a4 <HAL_RCC_OscConfig+0x358>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	2b05      	cmp	r3, #5
 8003770:	d10c      	bne.n	800378c <HAL_RCC_OscConfig+0x340>
 8003772:	4b61      	ldr	r3, [pc, #388]	; (80038f8 <HAL_RCC_OscConfig+0x4ac>)
 8003774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003776:	4a60      	ldr	r2, [pc, #384]	; (80038f8 <HAL_RCC_OscConfig+0x4ac>)
 8003778:	f043 0304 	orr.w	r3, r3, #4
 800377c:	6713      	str	r3, [r2, #112]	; 0x70
 800377e:	4b5e      	ldr	r3, [pc, #376]	; (80038f8 <HAL_RCC_OscConfig+0x4ac>)
 8003780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003782:	4a5d      	ldr	r2, [pc, #372]	; (80038f8 <HAL_RCC_OscConfig+0x4ac>)
 8003784:	f043 0301 	orr.w	r3, r3, #1
 8003788:	6713      	str	r3, [r2, #112]	; 0x70
 800378a:	e00b      	b.n	80037a4 <HAL_RCC_OscConfig+0x358>
 800378c:	4b5a      	ldr	r3, [pc, #360]	; (80038f8 <HAL_RCC_OscConfig+0x4ac>)
 800378e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003790:	4a59      	ldr	r2, [pc, #356]	; (80038f8 <HAL_RCC_OscConfig+0x4ac>)
 8003792:	f023 0301 	bic.w	r3, r3, #1
 8003796:	6713      	str	r3, [r2, #112]	; 0x70
 8003798:	4b57      	ldr	r3, [pc, #348]	; (80038f8 <HAL_RCC_OscConfig+0x4ac>)
 800379a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800379c:	4a56      	ldr	r2, [pc, #344]	; (80038f8 <HAL_RCC_OscConfig+0x4ac>)
 800379e:	f023 0304 	bic.w	r3, r3, #4
 80037a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d015      	beq.n	80037d8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ac:	f7fd fb1c 	bl	8000de8 <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037b2:	e00a      	b.n	80037ca <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037b4:	f7fd fb18 	bl	8000de8 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	f241 3288 	movw	r2, #5000	; 0x1388
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e0d7      	b.n	800397a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037ca:	4b4b      	ldr	r3, [pc, #300]	; (80038f8 <HAL_RCC_OscConfig+0x4ac>)
 80037cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d0ee      	beq.n	80037b4 <HAL_RCC_OscConfig+0x368>
 80037d6:	e014      	b.n	8003802 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d8:	f7fd fb06 	bl	8000de8 <HAL_GetTick>
 80037dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037de:	e00a      	b.n	80037f6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037e0:	f7fd fb02 	bl	8000de8 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e0c1      	b.n	800397a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037f6:	4b40      	ldr	r3, [pc, #256]	; (80038f8 <HAL_RCC_OscConfig+0x4ac>)
 80037f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1ee      	bne.n	80037e0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003802:	7dfb      	ldrb	r3, [r7, #23]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d105      	bne.n	8003814 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003808:	4b3b      	ldr	r3, [pc, #236]	; (80038f8 <HAL_RCC_OscConfig+0x4ac>)
 800380a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380c:	4a3a      	ldr	r2, [pc, #232]	; (80038f8 <HAL_RCC_OscConfig+0x4ac>)
 800380e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003812:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	2b00      	cmp	r3, #0
 800381a:	f000 80ad 	beq.w	8003978 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800381e:	4b36      	ldr	r3, [pc, #216]	; (80038f8 <HAL_RCC_OscConfig+0x4ac>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f003 030c 	and.w	r3, r3, #12
 8003826:	2b08      	cmp	r3, #8
 8003828:	d060      	beq.n	80038ec <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	2b02      	cmp	r3, #2
 8003830:	d145      	bne.n	80038be <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003832:	4b33      	ldr	r3, [pc, #204]	; (8003900 <HAL_RCC_OscConfig+0x4b4>)
 8003834:	2200      	movs	r2, #0
 8003836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003838:	f7fd fad6 	bl	8000de8 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003840:	f7fd fad2 	bl	8000de8 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e093      	b.n	800397a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003852:	4b29      	ldr	r3, [pc, #164]	; (80038f8 <HAL_RCC_OscConfig+0x4ac>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1f0      	bne.n	8003840 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	69da      	ldr	r2, [r3, #28]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a1b      	ldr	r3, [r3, #32]
 8003866:	431a      	orrs	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386c:	019b      	lsls	r3, r3, #6
 800386e:	431a      	orrs	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003874:	085b      	lsrs	r3, r3, #1
 8003876:	3b01      	subs	r3, #1
 8003878:	041b      	lsls	r3, r3, #16
 800387a:	431a      	orrs	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003880:	061b      	lsls	r3, r3, #24
 8003882:	431a      	orrs	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003888:	071b      	lsls	r3, r3, #28
 800388a:	491b      	ldr	r1, [pc, #108]	; (80038f8 <HAL_RCC_OscConfig+0x4ac>)
 800388c:	4313      	orrs	r3, r2
 800388e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003890:	4b1b      	ldr	r3, [pc, #108]	; (8003900 <HAL_RCC_OscConfig+0x4b4>)
 8003892:	2201      	movs	r2, #1
 8003894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003896:	f7fd faa7 	bl	8000de8 <HAL_GetTick>
 800389a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800389c:	e008      	b.n	80038b0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800389e:	f7fd faa3 	bl	8000de8 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d901      	bls.n	80038b0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e064      	b.n	800397a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038b0:	4b11      	ldr	r3, [pc, #68]	; (80038f8 <HAL_RCC_OscConfig+0x4ac>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d0f0      	beq.n	800389e <HAL_RCC_OscConfig+0x452>
 80038bc:	e05c      	b.n	8003978 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038be:	4b10      	ldr	r3, [pc, #64]	; (8003900 <HAL_RCC_OscConfig+0x4b4>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c4:	f7fd fa90 	bl	8000de8 <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ca:	e008      	b.n	80038de <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038cc:	f7fd fa8c 	bl	8000de8 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e04d      	b.n	800397a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038de:	4b06      	ldr	r3, [pc, #24]	; (80038f8 <HAL_RCC_OscConfig+0x4ac>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1f0      	bne.n	80038cc <HAL_RCC_OscConfig+0x480>
 80038ea:	e045      	b.n	8003978 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d107      	bne.n	8003904 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e040      	b.n	800397a <HAL_RCC_OscConfig+0x52e>
 80038f8:	40023800 	.word	0x40023800
 80038fc:	40007000 	.word	0x40007000
 8003900:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003904:	4b1f      	ldr	r3, [pc, #124]	; (8003984 <HAL_RCC_OscConfig+0x538>)
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d030      	beq.n	8003974 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800391c:	429a      	cmp	r2, r3
 800391e:	d129      	bne.n	8003974 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800392a:	429a      	cmp	r2, r3
 800392c:	d122      	bne.n	8003974 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003934:	4013      	ands	r3, r2
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800393a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800393c:	4293      	cmp	r3, r2
 800393e:	d119      	bne.n	8003974 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394a:	085b      	lsrs	r3, r3, #1
 800394c:	3b01      	subs	r3, #1
 800394e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003950:	429a      	cmp	r2, r3
 8003952:	d10f      	bne.n	8003974 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003960:	429a      	cmp	r2, r3
 8003962:	d107      	bne.n	8003974 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003970:	429a      	cmp	r2, r3
 8003972:	d001      	beq.n	8003978 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e000      	b.n	800397a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3718      	adds	r7, #24
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	40023800 	.word	0x40023800

08003988 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d101      	bne.n	800399a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e03f      	b.n	8003a1a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d106      	bne.n	80039b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f7fc ff2c 	bl	800080c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2224      	movs	r2, #36	; 0x24
 80039b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68da      	ldr	r2, [r3, #12]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 f829 	bl	8003a24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	691a      	ldr	r2, [r3, #16]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	695a      	ldr	r2, [r3, #20]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68da      	ldr	r2, [r3, #12]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2220      	movs	r2, #32
 8003a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
	...

08003a24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a28:	b0c0      	sub	sp, #256	; 0x100
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a40:	68d9      	ldr	r1, [r3, #12]
 8003a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	ea40 0301 	orr.w	r3, r0, r1
 8003a4c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a52:	689a      	ldr	r2, [r3, #8]
 8003a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	431a      	orrs	r2, r3
 8003a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003a7c:	f021 010c 	bic.w	r1, r1, #12
 8003a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003a8a:	430b      	orrs	r3, r1
 8003a8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a9e:	6999      	ldr	r1, [r3, #24]
 8003aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	ea40 0301 	orr.w	r3, r0, r1
 8003aaa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	4b8f      	ldr	r3, [pc, #572]	; (8003cf0 <UART_SetConfig+0x2cc>)
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d005      	beq.n	8003ac4 <UART_SetConfig+0xa0>
 8003ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	4b8d      	ldr	r3, [pc, #564]	; (8003cf4 <UART_SetConfig+0x2d0>)
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d104      	bne.n	8003ace <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ac4:	f7fe ff54 	bl	8002970 <HAL_RCC_GetPCLK2Freq>
 8003ac8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003acc:	e003      	b.n	8003ad6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ace:	f7fe ff3b 	bl	8002948 <HAL_RCC_GetPCLK1Freq>
 8003ad2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ada:	69db      	ldr	r3, [r3, #28]
 8003adc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ae0:	f040 810c 	bne.w	8003cfc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ae4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003aee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003af2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003af6:	4622      	mov	r2, r4
 8003af8:	462b      	mov	r3, r5
 8003afa:	1891      	adds	r1, r2, r2
 8003afc:	65b9      	str	r1, [r7, #88]	; 0x58
 8003afe:	415b      	adcs	r3, r3
 8003b00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b02:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003b06:	4621      	mov	r1, r4
 8003b08:	eb12 0801 	adds.w	r8, r2, r1
 8003b0c:	4629      	mov	r1, r5
 8003b0e:	eb43 0901 	adc.w	r9, r3, r1
 8003b12:	f04f 0200 	mov.w	r2, #0
 8003b16:	f04f 0300 	mov.w	r3, #0
 8003b1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b26:	4690      	mov	r8, r2
 8003b28:	4699      	mov	r9, r3
 8003b2a:	4623      	mov	r3, r4
 8003b2c:	eb18 0303 	adds.w	r3, r8, r3
 8003b30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003b34:	462b      	mov	r3, r5
 8003b36:	eb49 0303 	adc.w	r3, r9, r3
 8003b3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003b4a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003b4e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003b52:	460b      	mov	r3, r1
 8003b54:	18db      	adds	r3, r3, r3
 8003b56:	653b      	str	r3, [r7, #80]	; 0x50
 8003b58:	4613      	mov	r3, r2
 8003b5a:	eb42 0303 	adc.w	r3, r2, r3
 8003b5e:	657b      	str	r3, [r7, #84]	; 0x54
 8003b60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003b64:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003b68:	f7fc fb4c 	bl	8000204 <__aeabi_uldivmod>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	460b      	mov	r3, r1
 8003b70:	4b61      	ldr	r3, [pc, #388]	; (8003cf8 <UART_SetConfig+0x2d4>)
 8003b72:	fba3 2302 	umull	r2, r3, r3, r2
 8003b76:	095b      	lsrs	r3, r3, #5
 8003b78:	011c      	lsls	r4, r3, #4
 8003b7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b84:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003b88:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003b8c:	4642      	mov	r2, r8
 8003b8e:	464b      	mov	r3, r9
 8003b90:	1891      	adds	r1, r2, r2
 8003b92:	64b9      	str	r1, [r7, #72]	; 0x48
 8003b94:	415b      	adcs	r3, r3
 8003b96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b98:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003b9c:	4641      	mov	r1, r8
 8003b9e:	eb12 0a01 	adds.w	sl, r2, r1
 8003ba2:	4649      	mov	r1, r9
 8003ba4:	eb43 0b01 	adc.w	fp, r3, r1
 8003ba8:	f04f 0200 	mov.w	r2, #0
 8003bac:	f04f 0300 	mov.w	r3, #0
 8003bb0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003bb4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003bb8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bbc:	4692      	mov	sl, r2
 8003bbe:	469b      	mov	fp, r3
 8003bc0:	4643      	mov	r3, r8
 8003bc2:	eb1a 0303 	adds.w	r3, sl, r3
 8003bc6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003bca:	464b      	mov	r3, r9
 8003bcc:	eb4b 0303 	adc.w	r3, fp, r3
 8003bd0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003be0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003be4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003be8:	460b      	mov	r3, r1
 8003bea:	18db      	adds	r3, r3, r3
 8003bec:	643b      	str	r3, [r7, #64]	; 0x40
 8003bee:	4613      	mov	r3, r2
 8003bf0:	eb42 0303 	adc.w	r3, r2, r3
 8003bf4:	647b      	str	r3, [r7, #68]	; 0x44
 8003bf6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003bfa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003bfe:	f7fc fb01 	bl	8000204 <__aeabi_uldivmod>
 8003c02:	4602      	mov	r2, r0
 8003c04:	460b      	mov	r3, r1
 8003c06:	4611      	mov	r1, r2
 8003c08:	4b3b      	ldr	r3, [pc, #236]	; (8003cf8 <UART_SetConfig+0x2d4>)
 8003c0a:	fba3 2301 	umull	r2, r3, r3, r1
 8003c0e:	095b      	lsrs	r3, r3, #5
 8003c10:	2264      	movs	r2, #100	; 0x64
 8003c12:	fb02 f303 	mul.w	r3, r2, r3
 8003c16:	1acb      	subs	r3, r1, r3
 8003c18:	00db      	lsls	r3, r3, #3
 8003c1a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003c1e:	4b36      	ldr	r3, [pc, #216]	; (8003cf8 <UART_SetConfig+0x2d4>)
 8003c20:	fba3 2302 	umull	r2, r3, r3, r2
 8003c24:	095b      	lsrs	r3, r3, #5
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c2c:	441c      	add	r4, r3
 8003c2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c32:	2200      	movs	r2, #0
 8003c34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c38:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003c3c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003c40:	4642      	mov	r2, r8
 8003c42:	464b      	mov	r3, r9
 8003c44:	1891      	adds	r1, r2, r2
 8003c46:	63b9      	str	r1, [r7, #56]	; 0x38
 8003c48:	415b      	adcs	r3, r3
 8003c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003c50:	4641      	mov	r1, r8
 8003c52:	1851      	adds	r1, r2, r1
 8003c54:	6339      	str	r1, [r7, #48]	; 0x30
 8003c56:	4649      	mov	r1, r9
 8003c58:	414b      	adcs	r3, r1
 8003c5a:	637b      	str	r3, [r7, #52]	; 0x34
 8003c5c:	f04f 0200 	mov.w	r2, #0
 8003c60:	f04f 0300 	mov.w	r3, #0
 8003c64:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003c68:	4659      	mov	r1, fp
 8003c6a:	00cb      	lsls	r3, r1, #3
 8003c6c:	4651      	mov	r1, sl
 8003c6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c72:	4651      	mov	r1, sl
 8003c74:	00ca      	lsls	r2, r1, #3
 8003c76:	4610      	mov	r0, r2
 8003c78:	4619      	mov	r1, r3
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	4642      	mov	r2, r8
 8003c7e:	189b      	adds	r3, r3, r2
 8003c80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c84:	464b      	mov	r3, r9
 8003c86:	460a      	mov	r2, r1
 8003c88:	eb42 0303 	adc.w	r3, r2, r3
 8003c8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003c9c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003ca0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	18db      	adds	r3, r3, r3
 8003ca8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003caa:	4613      	mov	r3, r2
 8003cac:	eb42 0303 	adc.w	r3, r2, r3
 8003cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cb2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003cb6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003cba:	f7fc faa3 	bl	8000204 <__aeabi_uldivmod>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	4b0d      	ldr	r3, [pc, #52]	; (8003cf8 <UART_SetConfig+0x2d4>)
 8003cc4:	fba3 1302 	umull	r1, r3, r3, r2
 8003cc8:	095b      	lsrs	r3, r3, #5
 8003cca:	2164      	movs	r1, #100	; 0x64
 8003ccc:	fb01 f303 	mul.w	r3, r1, r3
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	3332      	adds	r3, #50	; 0x32
 8003cd6:	4a08      	ldr	r2, [pc, #32]	; (8003cf8 <UART_SetConfig+0x2d4>)
 8003cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cdc:	095b      	lsrs	r3, r3, #5
 8003cde:	f003 0207 	and.w	r2, r3, #7
 8003ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4422      	add	r2, r4
 8003cea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003cec:	e105      	b.n	8003efa <UART_SetConfig+0x4d6>
 8003cee:	bf00      	nop
 8003cf0:	40011000 	.word	0x40011000
 8003cf4:	40011400 	.word	0x40011400
 8003cf8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d00:	2200      	movs	r2, #0
 8003d02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003d06:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003d0a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003d0e:	4642      	mov	r2, r8
 8003d10:	464b      	mov	r3, r9
 8003d12:	1891      	adds	r1, r2, r2
 8003d14:	6239      	str	r1, [r7, #32]
 8003d16:	415b      	adcs	r3, r3
 8003d18:	627b      	str	r3, [r7, #36]	; 0x24
 8003d1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d1e:	4641      	mov	r1, r8
 8003d20:	1854      	adds	r4, r2, r1
 8003d22:	4649      	mov	r1, r9
 8003d24:	eb43 0501 	adc.w	r5, r3, r1
 8003d28:	f04f 0200 	mov.w	r2, #0
 8003d2c:	f04f 0300 	mov.w	r3, #0
 8003d30:	00eb      	lsls	r3, r5, #3
 8003d32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d36:	00e2      	lsls	r2, r4, #3
 8003d38:	4614      	mov	r4, r2
 8003d3a:	461d      	mov	r5, r3
 8003d3c:	4643      	mov	r3, r8
 8003d3e:	18e3      	adds	r3, r4, r3
 8003d40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003d44:	464b      	mov	r3, r9
 8003d46:	eb45 0303 	adc.w	r3, r5, r3
 8003d4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003d5a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d5e:	f04f 0200 	mov.w	r2, #0
 8003d62:	f04f 0300 	mov.w	r3, #0
 8003d66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003d6a:	4629      	mov	r1, r5
 8003d6c:	008b      	lsls	r3, r1, #2
 8003d6e:	4621      	mov	r1, r4
 8003d70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d74:	4621      	mov	r1, r4
 8003d76:	008a      	lsls	r2, r1, #2
 8003d78:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003d7c:	f7fc fa42 	bl	8000204 <__aeabi_uldivmod>
 8003d80:	4602      	mov	r2, r0
 8003d82:	460b      	mov	r3, r1
 8003d84:	4b60      	ldr	r3, [pc, #384]	; (8003f08 <UART_SetConfig+0x4e4>)
 8003d86:	fba3 2302 	umull	r2, r3, r3, r2
 8003d8a:	095b      	lsrs	r3, r3, #5
 8003d8c:	011c      	lsls	r4, r3, #4
 8003d8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d92:	2200      	movs	r2, #0
 8003d94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003d98:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003d9c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003da0:	4642      	mov	r2, r8
 8003da2:	464b      	mov	r3, r9
 8003da4:	1891      	adds	r1, r2, r2
 8003da6:	61b9      	str	r1, [r7, #24]
 8003da8:	415b      	adcs	r3, r3
 8003daa:	61fb      	str	r3, [r7, #28]
 8003dac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003db0:	4641      	mov	r1, r8
 8003db2:	1851      	adds	r1, r2, r1
 8003db4:	6139      	str	r1, [r7, #16]
 8003db6:	4649      	mov	r1, r9
 8003db8:	414b      	adcs	r3, r1
 8003dba:	617b      	str	r3, [r7, #20]
 8003dbc:	f04f 0200 	mov.w	r2, #0
 8003dc0:	f04f 0300 	mov.w	r3, #0
 8003dc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003dc8:	4659      	mov	r1, fp
 8003dca:	00cb      	lsls	r3, r1, #3
 8003dcc:	4651      	mov	r1, sl
 8003dce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dd2:	4651      	mov	r1, sl
 8003dd4:	00ca      	lsls	r2, r1, #3
 8003dd6:	4610      	mov	r0, r2
 8003dd8:	4619      	mov	r1, r3
 8003dda:	4603      	mov	r3, r0
 8003ddc:	4642      	mov	r2, r8
 8003dde:	189b      	adds	r3, r3, r2
 8003de0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003de4:	464b      	mov	r3, r9
 8003de6:	460a      	mov	r2, r1
 8003de8:	eb42 0303 	adc.w	r3, r2, r3
 8003dec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	67bb      	str	r3, [r7, #120]	; 0x78
 8003dfa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003dfc:	f04f 0200 	mov.w	r2, #0
 8003e00:	f04f 0300 	mov.w	r3, #0
 8003e04:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003e08:	4649      	mov	r1, r9
 8003e0a:	008b      	lsls	r3, r1, #2
 8003e0c:	4641      	mov	r1, r8
 8003e0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e12:	4641      	mov	r1, r8
 8003e14:	008a      	lsls	r2, r1, #2
 8003e16:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003e1a:	f7fc f9f3 	bl	8000204 <__aeabi_uldivmod>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	460b      	mov	r3, r1
 8003e22:	4b39      	ldr	r3, [pc, #228]	; (8003f08 <UART_SetConfig+0x4e4>)
 8003e24:	fba3 1302 	umull	r1, r3, r3, r2
 8003e28:	095b      	lsrs	r3, r3, #5
 8003e2a:	2164      	movs	r1, #100	; 0x64
 8003e2c:	fb01 f303 	mul.w	r3, r1, r3
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	011b      	lsls	r3, r3, #4
 8003e34:	3332      	adds	r3, #50	; 0x32
 8003e36:	4a34      	ldr	r2, [pc, #208]	; (8003f08 <UART_SetConfig+0x4e4>)
 8003e38:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3c:	095b      	lsrs	r3, r3, #5
 8003e3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e42:	441c      	add	r4, r3
 8003e44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e48:	2200      	movs	r2, #0
 8003e4a:	673b      	str	r3, [r7, #112]	; 0x70
 8003e4c:	677a      	str	r2, [r7, #116]	; 0x74
 8003e4e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003e52:	4642      	mov	r2, r8
 8003e54:	464b      	mov	r3, r9
 8003e56:	1891      	adds	r1, r2, r2
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	415b      	adcs	r3, r3
 8003e5c:	60fb      	str	r3, [r7, #12]
 8003e5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e62:	4641      	mov	r1, r8
 8003e64:	1851      	adds	r1, r2, r1
 8003e66:	6039      	str	r1, [r7, #0]
 8003e68:	4649      	mov	r1, r9
 8003e6a:	414b      	adcs	r3, r1
 8003e6c:	607b      	str	r3, [r7, #4]
 8003e6e:	f04f 0200 	mov.w	r2, #0
 8003e72:	f04f 0300 	mov.w	r3, #0
 8003e76:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e7a:	4659      	mov	r1, fp
 8003e7c:	00cb      	lsls	r3, r1, #3
 8003e7e:	4651      	mov	r1, sl
 8003e80:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e84:	4651      	mov	r1, sl
 8003e86:	00ca      	lsls	r2, r1, #3
 8003e88:	4610      	mov	r0, r2
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	4642      	mov	r2, r8
 8003e90:	189b      	adds	r3, r3, r2
 8003e92:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e94:	464b      	mov	r3, r9
 8003e96:	460a      	mov	r2, r1
 8003e98:	eb42 0303 	adc.w	r3, r2, r3
 8003e9c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	663b      	str	r3, [r7, #96]	; 0x60
 8003ea8:	667a      	str	r2, [r7, #100]	; 0x64
 8003eaa:	f04f 0200 	mov.w	r2, #0
 8003eae:	f04f 0300 	mov.w	r3, #0
 8003eb2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003eb6:	4649      	mov	r1, r9
 8003eb8:	008b      	lsls	r3, r1, #2
 8003eba:	4641      	mov	r1, r8
 8003ebc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ec0:	4641      	mov	r1, r8
 8003ec2:	008a      	lsls	r2, r1, #2
 8003ec4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003ec8:	f7fc f99c 	bl	8000204 <__aeabi_uldivmod>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	460b      	mov	r3, r1
 8003ed0:	4b0d      	ldr	r3, [pc, #52]	; (8003f08 <UART_SetConfig+0x4e4>)
 8003ed2:	fba3 1302 	umull	r1, r3, r3, r2
 8003ed6:	095b      	lsrs	r3, r3, #5
 8003ed8:	2164      	movs	r1, #100	; 0x64
 8003eda:	fb01 f303 	mul.w	r3, r1, r3
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	011b      	lsls	r3, r3, #4
 8003ee2:	3332      	adds	r3, #50	; 0x32
 8003ee4:	4a08      	ldr	r2, [pc, #32]	; (8003f08 <UART_SetConfig+0x4e4>)
 8003ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eea:	095b      	lsrs	r3, r3, #5
 8003eec:	f003 020f 	and.w	r2, r3, #15
 8003ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4422      	add	r2, r4
 8003ef8:	609a      	str	r2, [r3, #8]
}
 8003efa:	bf00      	nop
 8003efc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003f00:	46bd      	mov	sp, r7
 8003f02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f06:	bf00      	nop
 8003f08:	51eb851f 	.word	0x51eb851f

08003f0c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f0c:	b084      	sub	sp, #16
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b084      	sub	sp, #16
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
 8003f16:	f107 001c 	add.w	r0, r7, #28
 8003f1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d122      	bne.n	8003f6a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003f38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003f4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d105      	bne.n	8003f5e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f001 fb16 	bl	8005590 <USB_CoreReset>
 8003f64:	4603      	mov	r3, r0
 8003f66:	73fb      	strb	r3, [r7, #15]
 8003f68:	e01a      	b.n	8003fa0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f001 fb0a 	bl	8005590 <USB_CoreReset>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003f80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d106      	bne.n	8003f94 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	639a      	str	r2, [r3, #56]	; 0x38
 8003f92:	e005      	b.n	8003fa0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d10b      	bne.n	8003fbe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f043 0206 	orr.w	r2, r3, #6
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f043 0220 	orr.w	r2, r3, #32
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3710      	adds	r7, #16
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003fca:	b004      	add	sp, #16
 8003fcc:	4770      	bx	lr
	...

08003fd0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b087      	sub	sp, #28
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	4613      	mov	r3, r2
 8003fdc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003fde:	79fb      	ldrb	r3, [r7, #7]
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d165      	bne.n	80040b0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	4a41      	ldr	r2, [pc, #260]	; (80040ec <USB_SetTurnaroundTime+0x11c>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d906      	bls.n	8003ffa <USB_SetTurnaroundTime+0x2a>
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	4a40      	ldr	r2, [pc, #256]	; (80040f0 <USB_SetTurnaroundTime+0x120>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d202      	bcs.n	8003ffa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003ff4:	230f      	movs	r3, #15
 8003ff6:	617b      	str	r3, [r7, #20]
 8003ff8:	e062      	b.n	80040c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	4a3c      	ldr	r2, [pc, #240]	; (80040f0 <USB_SetTurnaroundTime+0x120>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d306      	bcc.n	8004010 <USB_SetTurnaroundTime+0x40>
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	4a3b      	ldr	r2, [pc, #236]	; (80040f4 <USB_SetTurnaroundTime+0x124>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d202      	bcs.n	8004010 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800400a:	230e      	movs	r3, #14
 800400c:	617b      	str	r3, [r7, #20]
 800400e:	e057      	b.n	80040c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	4a38      	ldr	r2, [pc, #224]	; (80040f4 <USB_SetTurnaroundTime+0x124>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d306      	bcc.n	8004026 <USB_SetTurnaroundTime+0x56>
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	4a37      	ldr	r2, [pc, #220]	; (80040f8 <USB_SetTurnaroundTime+0x128>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d202      	bcs.n	8004026 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004020:	230d      	movs	r3, #13
 8004022:	617b      	str	r3, [r7, #20]
 8004024:	e04c      	b.n	80040c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	4a33      	ldr	r2, [pc, #204]	; (80040f8 <USB_SetTurnaroundTime+0x128>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d306      	bcc.n	800403c <USB_SetTurnaroundTime+0x6c>
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	4a32      	ldr	r2, [pc, #200]	; (80040fc <USB_SetTurnaroundTime+0x12c>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d802      	bhi.n	800403c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004036:	230c      	movs	r3, #12
 8004038:	617b      	str	r3, [r7, #20]
 800403a:	e041      	b.n	80040c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	4a2f      	ldr	r2, [pc, #188]	; (80040fc <USB_SetTurnaroundTime+0x12c>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d906      	bls.n	8004052 <USB_SetTurnaroundTime+0x82>
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	4a2e      	ldr	r2, [pc, #184]	; (8004100 <USB_SetTurnaroundTime+0x130>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d802      	bhi.n	8004052 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800404c:	230b      	movs	r3, #11
 800404e:	617b      	str	r3, [r7, #20]
 8004050:	e036      	b.n	80040c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	4a2a      	ldr	r2, [pc, #168]	; (8004100 <USB_SetTurnaroundTime+0x130>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d906      	bls.n	8004068 <USB_SetTurnaroundTime+0x98>
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	4a29      	ldr	r2, [pc, #164]	; (8004104 <USB_SetTurnaroundTime+0x134>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d802      	bhi.n	8004068 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004062:	230a      	movs	r3, #10
 8004064:	617b      	str	r3, [r7, #20]
 8004066:	e02b      	b.n	80040c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	4a26      	ldr	r2, [pc, #152]	; (8004104 <USB_SetTurnaroundTime+0x134>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d906      	bls.n	800407e <USB_SetTurnaroundTime+0xae>
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	4a25      	ldr	r2, [pc, #148]	; (8004108 <USB_SetTurnaroundTime+0x138>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d202      	bcs.n	800407e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004078:	2309      	movs	r3, #9
 800407a:	617b      	str	r3, [r7, #20]
 800407c:	e020      	b.n	80040c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	4a21      	ldr	r2, [pc, #132]	; (8004108 <USB_SetTurnaroundTime+0x138>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d306      	bcc.n	8004094 <USB_SetTurnaroundTime+0xc4>
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	4a20      	ldr	r2, [pc, #128]	; (800410c <USB_SetTurnaroundTime+0x13c>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d802      	bhi.n	8004094 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800408e:	2308      	movs	r3, #8
 8004090:	617b      	str	r3, [r7, #20]
 8004092:	e015      	b.n	80040c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	4a1d      	ldr	r2, [pc, #116]	; (800410c <USB_SetTurnaroundTime+0x13c>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d906      	bls.n	80040aa <USB_SetTurnaroundTime+0xda>
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	4a1c      	ldr	r2, [pc, #112]	; (8004110 <USB_SetTurnaroundTime+0x140>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d202      	bcs.n	80040aa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80040a4:	2307      	movs	r3, #7
 80040a6:	617b      	str	r3, [r7, #20]
 80040a8:	e00a      	b.n	80040c0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80040aa:	2306      	movs	r3, #6
 80040ac:	617b      	str	r3, [r7, #20]
 80040ae:	e007      	b.n	80040c0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80040b0:	79fb      	ldrb	r3, [r7, #7]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d102      	bne.n	80040bc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80040b6:	2309      	movs	r3, #9
 80040b8:	617b      	str	r3, [r7, #20]
 80040ba:	e001      	b.n	80040c0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80040bc:	2309      	movs	r3, #9
 80040be:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	68da      	ldr	r2, [r3, #12]
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	029b      	lsls	r3, r3, #10
 80040d4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80040d8:	431a      	orrs	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	371c      	adds	r7, #28
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr
 80040ec:	00d8acbf 	.word	0x00d8acbf
 80040f0:	00e4e1c0 	.word	0x00e4e1c0
 80040f4:	00f42400 	.word	0x00f42400
 80040f8:	01067380 	.word	0x01067380
 80040fc:	011a499f 	.word	0x011a499f
 8004100:	01312cff 	.word	0x01312cff
 8004104:	014ca43f 	.word	0x014ca43f
 8004108:	016e3600 	.word	0x016e3600
 800410c:	01a6ab1f 	.word	0x01a6ab1f
 8004110:	01e84800 	.word	0x01e84800

08004114 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f043 0201 	orr.w	r2, r3, #1
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	370c      	adds	r7, #12
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr

08004136 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004136:	b480      	push	{r7}
 8004138:	b083      	sub	sp, #12
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f023 0201 	bic.w	r2, r3, #1
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	460b      	mov	r3, r1
 8004162:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004164:	2300      	movs	r3, #0
 8004166:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004174:	78fb      	ldrb	r3, [r7, #3]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d115      	bne.n	80041a6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004186:	2001      	movs	r0, #1
 8004188:	f7fc fe3a 	bl	8000e00 <HAL_Delay>
      ms++;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	3301      	adds	r3, #1
 8004190:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f001 f96c 	bl	8005470 <USB_GetMode>
 8004198:	4603      	mov	r3, r0
 800419a:	2b01      	cmp	r3, #1
 800419c:	d01e      	beq.n	80041dc <USB_SetCurrentMode+0x84>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2b31      	cmp	r3, #49	; 0x31
 80041a2:	d9f0      	bls.n	8004186 <USB_SetCurrentMode+0x2e>
 80041a4:	e01a      	b.n	80041dc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80041a6:	78fb      	ldrb	r3, [r7, #3]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d115      	bne.n	80041d8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80041b8:	2001      	movs	r0, #1
 80041ba:	f7fc fe21 	bl	8000e00 <HAL_Delay>
      ms++;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	3301      	adds	r3, #1
 80041c2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f001 f953 	bl	8005470 <USB_GetMode>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d005      	beq.n	80041dc <USB_SetCurrentMode+0x84>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2b31      	cmp	r3, #49	; 0x31
 80041d4:	d9f0      	bls.n	80041b8 <USB_SetCurrentMode+0x60>
 80041d6:	e001      	b.n	80041dc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e005      	b.n	80041e8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2b32      	cmp	r3, #50	; 0x32
 80041e0:	d101      	bne.n	80041e6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e000      	b.n	80041e8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3710      	adds	r7, #16
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80041f0:	b084      	sub	sp, #16
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b086      	sub	sp, #24
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
 80041fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80041fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004202:	2300      	movs	r3, #0
 8004204:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800420a:	2300      	movs	r3, #0
 800420c:	613b      	str	r3, [r7, #16]
 800420e:	e009      	b.n	8004224 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	3340      	adds	r3, #64	; 0x40
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	4413      	add	r3, r2
 800421a:	2200      	movs	r2, #0
 800421c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	3301      	adds	r3, #1
 8004222:	613b      	str	r3, [r7, #16]
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	2b0e      	cmp	r3, #14
 8004228:	d9f2      	bls.n	8004210 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800422a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800422c:	2b00      	cmp	r3, #0
 800422e:	d11c      	bne.n	800426a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800423e:	f043 0302 	orr.w	r3, r3, #2
 8004242:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004248:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	601a      	str	r2, [r3, #0]
 8004268:	e005      	b.n	8004276 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800427c:	461a      	mov	r2, r3
 800427e:	2300      	movs	r3, #0
 8004280:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004288:	4619      	mov	r1, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004290:	461a      	mov	r2, r3
 8004292:	680b      	ldr	r3, [r1, #0]
 8004294:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004298:	2b01      	cmp	r3, #1
 800429a:	d10c      	bne.n	80042b6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800429c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d104      	bne.n	80042ac <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80042a2:	2100      	movs	r1, #0
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f000 f945 	bl	8004534 <USB_SetDevSpeed>
 80042aa:	e008      	b.n	80042be <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80042ac:	2101      	movs	r1, #1
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 f940 	bl	8004534 <USB_SetDevSpeed>
 80042b4:	e003      	b.n	80042be <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80042b6:	2103      	movs	r1, #3
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f000 f93b 	bl	8004534 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80042be:	2110      	movs	r1, #16
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 f8f3 	bl	80044ac <USB_FlushTxFifo>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d001      	beq.n	80042d0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 f90f 	bl	80044f4 <USB_FlushRxFifo>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d001      	beq.n	80042e0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042e6:	461a      	mov	r2, r3
 80042e8:	2300      	movs	r3, #0
 80042ea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042f2:	461a      	mov	r2, r3
 80042f4:	2300      	movs	r3, #0
 80042f6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042fe:	461a      	mov	r2, r3
 8004300:	2300      	movs	r3, #0
 8004302:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004304:	2300      	movs	r3, #0
 8004306:	613b      	str	r3, [r7, #16]
 8004308:	e043      	b.n	8004392 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	015a      	lsls	r2, r3, #5
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	4413      	add	r3, r2
 8004312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800431c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004320:	d118      	bne.n	8004354 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d10a      	bne.n	800433e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	015a      	lsls	r2, r3, #5
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	4413      	add	r3, r2
 8004330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004334:	461a      	mov	r2, r3
 8004336:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800433a:	6013      	str	r3, [r2, #0]
 800433c:	e013      	b.n	8004366 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	015a      	lsls	r2, r3, #5
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	4413      	add	r3, r2
 8004346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800434a:	461a      	mov	r2, r3
 800434c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004350:	6013      	str	r3, [r2, #0]
 8004352:	e008      	b.n	8004366 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	015a      	lsls	r2, r3, #5
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	4413      	add	r3, r2
 800435c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004360:	461a      	mov	r2, r3
 8004362:	2300      	movs	r3, #0
 8004364:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	015a      	lsls	r2, r3, #5
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	4413      	add	r3, r2
 800436e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004372:	461a      	mov	r2, r3
 8004374:	2300      	movs	r3, #0
 8004376:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	015a      	lsls	r2, r3, #5
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	4413      	add	r3, r2
 8004380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004384:	461a      	mov	r2, r3
 8004386:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800438a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	3301      	adds	r3, #1
 8004390:	613b      	str	r3, [r7, #16]
 8004392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004394:	693a      	ldr	r2, [r7, #16]
 8004396:	429a      	cmp	r2, r3
 8004398:	d3b7      	bcc.n	800430a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800439a:	2300      	movs	r3, #0
 800439c:	613b      	str	r3, [r7, #16]
 800439e:	e043      	b.n	8004428 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	015a      	lsls	r2, r3, #5
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4413      	add	r3, r2
 80043a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043b6:	d118      	bne.n	80043ea <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10a      	bne.n	80043d4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	015a      	lsls	r2, r3, #5
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	4413      	add	r3, r2
 80043c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ca:	461a      	mov	r2, r3
 80043cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80043d0:	6013      	str	r3, [r2, #0]
 80043d2:	e013      	b.n	80043fc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	015a      	lsls	r2, r3, #5
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	4413      	add	r3, r2
 80043dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043e0:	461a      	mov	r2, r3
 80043e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80043e6:	6013      	str	r3, [r2, #0]
 80043e8:	e008      	b.n	80043fc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	015a      	lsls	r2, r3, #5
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	4413      	add	r3, r2
 80043f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043f6:	461a      	mov	r2, r3
 80043f8:	2300      	movs	r3, #0
 80043fa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	015a      	lsls	r2, r3, #5
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	4413      	add	r3, r2
 8004404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004408:	461a      	mov	r2, r3
 800440a:	2300      	movs	r3, #0
 800440c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	015a      	lsls	r2, r3, #5
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	4413      	add	r3, r2
 8004416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800441a:	461a      	mov	r2, r3
 800441c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004420:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	3301      	adds	r3, #1
 8004426:	613b      	str	r3, [r7, #16]
 8004428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	429a      	cmp	r2, r3
 800442e:	d3b7      	bcc.n	80043a0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800443e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004442:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004450:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004454:	2b00      	cmp	r3, #0
 8004456:	d105      	bne.n	8004464 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	f043 0210 	orr.w	r2, r3, #16
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	699a      	ldr	r2, [r3, #24]
 8004468:	4b0f      	ldr	r3, [pc, #60]	; (80044a8 <USB_DevInit+0x2b8>)
 800446a:	4313      	orrs	r3, r2
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004472:	2b00      	cmp	r3, #0
 8004474:	d005      	beq.n	8004482 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	f043 0208 	orr.w	r2, r3, #8
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004482:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004484:	2b01      	cmp	r3, #1
 8004486:	d107      	bne.n	8004498 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004490:	f043 0304 	orr.w	r3, r3, #4
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004498:	7dfb      	ldrb	r3, [r7, #23]
}
 800449a:	4618      	mov	r0, r3
 800449c:	3718      	adds	r7, #24
 800449e:	46bd      	mov	sp, r7
 80044a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80044a4:	b004      	add	sp, #16
 80044a6:	4770      	bx	lr
 80044a8:	803c3800 	.word	0x803c3800

080044ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80044b6:	2300      	movs	r3, #0
 80044b8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	019b      	lsls	r3, r3, #6
 80044be:	f043 0220 	orr.w	r2, r3, #32
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	3301      	adds	r3, #1
 80044ca:	60fb      	str	r3, [r7, #12]
 80044cc:	4a08      	ldr	r2, [pc, #32]	; (80044f0 <USB_FlushTxFifo+0x44>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d901      	bls.n	80044d6 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e006      	b.n	80044e4 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	f003 0320 	and.w	r3, r3, #32
 80044de:	2b20      	cmp	r3, #32
 80044e0:	d0f1      	beq.n	80044c6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3714      	adds	r7, #20
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr
 80044f0:	00030d40 	.word	0x00030d40

080044f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80044fc:	2300      	movs	r3, #0
 80044fe:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2210      	movs	r2, #16
 8004504:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	3301      	adds	r3, #1
 800450a:	60fb      	str	r3, [r7, #12]
 800450c:	4a08      	ldr	r2, [pc, #32]	; (8004530 <USB_FlushRxFifo+0x3c>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d901      	bls.n	8004516 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e006      	b.n	8004524 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	f003 0310 	and.w	r3, r3, #16
 800451e:	2b10      	cmp	r3, #16
 8004520:	d0f1      	beq.n	8004506 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	3714      	adds	r7, #20
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr
 8004530:	00030d40 	.word	0x00030d40

08004534 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004534:	b480      	push	{r7}
 8004536:	b085      	sub	sp, #20
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	460b      	mov	r3, r1
 800453e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	78fb      	ldrb	r3, [r7, #3]
 800454e:	68f9      	ldr	r1, [r7, #12]
 8004550:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004554:	4313      	orrs	r3, r2
 8004556:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3714      	adds	r7, #20
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr

08004566 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004566:	b480      	push	{r7}
 8004568:	b087      	sub	sp, #28
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f003 0306 	and.w	r3, r3, #6
 800457e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d102      	bne.n	800458c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004586:	2300      	movs	r3, #0
 8004588:	75fb      	strb	r3, [r7, #23]
 800458a:	e00a      	b.n	80045a2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2b02      	cmp	r3, #2
 8004590:	d002      	beq.n	8004598 <USB_GetDevSpeed+0x32>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2b06      	cmp	r3, #6
 8004596:	d102      	bne.n	800459e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004598:	2302      	movs	r3, #2
 800459a:	75fb      	strb	r3, [r7, #23]
 800459c:	e001      	b.n	80045a2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800459e:	230f      	movs	r3, #15
 80045a0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80045a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	371c      	adds	r7, #28
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	785b      	ldrb	r3, [r3, #1]
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d13a      	bne.n	8004642 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045d2:	69da      	ldr	r2, [r3, #28]
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	f003 030f 	and.w	r3, r3, #15
 80045dc:	2101      	movs	r1, #1
 80045de:	fa01 f303 	lsl.w	r3, r1, r3
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	68f9      	ldr	r1, [r7, #12]
 80045e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045ea:	4313      	orrs	r3, r2
 80045ec:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	015a      	lsls	r2, r3, #5
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	4413      	add	r3, r2
 80045f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d155      	bne.n	80046b0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	015a      	lsls	r2, r3, #5
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	4413      	add	r3, r2
 800460c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	78db      	ldrb	r3, [r3, #3]
 800461e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004620:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	059b      	lsls	r3, r3, #22
 8004626:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004628:	4313      	orrs	r3, r2
 800462a:	68ba      	ldr	r2, [r7, #8]
 800462c:	0151      	lsls	r1, r2, #5
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	440a      	add	r2, r1
 8004632:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800463a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800463e:	6013      	str	r3, [r2, #0]
 8004640:	e036      	b.n	80046b0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004648:	69da      	ldr	r2, [r3, #28]
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	f003 030f 	and.w	r3, r3, #15
 8004652:	2101      	movs	r1, #1
 8004654:	fa01 f303 	lsl.w	r3, r1, r3
 8004658:	041b      	lsls	r3, r3, #16
 800465a:	68f9      	ldr	r1, [r7, #12]
 800465c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004660:	4313      	orrs	r3, r2
 8004662:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	015a      	lsls	r2, r3, #5
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	4413      	add	r3, r2
 800466c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d11a      	bne.n	80046b0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	015a      	lsls	r2, r3, #5
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	4413      	add	r3, r2
 8004682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	78db      	ldrb	r3, [r3, #3]
 8004694:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004696:	430b      	orrs	r3, r1
 8004698:	4313      	orrs	r3, r2
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	0151      	lsls	r1, r2, #5
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	440a      	add	r2, r1
 80046a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046ae:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3714      	adds	r7, #20
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
	...

080046c0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	785b      	ldrb	r3, [r3, #1]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d161      	bne.n	80047a0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	015a      	lsls	r2, r3, #5
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	4413      	add	r3, r2
 80046e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046f2:	d11f      	bne.n	8004734 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	015a      	lsls	r2, r3, #5
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	4413      	add	r3, r2
 80046fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68ba      	ldr	r2, [r7, #8]
 8004704:	0151      	lsls	r1, r2, #5
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	440a      	add	r2, r1
 800470a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800470e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004712:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	015a      	lsls	r2, r3, #5
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	4413      	add	r3, r2
 800471c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68ba      	ldr	r2, [r7, #8]
 8004724:	0151      	lsls	r1, r2, #5
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	440a      	add	r2, r1
 800472a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800472e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004732:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800473a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	f003 030f 	and.w	r3, r3, #15
 8004744:	2101      	movs	r1, #1
 8004746:	fa01 f303 	lsl.w	r3, r1, r3
 800474a:	b29b      	uxth	r3, r3
 800474c:	43db      	mvns	r3, r3
 800474e:	68f9      	ldr	r1, [r7, #12]
 8004750:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004754:	4013      	ands	r3, r2
 8004756:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800475e:	69da      	ldr	r2, [r3, #28]
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	f003 030f 	and.w	r3, r3, #15
 8004768:	2101      	movs	r1, #1
 800476a:	fa01 f303 	lsl.w	r3, r1, r3
 800476e:	b29b      	uxth	r3, r3
 8004770:	43db      	mvns	r3, r3
 8004772:	68f9      	ldr	r1, [r7, #12]
 8004774:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004778:	4013      	ands	r3, r2
 800477a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	015a      	lsls	r2, r3, #5
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	4413      	add	r3, r2
 8004784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	0159      	lsls	r1, r3, #5
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	440b      	add	r3, r1
 8004792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004796:	4619      	mov	r1, r3
 8004798:	4b35      	ldr	r3, [pc, #212]	; (8004870 <USB_DeactivateEndpoint+0x1b0>)
 800479a:	4013      	ands	r3, r2
 800479c:	600b      	str	r3, [r1, #0]
 800479e:	e060      	b.n	8004862 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	015a      	lsls	r2, r3, #5
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047b6:	d11f      	bne.n	80047f8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	015a      	lsls	r2, r3, #5
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	4413      	add	r3, r2
 80047c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68ba      	ldr	r2, [r7, #8]
 80047c8:	0151      	lsls	r1, r2, #5
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	440a      	add	r2, r1
 80047ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80047d6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	015a      	lsls	r2, r3, #5
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	4413      	add	r3, r2
 80047e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68ba      	ldr	r2, [r7, #8]
 80047e8:	0151      	lsls	r1, r2, #5
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	440a      	add	r2, r1
 80047ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	f003 030f 	and.w	r3, r3, #15
 8004808:	2101      	movs	r1, #1
 800480a:	fa01 f303 	lsl.w	r3, r1, r3
 800480e:	041b      	lsls	r3, r3, #16
 8004810:	43db      	mvns	r3, r3
 8004812:	68f9      	ldr	r1, [r7, #12]
 8004814:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004818:	4013      	ands	r3, r2
 800481a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004822:	69da      	ldr	r2, [r3, #28]
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	f003 030f 	and.w	r3, r3, #15
 800482c:	2101      	movs	r1, #1
 800482e:	fa01 f303 	lsl.w	r3, r1, r3
 8004832:	041b      	lsls	r3, r3, #16
 8004834:	43db      	mvns	r3, r3
 8004836:	68f9      	ldr	r1, [r7, #12]
 8004838:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800483c:	4013      	ands	r3, r2
 800483e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	015a      	lsls	r2, r3, #5
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	4413      	add	r3, r2
 8004848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	0159      	lsls	r1, r3, #5
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	440b      	add	r3, r1
 8004856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800485a:	4619      	mov	r1, r3
 800485c:	4b05      	ldr	r3, [pc, #20]	; (8004874 <USB_DeactivateEndpoint+0x1b4>)
 800485e:	4013      	ands	r3, r2
 8004860:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3714      	adds	r7, #20
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr
 8004870:	ec337800 	.word	0xec337800
 8004874:	eff37800 	.word	0xeff37800

08004878 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b08a      	sub	sp, #40	; 0x28
 800487c:	af02      	add	r7, sp, #8
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	4613      	mov	r3, r2
 8004884:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	785b      	ldrb	r3, [r3, #1]
 8004894:	2b01      	cmp	r3, #1
 8004896:	f040 815c 	bne.w	8004b52 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d132      	bne.n	8004908 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	015a      	lsls	r2, r3, #5
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	4413      	add	r3, r2
 80048aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	69ba      	ldr	r2, [r7, #24]
 80048b2:	0151      	lsls	r1, r2, #5
 80048b4:	69fa      	ldr	r2, [r7, #28]
 80048b6:	440a      	add	r2, r1
 80048b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80048c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80048c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	015a      	lsls	r2, r3, #5
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	4413      	add	r3, r2
 80048ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	0151      	lsls	r1, r2, #5
 80048d8:	69fa      	ldr	r2, [r7, #28]
 80048da:	440a      	add	r2, r1
 80048dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80048e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	015a      	lsls	r2, r3, #5
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	4413      	add	r3, r2
 80048ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	69ba      	ldr	r2, [r7, #24]
 80048f6:	0151      	lsls	r1, r2, #5
 80048f8:	69fa      	ldr	r2, [r7, #28]
 80048fa:	440a      	add	r2, r1
 80048fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004900:	0cdb      	lsrs	r3, r3, #19
 8004902:	04db      	lsls	r3, r3, #19
 8004904:	6113      	str	r3, [r2, #16]
 8004906:	e074      	b.n	80049f2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	015a      	lsls	r2, r3, #5
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	4413      	add	r3, r2
 8004910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	69ba      	ldr	r2, [r7, #24]
 8004918:	0151      	lsls	r1, r2, #5
 800491a:	69fa      	ldr	r2, [r7, #28]
 800491c:	440a      	add	r2, r1
 800491e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004922:	0cdb      	lsrs	r3, r3, #19
 8004924:	04db      	lsls	r3, r3, #19
 8004926:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	015a      	lsls	r2, r3, #5
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	4413      	add	r3, r2
 8004930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	69ba      	ldr	r2, [r7, #24]
 8004938:	0151      	lsls	r1, r2, #5
 800493a:	69fa      	ldr	r2, [r7, #28]
 800493c:	440a      	add	r2, r1
 800493e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004942:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004946:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800494a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	015a      	lsls	r2, r3, #5
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	4413      	add	r3, r2
 8004954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004958:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	6959      	ldr	r1, [r3, #20]
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	440b      	add	r3, r1
 8004964:	1e59      	subs	r1, r3, #1
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	fbb1 f3f3 	udiv	r3, r1, r3
 800496e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004970:	4b9d      	ldr	r3, [pc, #628]	; (8004be8 <USB_EPStartXfer+0x370>)
 8004972:	400b      	ands	r3, r1
 8004974:	69b9      	ldr	r1, [r7, #24]
 8004976:	0148      	lsls	r0, r1, #5
 8004978:	69f9      	ldr	r1, [r7, #28]
 800497a:	4401      	add	r1, r0
 800497c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004980:	4313      	orrs	r3, r2
 8004982:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	015a      	lsls	r2, r3, #5
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	4413      	add	r3, r2
 800498c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004990:	691a      	ldr	r2, [r3, #16]
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800499a:	69b9      	ldr	r1, [r7, #24]
 800499c:	0148      	lsls	r0, r1, #5
 800499e:	69f9      	ldr	r1, [r7, #28]
 80049a0:	4401      	add	r1, r0
 80049a2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80049a6:	4313      	orrs	r3, r2
 80049a8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	78db      	ldrb	r3, [r3, #3]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d11f      	bne.n	80049f2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	015a      	lsls	r2, r3, #5
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	4413      	add	r3, r2
 80049ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	69ba      	ldr	r2, [r7, #24]
 80049c2:	0151      	lsls	r1, r2, #5
 80049c4:	69fa      	ldr	r2, [r7, #28]
 80049c6:	440a      	add	r2, r1
 80049c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049cc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80049d0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	015a      	lsls	r2, r3, #5
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	4413      	add	r3, r2
 80049da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	69ba      	ldr	r2, [r7, #24]
 80049e2:	0151      	lsls	r1, r2, #5
 80049e4:	69fa      	ldr	r2, [r7, #28]
 80049e6:	440a      	add	r2, r1
 80049e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80049f0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80049f2:	79fb      	ldrb	r3, [r7, #7]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d14b      	bne.n	8004a90 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d009      	beq.n	8004a14 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	015a      	lsls	r2, r3, #5
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	4413      	add	r3, r2
 8004a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	78db      	ldrb	r3, [r3, #3]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d128      	bne.n	8004a6e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d110      	bne.n	8004a4e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	015a      	lsls	r2, r3, #5
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	4413      	add	r3, r2
 8004a34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	69ba      	ldr	r2, [r7, #24]
 8004a3c:	0151      	lsls	r1, r2, #5
 8004a3e:	69fa      	ldr	r2, [r7, #28]
 8004a40:	440a      	add	r2, r1
 8004a42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a46:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a4a:	6013      	str	r3, [r2, #0]
 8004a4c:	e00f      	b.n	8004a6e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	015a      	lsls	r2, r3, #5
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	4413      	add	r3, r2
 8004a56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	69ba      	ldr	r2, [r7, #24]
 8004a5e:	0151      	lsls	r1, r2, #5
 8004a60:	69fa      	ldr	r2, [r7, #28]
 8004a62:	440a      	add	r2, r1
 8004a64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a6c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	015a      	lsls	r2, r3, #5
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	4413      	add	r3, r2
 8004a76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	69ba      	ldr	r2, [r7, #24]
 8004a7e:	0151      	lsls	r1, r2, #5
 8004a80:	69fa      	ldr	r2, [r7, #28]
 8004a82:	440a      	add	r2, r1
 8004a84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a88:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a8c:	6013      	str	r3, [r2, #0]
 8004a8e:	e12f      	b.n	8004cf0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	015a      	lsls	r2, r3, #5
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	4413      	add	r3, r2
 8004a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	69ba      	ldr	r2, [r7, #24]
 8004aa0:	0151      	lsls	r1, r2, #5
 8004aa2:	69fa      	ldr	r2, [r7, #28]
 8004aa4:	440a      	add	r2, r1
 8004aa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aaa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004aae:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	78db      	ldrb	r3, [r3, #3]
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d015      	beq.n	8004ae4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	695b      	ldr	r3, [r3, #20]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f000 8117 	beq.w	8004cf0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ac8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	f003 030f 	and.w	r3, r3, #15
 8004ad2:	2101      	movs	r1, #1
 8004ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ad8:	69f9      	ldr	r1, [r7, #28]
 8004ada:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	634b      	str	r3, [r1, #52]	; 0x34
 8004ae2:	e105      	b.n	8004cf0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d110      	bne.n	8004b16 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	015a      	lsls	r2, r3, #5
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	4413      	add	r3, r2
 8004afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	69ba      	ldr	r2, [r7, #24]
 8004b04:	0151      	lsls	r1, r2, #5
 8004b06:	69fa      	ldr	r2, [r7, #28]
 8004b08:	440a      	add	r2, r1
 8004b0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b12:	6013      	str	r3, [r2, #0]
 8004b14:	e00f      	b.n	8004b36 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	015a      	lsls	r2, r3, #5
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	69ba      	ldr	r2, [r7, #24]
 8004b26:	0151      	lsls	r1, r2, #5
 8004b28:	69fa      	ldr	r2, [r7, #28]
 8004b2a:	440a      	add	r2, r1
 8004b2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b34:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	68d9      	ldr	r1, [r3, #12]
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	781a      	ldrb	r2, [r3, #0]
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	b298      	uxth	r0, r3
 8004b44:	79fb      	ldrb	r3, [r7, #7]
 8004b46:	9300      	str	r3, [sp, #0]
 8004b48:	4603      	mov	r3, r0
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f000 fa2b 	bl	8004fa6 <USB_WritePacket>
 8004b50:	e0ce      	b.n	8004cf0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	015a      	lsls	r2, r3, #5
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	4413      	add	r3, r2
 8004b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	69ba      	ldr	r2, [r7, #24]
 8004b62:	0151      	lsls	r1, r2, #5
 8004b64:	69fa      	ldr	r2, [r7, #28]
 8004b66:	440a      	add	r2, r1
 8004b68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b6c:	0cdb      	lsrs	r3, r3, #19
 8004b6e:	04db      	lsls	r3, r3, #19
 8004b70:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	015a      	lsls	r2, r3, #5
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	4413      	add	r3, r2
 8004b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	0151      	lsls	r1, r2, #5
 8004b84:	69fa      	ldr	r2, [r7, #28]
 8004b86:	440a      	add	r2, r1
 8004b88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b8c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b90:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b94:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d126      	bne.n	8004bec <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	015a      	lsls	r2, r3, #5
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004baa:	691a      	ldr	r2, [r3, #16]
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bb4:	69b9      	ldr	r1, [r7, #24]
 8004bb6:	0148      	lsls	r0, r1, #5
 8004bb8:	69f9      	ldr	r1, [r7, #28]
 8004bba:	4401      	add	r1, r0
 8004bbc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	015a      	lsls	r2, r3, #5
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	4413      	add	r3, r2
 8004bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	69ba      	ldr	r2, [r7, #24]
 8004bd4:	0151      	lsls	r1, r2, #5
 8004bd6:	69fa      	ldr	r2, [r7, #28]
 8004bd8:	440a      	add	r2, r1
 8004bda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bde:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004be2:	6113      	str	r3, [r2, #16]
 8004be4:	e036      	b.n	8004c54 <USB_EPStartXfer+0x3dc>
 8004be6:	bf00      	nop
 8004be8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	695a      	ldr	r2, [r3, #20]
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	1e5a      	subs	r2, r3, #1
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c00:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	015a      	lsls	r2, r3, #5
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	4413      	add	r3, r2
 8004c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c0e:	691a      	ldr	r2, [r3, #16]
 8004c10:	8afb      	ldrh	r3, [r7, #22]
 8004c12:	04d9      	lsls	r1, r3, #19
 8004c14:	4b39      	ldr	r3, [pc, #228]	; (8004cfc <USB_EPStartXfer+0x484>)
 8004c16:	400b      	ands	r3, r1
 8004c18:	69b9      	ldr	r1, [r7, #24]
 8004c1a:	0148      	lsls	r0, r1, #5
 8004c1c:	69f9      	ldr	r1, [r7, #28]
 8004c1e:	4401      	add	r1, r0
 8004c20:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c24:	4313      	orrs	r3, r2
 8004c26:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	015a      	lsls	r2, r3, #5
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	4413      	add	r3, r2
 8004c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c34:	691a      	ldr	r2, [r3, #16]
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	8af9      	ldrh	r1, [r7, #22]
 8004c3c:	fb01 f303 	mul.w	r3, r1, r3
 8004c40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c44:	69b9      	ldr	r1, [r7, #24]
 8004c46:	0148      	lsls	r0, r1, #5
 8004c48:	69f9      	ldr	r1, [r7, #28]
 8004c4a:	4401      	add	r1, r0
 8004c4c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c50:	4313      	orrs	r3, r2
 8004c52:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004c54:	79fb      	ldrb	r3, [r7, #7]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d10d      	bne.n	8004c76 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d009      	beq.n	8004c76 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	68d9      	ldr	r1, [r3, #12]
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	015a      	lsls	r2, r3, #5
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c72:	460a      	mov	r2, r1
 8004c74:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	78db      	ldrb	r3, [r3, #3]
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d128      	bne.n	8004cd0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d110      	bne.n	8004cb0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	015a      	lsls	r2, r3, #5
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	4413      	add	r3, r2
 8004c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	69ba      	ldr	r2, [r7, #24]
 8004c9e:	0151      	lsls	r1, r2, #5
 8004ca0:	69fa      	ldr	r2, [r7, #28]
 8004ca2:	440a      	add	r2, r1
 8004ca4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ca8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004cac:	6013      	str	r3, [r2, #0]
 8004cae:	e00f      	b.n	8004cd0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	015a      	lsls	r2, r3, #5
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	69ba      	ldr	r2, [r7, #24]
 8004cc0:	0151      	lsls	r1, r2, #5
 8004cc2:	69fa      	ldr	r2, [r7, #28]
 8004cc4:	440a      	add	r2, r1
 8004cc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cce:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	015a      	lsls	r2, r3, #5
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	4413      	add	r3, r2
 8004cd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	69ba      	ldr	r2, [r7, #24]
 8004ce0:	0151      	lsls	r1, r2, #5
 8004ce2:	69fa      	ldr	r2, [r7, #28]
 8004ce4:	440a      	add	r2, r1
 8004ce6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004cee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3720      	adds	r7, #32
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	1ff80000 	.word	0x1ff80000

08004d00 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b087      	sub	sp, #28
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	785b      	ldrb	r3, [r3, #1]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	f040 80cd 	bne.w	8004ebc <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d132      	bne.n	8004d90 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	015a      	lsls	r2, r3, #5
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	4413      	add	r3, r2
 8004d32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	693a      	ldr	r2, [r7, #16]
 8004d3a:	0151      	lsls	r1, r2, #5
 8004d3c:	697a      	ldr	r2, [r7, #20]
 8004d3e:	440a      	add	r2, r1
 8004d40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d44:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d48:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d4c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	015a      	lsls	r2, r3, #5
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	4413      	add	r3, r2
 8004d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	693a      	ldr	r2, [r7, #16]
 8004d5e:	0151      	lsls	r1, r2, #5
 8004d60:	697a      	ldr	r2, [r7, #20]
 8004d62:	440a      	add	r2, r1
 8004d64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d6c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	015a      	lsls	r2, r3, #5
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	4413      	add	r3, r2
 8004d76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	0151      	lsls	r1, r2, #5
 8004d80:	697a      	ldr	r2, [r7, #20]
 8004d82:	440a      	add	r2, r1
 8004d84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d88:	0cdb      	lsrs	r3, r3, #19
 8004d8a:	04db      	lsls	r3, r3, #19
 8004d8c:	6113      	str	r3, [r2, #16]
 8004d8e:	e04e      	b.n	8004e2e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	015a      	lsls	r2, r3, #5
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	4413      	add	r3, r2
 8004d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	693a      	ldr	r2, [r7, #16]
 8004da0:	0151      	lsls	r1, r2, #5
 8004da2:	697a      	ldr	r2, [r7, #20]
 8004da4:	440a      	add	r2, r1
 8004da6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004daa:	0cdb      	lsrs	r3, r3, #19
 8004dac:	04db      	lsls	r3, r3, #19
 8004dae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	015a      	lsls	r2, r3, #5
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	4413      	add	r3, r2
 8004db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	693a      	ldr	r2, [r7, #16]
 8004dc0:	0151      	lsls	r1, r2, #5
 8004dc2:	697a      	ldr	r2, [r7, #20]
 8004dc4:	440a      	add	r2, r1
 8004dc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004dce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004dd2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	695a      	ldr	r2, [r3, #20]
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d903      	bls.n	8004de8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	689a      	ldr	r2, [r3, #8]
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	015a      	lsls	r2, r3, #5
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	4413      	add	r3, r2
 8004df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	693a      	ldr	r2, [r7, #16]
 8004df8:	0151      	lsls	r1, r2, #5
 8004dfa:	697a      	ldr	r2, [r7, #20]
 8004dfc:	440a      	add	r2, r1
 8004dfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e02:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e06:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	015a      	lsls	r2, r3, #5
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	4413      	add	r3, r2
 8004e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e14:	691a      	ldr	r2, [r3, #16]
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e1e:	6939      	ldr	r1, [r7, #16]
 8004e20:	0148      	lsls	r0, r1, #5
 8004e22:	6979      	ldr	r1, [r7, #20]
 8004e24:	4401      	add	r1, r0
 8004e26:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004e2e:	79fb      	ldrb	r3, [r7, #7]
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d11e      	bne.n	8004e72 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	691b      	ldr	r3, [r3, #16]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d009      	beq.n	8004e50 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	015a      	lsls	r2, r3, #5
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	4413      	add	r3, r2
 8004e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e48:	461a      	mov	r2, r3
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	015a      	lsls	r2, r3, #5
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	4413      	add	r3, r2
 8004e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	693a      	ldr	r2, [r7, #16]
 8004e60:	0151      	lsls	r1, r2, #5
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	440a      	add	r2, r1
 8004e66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e6a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e6e:	6013      	str	r3, [r2, #0]
 8004e70:	e092      	b.n	8004f98 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	015a      	lsls	r2, r3, #5
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	4413      	add	r3, r2
 8004e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	693a      	ldr	r2, [r7, #16]
 8004e82:	0151      	lsls	r1, r2, #5
 8004e84:	697a      	ldr	r2, [r7, #20]
 8004e86:	440a      	add	r2, r1
 8004e88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e8c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e90:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d07e      	beq.n	8004f98 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ea0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	f003 030f 	and.w	r3, r3, #15
 8004eaa:	2101      	movs	r1, #1
 8004eac:	fa01 f303 	lsl.w	r3, r1, r3
 8004eb0:	6979      	ldr	r1, [r7, #20]
 8004eb2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	634b      	str	r3, [r1, #52]	; 0x34
 8004eba:	e06d      	b.n	8004f98 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	015a      	lsls	r2, r3, #5
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	0151      	lsls	r1, r2, #5
 8004ece:	697a      	ldr	r2, [r7, #20]
 8004ed0:	440a      	add	r2, r1
 8004ed2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ed6:	0cdb      	lsrs	r3, r3, #19
 8004ed8:	04db      	lsls	r3, r3, #19
 8004eda:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	015a      	lsls	r2, r3, #5
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	693a      	ldr	r2, [r7, #16]
 8004eec:	0151      	lsls	r1, r2, #5
 8004eee:	697a      	ldr	r2, [r7, #20]
 8004ef0:	440a      	add	r2, r1
 8004ef2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ef6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004efa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004efe:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	695b      	ldr	r3, [r3, #20]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d003      	beq.n	8004f10 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	689a      	ldr	r2, [r3, #8]
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	015a      	lsls	r2, r3, #5
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	4413      	add	r3, r2
 8004f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	693a      	ldr	r2, [r7, #16]
 8004f20:	0151      	lsls	r1, r2, #5
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	440a      	add	r2, r1
 8004f26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f2e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	015a      	lsls	r2, r3, #5
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	4413      	add	r3, r2
 8004f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f3c:	691a      	ldr	r2, [r3, #16]
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f46:	6939      	ldr	r1, [r7, #16]
 8004f48:	0148      	lsls	r0, r1, #5
 8004f4a:	6979      	ldr	r1, [r7, #20]
 8004f4c:	4401      	add	r1, r0
 8004f4e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004f52:	4313      	orrs	r3, r2
 8004f54:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004f56:	79fb      	ldrb	r3, [r7, #7]
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d10d      	bne.n	8004f78 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d009      	beq.n	8004f78 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	68d9      	ldr	r1, [r3, #12]
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	015a      	lsls	r2, r3, #5
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	4413      	add	r3, r2
 8004f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f74:	460a      	mov	r2, r1
 8004f76:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	015a      	lsls	r2, r3, #5
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	4413      	add	r3, r2
 8004f80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	693a      	ldr	r2, [r7, #16]
 8004f88:	0151      	lsls	r1, r2, #5
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	440a      	add	r2, r1
 8004f8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f92:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f96:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	371c      	adds	r7, #28
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr

08004fa6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	b089      	sub	sp, #36	; 0x24
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	60f8      	str	r0, [r7, #12]
 8004fae:	60b9      	str	r1, [r7, #8]
 8004fb0:	4611      	mov	r1, r2
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	71fb      	strb	r3, [r7, #7]
 8004fb8:	4613      	mov	r3, r2
 8004fba:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004fc4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d123      	bne.n	8005014 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004fcc:	88bb      	ldrh	r3, [r7, #4]
 8004fce:	3303      	adds	r3, #3
 8004fd0:	089b      	lsrs	r3, r3, #2
 8004fd2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	61bb      	str	r3, [r7, #24]
 8004fd8:	e018      	b.n	800500c <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004fda:	79fb      	ldrb	r3, [r7, #7]
 8004fdc:	031a      	lsls	r2, r3, #12
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	3301      	adds	r3, #1
 8005004:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	3301      	adds	r3, #1
 800500a:	61bb      	str	r3, [r7, #24]
 800500c:	69ba      	ldr	r2, [r7, #24]
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	429a      	cmp	r2, r3
 8005012:	d3e2      	bcc.n	8004fda <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3724      	adds	r7, #36	; 0x24
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr

08005022 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005022:	b480      	push	{r7}
 8005024:	b08b      	sub	sp, #44	; 0x2c
 8005026:	af00      	add	r7, sp, #0
 8005028:	60f8      	str	r0, [r7, #12]
 800502a:	60b9      	str	r1, [r7, #8]
 800502c:	4613      	mov	r3, r2
 800502e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005038:	88fb      	ldrh	r3, [r7, #6]
 800503a:	089b      	lsrs	r3, r3, #2
 800503c:	b29b      	uxth	r3, r3
 800503e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005040:	88fb      	ldrh	r3, [r7, #6]
 8005042:	f003 0303 	and.w	r3, r3, #3
 8005046:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005048:	2300      	movs	r3, #0
 800504a:	623b      	str	r3, [r7, #32]
 800504c:	e014      	b.n	8005078 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005058:	601a      	str	r2, [r3, #0]
    pDest++;
 800505a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505c:	3301      	adds	r3, #1
 800505e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005062:	3301      	adds	r3, #1
 8005064:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005068:	3301      	adds	r3, #1
 800506a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800506c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506e:	3301      	adds	r3, #1
 8005070:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005072:	6a3b      	ldr	r3, [r7, #32]
 8005074:	3301      	adds	r3, #1
 8005076:	623b      	str	r3, [r7, #32]
 8005078:	6a3a      	ldr	r2, [r7, #32]
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	429a      	cmp	r2, r3
 800507e:	d3e6      	bcc.n	800504e <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005080:	8bfb      	ldrh	r3, [r7, #30]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d01e      	beq.n	80050c4 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005086:	2300      	movs	r3, #0
 8005088:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005090:	461a      	mov	r2, r3
 8005092:	f107 0310 	add.w	r3, r7, #16
 8005096:	6812      	ldr	r2, [r2, #0]
 8005098:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800509a:	693a      	ldr	r2, [r7, #16]
 800509c:	6a3b      	ldr	r3, [r7, #32]
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	00db      	lsls	r3, r3, #3
 80050a2:	fa22 f303 	lsr.w	r3, r2, r3
 80050a6:	b2da      	uxtb	r2, r3
 80050a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050aa:	701a      	strb	r2, [r3, #0]
      i++;
 80050ac:	6a3b      	ldr	r3, [r7, #32]
 80050ae:	3301      	adds	r3, #1
 80050b0:	623b      	str	r3, [r7, #32]
      pDest++;
 80050b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b4:	3301      	adds	r3, #1
 80050b6:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80050b8:	8bfb      	ldrh	r3, [r7, #30]
 80050ba:	3b01      	subs	r3, #1
 80050bc:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80050be:	8bfb      	ldrh	r3, [r7, #30]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d1ea      	bne.n	800509a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80050c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	372c      	adds	r7, #44	; 0x2c
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr

080050d2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80050d2:	b480      	push	{r7}
 80050d4:	b085      	sub	sp, #20
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
 80050da:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	785b      	ldrb	r3, [r3, #1]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d12c      	bne.n	8005148 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	015a      	lsls	r2, r3, #5
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	4413      	add	r3, r2
 80050f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	db12      	blt.n	8005126 <USB_EPSetStall+0x54>
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d00f      	beq.n	8005126 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	015a      	lsls	r2, r3, #5
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	4413      	add	r3, r2
 800510e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68ba      	ldr	r2, [r7, #8]
 8005116:	0151      	lsls	r1, r2, #5
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	440a      	add	r2, r1
 800511c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005120:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005124:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	015a      	lsls	r2, r3, #5
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	4413      	add	r3, r2
 800512e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68ba      	ldr	r2, [r7, #8]
 8005136:	0151      	lsls	r1, r2, #5
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	440a      	add	r2, r1
 800513c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005140:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005144:	6013      	str	r3, [r2, #0]
 8005146:	e02b      	b.n	80051a0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	015a      	lsls	r2, r3, #5
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	4413      	add	r3, r2
 8005150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	db12      	blt.n	8005180 <USB_EPSetStall+0xae>
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00f      	beq.n	8005180 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	015a      	lsls	r2, r3, #5
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	4413      	add	r3, r2
 8005168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68ba      	ldr	r2, [r7, #8]
 8005170:	0151      	lsls	r1, r2, #5
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	440a      	add	r2, r1
 8005176:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800517a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800517e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	015a      	lsls	r2, r3, #5
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	4413      	add	r3, r2
 8005188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68ba      	ldr	r2, [r7, #8]
 8005190:	0151      	lsls	r1, r2, #5
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	440a      	add	r2, r1
 8005196:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800519a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800519e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3714      	adds	r7, #20
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr

080051ae <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80051ae:	b480      	push	{r7}
 80051b0:	b085      	sub	sp, #20
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
 80051b6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	785b      	ldrb	r3, [r3, #1]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d128      	bne.n	800521c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	015a      	lsls	r2, r3, #5
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	4413      	add	r3, r2
 80051d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68ba      	ldr	r2, [r7, #8]
 80051da:	0151      	lsls	r1, r2, #5
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	440a      	add	r2, r1
 80051e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80051e8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	78db      	ldrb	r3, [r3, #3]
 80051ee:	2b03      	cmp	r3, #3
 80051f0:	d003      	beq.n	80051fa <USB_EPClearStall+0x4c>
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	78db      	ldrb	r3, [r3, #3]
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d138      	bne.n	800526c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	015a      	lsls	r2, r3, #5
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	4413      	add	r3, r2
 8005202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	0151      	lsls	r1, r2, #5
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	440a      	add	r2, r1
 8005210:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005218:	6013      	str	r3, [r2, #0]
 800521a:	e027      	b.n	800526c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	015a      	lsls	r2, r3, #5
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	4413      	add	r3, r2
 8005224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68ba      	ldr	r2, [r7, #8]
 800522c:	0151      	lsls	r1, r2, #5
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	440a      	add	r2, r1
 8005232:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005236:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800523a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	78db      	ldrb	r3, [r3, #3]
 8005240:	2b03      	cmp	r3, #3
 8005242:	d003      	beq.n	800524c <USB_EPClearStall+0x9e>
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	78db      	ldrb	r3, [r3, #3]
 8005248:	2b02      	cmp	r3, #2
 800524a:	d10f      	bne.n	800526c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	015a      	lsls	r2, r3, #5
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	4413      	add	r3, r2
 8005254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68ba      	ldr	r2, [r7, #8]
 800525c:	0151      	lsls	r1, r2, #5
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	440a      	add	r2, r1
 8005262:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800526a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3714      	adds	r7, #20
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr

0800527a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800527a:	b480      	push	{r7}
 800527c:	b085      	sub	sp, #20
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
 8005282:	460b      	mov	r3, r1
 8005284:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005298:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800529c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	78fb      	ldrb	r3, [r7, #3]
 80052a8:	011b      	lsls	r3, r3, #4
 80052aa:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80052ae:	68f9      	ldr	r1, [r7, #12]
 80052b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052b4:	4313      	orrs	r3, r2
 80052b6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3714      	adds	r7, #20
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr

080052c6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80052c6:	b480      	push	{r7}
 80052c8:	b085      	sub	sp, #20
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80052e0:	f023 0303 	bic.w	r3, r3, #3
 80052e4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052f4:	f023 0302 	bic.w	r3, r3, #2
 80052f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3714      	adds	r7, #20
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005308:	b480      	push	{r7}
 800530a:	b085      	sub	sp, #20
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005322:	f023 0303 	bic.w	r3, r3, #3
 8005326:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005336:	f043 0302 	orr.w	r3, r3, #2
 800533a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3714      	adds	r7, #20
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr

0800534a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800534a:	b480      	push	{r7}
 800534c:	b085      	sub	sp, #20
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	699b      	ldr	r3, [r3, #24]
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	4013      	ands	r3, r2
 8005360:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005362:	68fb      	ldr	r3, [r7, #12]
}
 8005364:	4618      	mov	r0, r3
 8005366:	3714      	adds	r7, #20
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005382:	699b      	ldr	r3, [r3, #24]
 8005384:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800538c:	69db      	ldr	r3, [r3, #28]
 800538e:	68ba      	ldr	r2, [r7, #8]
 8005390:	4013      	ands	r3, r2
 8005392:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	0c1b      	lsrs	r3, r3, #16
}
 8005398:	4618      	mov	r0, r3
 800539a:	3714      	adds	r7, #20
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053b6:	699b      	ldr	r3, [r3, #24]
 80053b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053c0:	69db      	ldr	r3, [r3, #28]
 80053c2:	68ba      	ldr	r2, [r7, #8]
 80053c4:	4013      	ands	r3, r2
 80053c6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	b29b      	uxth	r3, r3
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3714      	adds	r7, #20
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80053d8:	b480      	push	{r7}
 80053da:	b085      	sub	sp, #20
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	460b      	mov	r3, r1
 80053e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80053e8:	78fb      	ldrb	r3, [r7, #3]
 80053ea:	015a      	lsls	r2, r3, #5
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	4413      	add	r3, r2
 80053f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053fe:	695b      	ldr	r3, [r3, #20]
 8005400:	68ba      	ldr	r2, [r7, #8]
 8005402:	4013      	ands	r3, r2
 8005404:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005406:	68bb      	ldr	r3, [r7, #8]
}
 8005408:	4618      	mov	r0, r3
 800540a:	3714      	adds	r7, #20
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005414:	b480      	push	{r7}
 8005416:	b087      	sub	sp, #28
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	460b      	mov	r3, r1
 800541e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005436:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005438:	78fb      	ldrb	r3, [r7, #3]
 800543a:	f003 030f 	and.w	r3, r3, #15
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	fa22 f303 	lsr.w	r3, r2, r3
 8005444:	01db      	lsls	r3, r3, #7
 8005446:	b2db      	uxtb	r3, r3
 8005448:	693a      	ldr	r2, [r7, #16]
 800544a:	4313      	orrs	r3, r2
 800544c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800544e:	78fb      	ldrb	r3, [r7, #3]
 8005450:	015a      	lsls	r2, r3, #5
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	4413      	add	r3, r2
 8005456:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	693a      	ldr	r2, [r7, #16]
 800545e:	4013      	ands	r3, r2
 8005460:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005462:	68bb      	ldr	r3, [r7, #8]
}
 8005464:	4618      	mov	r0, r3
 8005466:	371c      	adds	r7, #28
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	695b      	ldr	r3, [r3, #20]
 800547c:	f003 0301 	and.w	r3, r3, #1
}
 8005480:	4618      	mov	r0, r3
 8005482:	370c      	adds	r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800548c:	b480      	push	{r7}
 800548e:	b085      	sub	sp, #20
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054a6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80054aa:	f023 0307 	bic.w	r3, r3, #7
 80054ae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054c2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3714      	adds	r7, #20
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
	...

080054d4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b087      	sub	sp, #28
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	460b      	mov	r3, r1
 80054de:	607a      	str	r2, [r7, #4]
 80054e0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	333c      	adds	r3, #60	; 0x3c
 80054ea:	3304      	adds	r3, #4
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	4a26      	ldr	r2, [pc, #152]	; (800558c <USB_EP0_OutStart+0xb8>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d90a      	bls.n	800550e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005504:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005508:	d101      	bne.n	800550e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800550a:	2300      	movs	r3, #0
 800550c:	e037      	b.n	800557e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005514:	461a      	mov	r2, r3
 8005516:	2300      	movs	r3, #0
 8005518:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	697a      	ldr	r2, [r7, #20]
 8005524:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005528:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800552c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800553c:	f043 0318 	orr.w	r3, r3, #24
 8005540:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	697a      	ldr	r2, [r7, #20]
 800554c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005550:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005554:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005556:	7afb      	ldrb	r3, [r7, #11]
 8005558:	2b01      	cmp	r3, #1
 800555a:	d10f      	bne.n	800557c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005562:	461a      	mov	r2, r3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	697a      	ldr	r2, [r7, #20]
 8005572:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005576:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800557a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	371c      	adds	r7, #28
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr
 800558a:	bf00      	nop
 800558c:	4f54300a 	.word	0x4f54300a

08005590 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005590:	b480      	push	{r7}
 8005592:	b085      	sub	sp, #20
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005598:	2300      	movs	r3, #0
 800559a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	3301      	adds	r3, #1
 80055a0:	60fb      	str	r3, [r7, #12]
 80055a2:	4a13      	ldr	r2, [pc, #76]	; (80055f0 <USB_CoreReset+0x60>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d901      	bls.n	80055ac <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80055a8:	2303      	movs	r3, #3
 80055aa:	e01a      	b.n	80055e2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	daf3      	bge.n	800559c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80055b4:	2300      	movs	r3, #0
 80055b6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	f043 0201 	orr.w	r2, r3, #1
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	3301      	adds	r3, #1
 80055c8:	60fb      	str	r3, [r7, #12]
 80055ca:	4a09      	ldr	r2, [pc, #36]	; (80055f0 <USB_CoreReset+0x60>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d901      	bls.n	80055d4 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e006      	b.n	80055e2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	f003 0301 	and.w	r3, r3, #1
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d0f1      	beq.n	80055c4 <USB_CoreReset+0x34>

  return HAL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3714      	adds	r7, #20
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	00030d40 	.word	0x00030d40

080055f4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	460b      	mov	r3, r1
 80055fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005600:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005604:	f002 f936 	bl	8007874 <USBD_static_malloc>
 8005608:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d105      	bne.n	800561c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005618:	2302      	movs	r3, #2
 800561a:	e066      	b.n	80056ea <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	7c1b      	ldrb	r3, [r3, #16]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d119      	bne.n	8005660 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800562c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005630:	2202      	movs	r2, #2
 8005632:	2181      	movs	r1, #129	; 0x81
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f001 ffac 	bl	8007592 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2201      	movs	r2, #1
 800563e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005640:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005644:	2202      	movs	r2, #2
 8005646:	2101      	movs	r1, #1
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f001 ffa2 	bl	8007592 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2201      	movs	r2, #1
 8005652:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2210      	movs	r2, #16
 800565a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800565e:	e016      	b.n	800568e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005660:	2340      	movs	r3, #64	; 0x40
 8005662:	2202      	movs	r2, #2
 8005664:	2181      	movs	r1, #129	; 0x81
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f001 ff93 	bl	8007592 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005672:	2340      	movs	r3, #64	; 0x40
 8005674:	2202      	movs	r2, #2
 8005676:	2101      	movs	r1, #1
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f001 ff8a 	bl	8007592 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2201      	movs	r2, #1
 8005682:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2210      	movs	r2, #16
 800568a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800568e:	2308      	movs	r3, #8
 8005690:	2203      	movs	r2, #3
 8005692:	2182      	movs	r1, #130	; 0x82
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f001 ff7c 	bl	8007592 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2201      	movs	r2, #1
 800569e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	7c1b      	ldrb	r3, [r3, #16]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d109      	bne.n	80056d8 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80056ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056ce:	2101      	movs	r1, #1
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f002 f84d 	bl	8007770 <USBD_LL_PrepareReceive>
 80056d6:	e007      	b.n	80056e8 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80056de:	2340      	movs	r3, #64	; 0x40
 80056e0:	2101      	movs	r1, #1
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f002 f844 	bl	8007770 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3710      	adds	r7, #16
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}

080056f2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80056f2:	b580      	push	{r7, lr}
 80056f4:	b082      	sub	sp, #8
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
 80056fa:	460b      	mov	r3, r1
 80056fc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80056fe:	2181      	movs	r1, #129	; 0x81
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f001 ff6c 	bl	80075de <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800570c:	2101      	movs	r1, #1
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f001 ff65 	bl	80075de <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800571c:	2182      	movs	r1, #130	; 0x82
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f001 ff5d 	bl	80075de <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800573a:	2b00      	cmp	r3, #0
 800573c:	d00e      	beq.n	800575c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800574e:	4618      	mov	r0, r3
 8005750:	f002 f89e 	bl	8007890 <USBD_static_free>
    pdev->pClassData = NULL;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3708      	adds	r7, #8
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
	...

08005768 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b086      	sub	sp, #24
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005778:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800577a:	2300      	movs	r3, #0
 800577c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800577e:	2300      	movs	r3, #0
 8005780:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005782:	2300      	movs	r3, #0
 8005784:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d101      	bne.n	8005790 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800578c:	2303      	movs	r3, #3
 800578e:	e0af      	b.n	80058f0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005798:	2b00      	cmp	r3, #0
 800579a:	d03f      	beq.n	800581c <USBD_CDC_Setup+0xb4>
 800579c:	2b20      	cmp	r3, #32
 800579e:	f040 809f 	bne.w	80058e0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	88db      	ldrh	r3, [r3, #6]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d02e      	beq.n	8005808 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	b25b      	sxtb	r3, r3
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	da16      	bge.n	80057e2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	683a      	ldr	r2, [r7, #0]
 80057be:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80057c0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80057c2:	683a      	ldr	r2, [r7, #0]
 80057c4:	88d2      	ldrh	r2, [r2, #6]
 80057c6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	88db      	ldrh	r3, [r3, #6]
 80057cc:	2b07      	cmp	r3, #7
 80057ce:	bf28      	it	cs
 80057d0:	2307      	movcs	r3, #7
 80057d2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	89fa      	ldrh	r2, [r7, #14]
 80057d8:	4619      	mov	r1, r3
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f001 fb43 	bl	8006e66 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80057e0:	e085      	b.n	80058ee <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	785a      	ldrb	r2, [r3, #1]
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	88db      	ldrh	r3, [r3, #6]
 80057f0:	b2da      	uxtb	r2, r3
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80057f8:	6939      	ldr	r1, [r7, #16]
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	88db      	ldrh	r3, [r3, #6]
 80057fe:	461a      	mov	r2, r3
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f001 fb5c 	bl	8006ebe <USBD_CtlPrepareRx>
      break;
 8005806:	e072      	b.n	80058ee <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	683a      	ldr	r2, [r7, #0]
 8005812:	7850      	ldrb	r0, [r2, #1]
 8005814:	2200      	movs	r2, #0
 8005816:	6839      	ldr	r1, [r7, #0]
 8005818:	4798      	blx	r3
      break;
 800581a:	e068      	b.n	80058ee <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	785b      	ldrb	r3, [r3, #1]
 8005820:	2b0b      	cmp	r3, #11
 8005822:	d852      	bhi.n	80058ca <USBD_CDC_Setup+0x162>
 8005824:	a201      	add	r2, pc, #4	; (adr r2, 800582c <USBD_CDC_Setup+0xc4>)
 8005826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800582a:	bf00      	nop
 800582c:	0800585d 	.word	0x0800585d
 8005830:	080058d9 	.word	0x080058d9
 8005834:	080058cb 	.word	0x080058cb
 8005838:	080058cb 	.word	0x080058cb
 800583c:	080058cb 	.word	0x080058cb
 8005840:	080058cb 	.word	0x080058cb
 8005844:	080058cb 	.word	0x080058cb
 8005848:	080058cb 	.word	0x080058cb
 800584c:	080058cb 	.word	0x080058cb
 8005850:	080058cb 	.word	0x080058cb
 8005854:	08005887 	.word	0x08005887
 8005858:	080058b1 	.word	0x080058b1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005862:	b2db      	uxtb	r3, r3
 8005864:	2b03      	cmp	r3, #3
 8005866:	d107      	bne.n	8005878 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005868:	f107 030a 	add.w	r3, r7, #10
 800586c:	2202      	movs	r2, #2
 800586e:	4619      	mov	r1, r3
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f001 faf8 	bl	8006e66 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005876:	e032      	b.n	80058de <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005878:	6839      	ldr	r1, [r7, #0]
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f001 fa82 	bl	8006d84 <USBD_CtlError>
            ret = USBD_FAIL;
 8005880:	2303      	movs	r3, #3
 8005882:	75fb      	strb	r3, [r7, #23]
          break;
 8005884:	e02b      	b.n	80058de <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800588c:	b2db      	uxtb	r3, r3
 800588e:	2b03      	cmp	r3, #3
 8005890:	d107      	bne.n	80058a2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005892:	f107 030d 	add.w	r3, r7, #13
 8005896:	2201      	movs	r2, #1
 8005898:	4619      	mov	r1, r3
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f001 fae3 	bl	8006e66 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80058a0:	e01d      	b.n	80058de <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80058a2:	6839      	ldr	r1, [r7, #0]
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f001 fa6d 	bl	8006d84 <USBD_CtlError>
            ret = USBD_FAIL;
 80058aa:	2303      	movs	r3, #3
 80058ac:	75fb      	strb	r3, [r7, #23]
          break;
 80058ae:	e016      	b.n	80058de <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	2b03      	cmp	r3, #3
 80058ba:	d00f      	beq.n	80058dc <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80058bc:	6839      	ldr	r1, [r7, #0]
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f001 fa60 	bl	8006d84 <USBD_CtlError>
            ret = USBD_FAIL;
 80058c4:	2303      	movs	r3, #3
 80058c6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80058c8:	e008      	b.n	80058dc <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80058ca:	6839      	ldr	r1, [r7, #0]
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f001 fa59 	bl	8006d84 <USBD_CtlError>
          ret = USBD_FAIL;
 80058d2:	2303      	movs	r3, #3
 80058d4:	75fb      	strb	r3, [r7, #23]
          break;
 80058d6:	e002      	b.n	80058de <USBD_CDC_Setup+0x176>
          break;
 80058d8:	bf00      	nop
 80058da:	e008      	b.n	80058ee <USBD_CDC_Setup+0x186>
          break;
 80058dc:	bf00      	nop
      }
      break;
 80058de:	e006      	b.n	80058ee <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80058e0:	6839      	ldr	r1, [r7, #0]
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f001 fa4e 	bl	8006d84 <USBD_CtlError>
      ret = USBD_FAIL;
 80058e8:	2303      	movs	r3, #3
 80058ea:	75fb      	strb	r3, [r7, #23]
      break;
 80058ec:	bf00      	nop
  }

  return (uint8_t)ret;
 80058ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3718      	adds	r7, #24
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	460b      	mov	r3, r1
 8005902:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800590a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005912:	2b00      	cmp	r3, #0
 8005914:	d101      	bne.n	800591a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005916:	2303      	movs	r3, #3
 8005918:	e04f      	b.n	80059ba <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005920:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005922:	78fa      	ldrb	r2, [r7, #3]
 8005924:	6879      	ldr	r1, [r7, #4]
 8005926:	4613      	mov	r3, r2
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	4413      	add	r3, r2
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	440b      	add	r3, r1
 8005930:	3318      	adds	r3, #24
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d029      	beq.n	800598c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005938:	78fa      	ldrb	r2, [r7, #3]
 800593a:	6879      	ldr	r1, [r7, #4]
 800593c:	4613      	mov	r3, r2
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	4413      	add	r3, r2
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	440b      	add	r3, r1
 8005946:	3318      	adds	r3, #24
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	78f9      	ldrb	r1, [r7, #3]
 800594c:	68f8      	ldr	r0, [r7, #12]
 800594e:	460b      	mov	r3, r1
 8005950:	00db      	lsls	r3, r3, #3
 8005952:	1a5b      	subs	r3, r3, r1
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	4403      	add	r3, r0
 8005958:	3344      	adds	r3, #68	; 0x44
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	fbb2 f1f3 	udiv	r1, r2, r3
 8005960:	fb01 f303 	mul.w	r3, r1, r3
 8005964:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005966:	2b00      	cmp	r3, #0
 8005968:	d110      	bne.n	800598c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800596a:	78fa      	ldrb	r2, [r7, #3]
 800596c:	6879      	ldr	r1, [r7, #4]
 800596e:	4613      	mov	r3, r2
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	4413      	add	r3, r2
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	440b      	add	r3, r1
 8005978:	3318      	adds	r3, #24
 800597a:	2200      	movs	r2, #0
 800597c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800597e:	78f9      	ldrb	r1, [r7, #3]
 8005980:	2300      	movs	r3, #0
 8005982:	2200      	movs	r2, #0
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f001 fed2 	bl	800772e <USBD_LL_Transmit>
 800598a:	e015      	b.n	80059b8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	2200      	movs	r2, #0
 8005990:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d00b      	beq.n	80059b8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	68ba      	ldr	r2, [r7, #8]
 80059aa:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80059ae:	68ba      	ldr	r2, [r7, #8]
 80059b0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80059b4:	78fa      	ldrb	r2, [r7, #3]
 80059b6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3710      	adds	r7, #16
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}

080059c2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80059c2:	b580      	push	{r7, lr}
 80059c4:	b084      	sub	sp, #16
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
 80059ca:	460b      	mov	r3, r1
 80059cc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059d4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d101      	bne.n	80059e4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80059e0:	2303      	movs	r3, #3
 80059e2:	e015      	b.n	8005a10 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80059e4:	78fb      	ldrb	r3, [r7, #3]
 80059e6:	4619      	mov	r1, r3
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f001 fee2 	bl	80077b2 <USBD_LL_GetRxDataSize>
 80059ee:	4602      	mov	r2, r0
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005a04:	68fa      	ldr	r2, [r7, #12]
 8005a06:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005a0a:	4611      	mov	r1, r2
 8005a0c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3710      	adds	r7, #16
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b084      	sub	sp, #16
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a26:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d101      	bne.n	8005a32 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e01b      	b.n	8005a6a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d015      	beq.n	8005a68 <USBD_CDC_EP0_RxReady+0x50>
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005a42:	2bff      	cmp	r3, #255	; 0xff
 8005a44:	d010      	beq.n	8005a68 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005a54:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005a5c:	b292      	uxth	r2, r2
 8005a5e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	22ff      	movs	r2, #255	; 0xff
 8005a64:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3710      	adds	r7, #16
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
	...

08005a74 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2243      	movs	r2, #67	; 0x43
 8005a80:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005a82:	4b03      	ldr	r3, [pc, #12]	; (8005a90 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr
 8005a90:	200000a8 	.word	0x200000a8

08005a94 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2243      	movs	r2, #67	; 0x43
 8005aa0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005aa2:	4b03      	ldr	r3, [pc, #12]	; (8005ab0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr
 8005ab0:	20000064 	.word	0x20000064

08005ab4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2243      	movs	r2, #67	; 0x43
 8005ac0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005ac2:	4b03      	ldr	r3, [pc, #12]	; (8005ad0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr
 8005ad0:	200000ec 	.word	0x200000ec

08005ad4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	220a      	movs	r2, #10
 8005ae0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005ae2:	4b03      	ldr	r3, [pc, #12]	; (8005af0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	370c      	adds	r7, #12
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr
 8005af0:	20000020 	.word	0x20000020

08005af4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d101      	bne.n	8005b08 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005b04:	2303      	movs	r3, #3
 8005b06:	e004      	b.n	8005b12 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	683a      	ldr	r2, [r7, #0]
 8005b0c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	370c      	adds	r7, #12
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr

08005b1e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	b087      	sub	sp, #28
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	60f8      	str	r0, [r7, #12]
 8005b26:	60b9      	str	r1, [r7, #8]
 8005b28:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b30:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d101      	bne.n	8005b3c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e008      	b.n	8005b4e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	68ba      	ldr	r2, [r7, #8]
 8005b40:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005b4c:	2300      	movs	r3, #0
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	371c      	adds	r7, #28
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr

08005b5a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005b5a:	b480      	push	{r7}
 8005b5c:	b085      	sub	sp, #20
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
 8005b62:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b6a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d101      	bne.n	8005b76 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e004      	b.n	8005b80 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	683a      	ldr	r2, [r7, #0]
 8005b7a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005b7e:	2300      	movs	r3, #0
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3714      	adds	r7, #20
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b9a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d101      	bne.n	8005bae <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e01a      	b.n	8005be4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d114      	bne.n	8005be2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005bd6:	2181      	movs	r1, #129	; 0x81
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f001 fda8 	bl	800772e <USBD_LL_Transmit>

    ret = USBD_OK;
 8005bde:	2300      	movs	r3, #0
 8005be0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3710      	adds	r7, #16
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bfa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d101      	bne.n	8005c0a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005c06:	2303      	movs	r3, #3
 8005c08:	e016      	b.n	8005c38 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	7c1b      	ldrb	r3, [r3, #16]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d109      	bne.n	8005c26 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005c18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c1c:	2101      	movs	r1, #1
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f001 fda6 	bl	8007770 <USBD_LL_PrepareReceive>
 8005c24:	e007      	b.n	8005c36 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005c2c:	2340      	movs	r3, #64	; 0x40
 8005c2e:	2101      	movs	r1, #1
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f001 fd9d 	bl	8007770 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005c36:	2300      	movs	r3, #0
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3710      	adds	r7, #16
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b086      	sub	sp, #24
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	4613      	mov	r3, r2
 8005c4c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d101      	bne.n	8005c58 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e01f      	b.n	8005c98 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2200      	movs	r2, #0
 8005c64:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d003      	beq.n	8005c7e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	68ba      	ldr	r2, [r7, #8]
 8005c7a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2201      	movs	r2, #1
 8005c82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	79fa      	ldrb	r2, [r7, #7]
 8005c8a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005c8c:	68f8      	ldr	r0, [r7, #12]
 8005c8e:	f001 fc19 	bl	80074c4 <USBD_LL_Init>
 8005c92:	4603      	mov	r3, r0
 8005c94:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005c96:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3718      	adds	r7, #24
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005caa:	2300      	movs	r3, #0
 8005cac:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d101      	bne.n	8005cb8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	e016      	b.n	8005ce6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	683a      	ldr	r2, [r7, #0]
 8005cbc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d00b      	beq.n	8005ce4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd4:	f107 020e 	add.w	r2, r7, #14
 8005cd8:	4610      	mov	r0, r2
 8005cda:	4798      	blx	r3
 8005cdc:	4602      	mov	r2, r0
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3710      	adds	r7, #16
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}

08005cee <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b082      	sub	sp, #8
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f001 fc30 	bl	800755c <USBD_LL_Start>
 8005cfc:	4603      	mov	r3, r0
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3708      	adds	r7, #8
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}

08005d06 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005d06:	b480      	push	{r7}
 8005d08:	b083      	sub	sp, #12
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	460b      	mov	r3, r1
 8005d26:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d009      	beq.n	8005d4a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	78fa      	ldrb	r2, [r7, #3]
 8005d40:	4611      	mov	r1, r2
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	4798      	blx	r3
 8005d46:	4603      	mov	r3, r0
 8005d48:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3710      	adds	r7, #16
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b082      	sub	sp, #8
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d007      	beq.n	8005d7a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	78fa      	ldrb	r2, [r7, #3]
 8005d74:	4611      	mov	r1, r2
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	4798      	blx	r3
  }

  return USBD_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3708      	adds	r7, #8
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005d94:	6839      	ldr	r1, [r7, #0]
 8005d96:	4618      	mov	r0, r3
 8005d98:	f000 ffba 	bl	8006d10 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005daa:	461a      	mov	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005db8:	f003 031f 	and.w	r3, r3, #31
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d01a      	beq.n	8005df6 <USBD_LL_SetupStage+0x72>
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d822      	bhi.n	8005e0a <USBD_LL_SetupStage+0x86>
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d002      	beq.n	8005dce <USBD_LL_SetupStage+0x4a>
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d00a      	beq.n	8005de2 <USBD_LL_SetupStage+0x5e>
 8005dcc:	e01d      	b.n	8005e0a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 fa62 	bl	80062a0 <USBD_StdDevReq>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	73fb      	strb	r3, [r7, #15]
      break;
 8005de0:	e020      	b.n	8005e24 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005de8:	4619      	mov	r1, r3
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 fac6 	bl	800637c <USBD_StdItfReq>
 8005df0:	4603      	mov	r3, r0
 8005df2:	73fb      	strb	r3, [r7, #15]
      break;
 8005df4:	e016      	b.n	8005e24 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 fb05 	bl	800640e <USBD_StdEPReq>
 8005e04:	4603      	mov	r3, r0
 8005e06:	73fb      	strb	r3, [r7, #15]
      break;
 8005e08:	e00c      	b.n	8005e24 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005e10:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	4619      	mov	r1, r3
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f001 fbff 	bl	800761c <USBD_LL_StallEP>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	73fb      	strb	r3, [r7, #15]
      break;
 8005e22:	bf00      	nop
  }

  return ret;
 8005e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3710      	adds	r7, #16
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}

08005e2e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005e2e:	b580      	push	{r7, lr}
 8005e30:	b086      	sub	sp, #24
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	60f8      	str	r0, [r7, #12]
 8005e36:	460b      	mov	r3, r1
 8005e38:	607a      	str	r2, [r7, #4]
 8005e3a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005e3c:	7afb      	ldrb	r3, [r7, #11]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d138      	bne.n	8005eb4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005e48:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005e50:	2b03      	cmp	r3, #3
 8005e52:	d14a      	bne.n	8005eea <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	689a      	ldr	r2, [r3, #8]
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d913      	bls.n	8005e88 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	689a      	ldr	r2, [r3, #8]
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	1ad2      	subs	r2, r2, r3
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	68da      	ldr	r2, [r3, #12]
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	4293      	cmp	r3, r2
 8005e78:	bf28      	it	cs
 8005e7a:	4613      	movcs	r3, r2
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	6879      	ldr	r1, [r7, #4]
 8005e80:	68f8      	ldr	r0, [r7, #12]
 8005e82:	f001 f839 	bl	8006ef8 <USBD_CtlContinueRx>
 8005e86:	e030      	b.n	8005eea <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	2b03      	cmp	r3, #3
 8005e92:	d10b      	bne.n	8005eac <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d005      	beq.n	8005eac <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	68f8      	ldr	r0, [r7, #12]
 8005eaa:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	f001 f834 	bl	8006f1a <USBD_CtlSendStatus>
 8005eb2:	e01a      	b.n	8005eea <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	2b03      	cmp	r3, #3
 8005ebe:	d114      	bne.n	8005eea <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ec6:	699b      	ldr	r3, [r3, #24]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d00e      	beq.n	8005eea <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ed2:	699b      	ldr	r3, [r3, #24]
 8005ed4:	7afa      	ldrb	r2, [r7, #11]
 8005ed6:	4611      	mov	r1, r2
 8005ed8:	68f8      	ldr	r0, [r7, #12]
 8005eda:	4798      	blx	r3
 8005edc:	4603      	mov	r3, r0
 8005ede:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005ee0:	7dfb      	ldrb	r3, [r7, #23]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d001      	beq.n	8005eea <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8005ee6:	7dfb      	ldrb	r3, [r7, #23]
 8005ee8:	e000      	b.n	8005eec <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3718      	adds	r7, #24
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b086      	sub	sp, #24
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	460b      	mov	r3, r1
 8005efe:	607a      	str	r2, [r7, #4]
 8005f00:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005f02:	7afb      	ldrb	r3, [r7, #11]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d16b      	bne.n	8005fe0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	3314      	adds	r3, #20
 8005f0c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005f14:	2b02      	cmp	r3, #2
 8005f16:	d156      	bne.n	8005fc6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	689a      	ldr	r2, [r3, #8]
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d914      	bls.n	8005f4e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	689a      	ldr	r2, [r3, #8]
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	1ad2      	subs	r2, r2, r3
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	461a      	mov	r2, r3
 8005f38:	6879      	ldr	r1, [r7, #4]
 8005f3a:	68f8      	ldr	r0, [r7, #12]
 8005f3c:	f000 ffae 	bl	8006e9c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f40:	2300      	movs	r3, #0
 8005f42:	2200      	movs	r2, #0
 8005f44:	2100      	movs	r1, #0
 8005f46:	68f8      	ldr	r0, [r7, #12]
 8005f48:	f001 fc12 	bl	8007770 <USBD_LL_PrepareReceive>
 8005f4c:	e03b      	b.n	8005fc6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	68da      	ldr	r2, [r3, #12]
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d11c      	bne.n	8005f94 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	685a      	ldr	r2, [r3, #4]
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d316      	bcc.n	8005f94 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	685a      	ldr	r2, [r3, #4]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d20f      	bcs.n	8005f94 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005f74:	2200      	movs	r2, #0
 8005f76:	2100      	movs	r1, #0
 8005f78:	68f8      	ldr	r0, [r7, #12]
 8005f7a:	f000 ff8f 	bl	8006e9c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f86:	2300      	movs	r3, #0
 8005f88:	2200      	movs	r2, #0
 8005f8a:	2100      	movs	r1, #0
 8005f8c:	68f8      	ldr	r0, [r7, #12]
 8005f8e:	f001 fbef 	bl	8007770 <USBD_LL_PrepareReceive>
 8005f92:	e018      	b.n	8005fc6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	2b03      	cmp	r3, #3
 8005f9e:	d10b      	bne.n	8005fb8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d005      	beq.n	8005fb8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	68f8      	ldr	r0, [r7, #12]
 8005fb6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005fb8:	2180      	movs	r1, #128	; 0x80
 8005fba:	68f8      	ldr	r0, [r7, #12]
 8005fbc:	f001 fb2e 	bl	800761c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005fc0:	68f8      	ldr	r0, [r7, #12]
 8005fc2:	f000 ffbd 	bl	8006f40 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d122      	bne.n	8006016 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005fd0:	68f8      	ldr	r0, [r7, #12]
 8005fd2:	f7ff fe98 	bl	8005d06 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005fde:	e01a      	b.n	8006016 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	2b03      	cmp	r3, #3
 8005fea:	d114      	bne.n	8006016 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ff2:	695b      	ldr	r3, [r3, #20]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d00e      	beq.n	8006016 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ffe:	695b      	ldr	r3, [r3, #20]
 8006000:	7afa      	ldrb	r2, [r7, #11]
 8006002:	4611      	mov	r1, r2
 8006004:	68f8      	ldr	r0, [r7, #12]
 8006006:	4798      	blx	r3
 8006008:	4603      	mov	r3, r0
 800600a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800600c:	7dfb      	ldrb	r3, [r7, #23]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d001      	beq.n	8006016 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006012:	7dfb      	ldrb	r3, [r7, #23]
 8006014:	e000      	b.n	8006018 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006016:	2300      	movs	r3, #0
}
 8006018:	4618      	mov	r0, r3
 800601a:	3718      	adds	r7, #24
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b082      	sub	sp, #8
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800604c:	2b00      	cmp	r3, #0
 800604e:	d101      	bne.n	8006054 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006050:	2303      	movs	r3, #3
 8006052:	e02f      	b.n	80060b4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00f      	beq.n	800607e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d009      	beq.n	800607e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	6852      	ldr	r2, [r2, #4]
 8006076:	b2d2      	uxtb	r2, r2
 8006078:	4611      	mov	r1, r2
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800607e:	2340      	movs	r3, #64	; 0x40
 8006080:	2200      	movs	r2, #0
 8006082:	2100      	movs	r1, #0
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f001 fa84 	bl	8007592 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2201      	movs	r2, #1
 800608e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2240      	movs	r2, #64	; 0x40
 8006096:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800609a:	2340      	movs	r3, #64	; 0x40
 800609c:	2200      	movs	r2, #0
 800609e:	2180      	movs	r1, #128	; 0x80
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f001 fa76 	bl	8007592 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2201      	movs	r2, #1
 80060aa:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2240      	movs	r2, #64	; 0x40
 80060b0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3708      	adds	r7, #8
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	460b      	mov	r3, r1
 80060c6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	78fa      	ldrb	r2, [r7, #3]
 80060cc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80060ce:	2300      	movs	r3, #0
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060ea:	b2da      	uxtb	r2, r3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2204      	movs	r2, #4
 80060f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006116:	b2db      	uxtb	r3, r3
 8006118:	2b04      	cmp	r3, #4
 800611a:	d106      	bne.n	800612a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006122:	b2da      	uxtb	r2, r3
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800612a:	2300      	movs	r3, #0
}
 800612c:	4618      	mov	r0, r3
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006146:	2b00      	cmp	r3, #0
 8006148:	d101      	bne.n	800614e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800614a:	2303      	movs	r3, #3
 800614c:	e012      	b.n	8006174 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006154:	b2db      	uxtb	r3, r3
 8006156:	2b03      	cmp	r3, #3
 8006158:	d10b      	bne.n	8006172 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006160:	69db      	ldr	r3, [r3, #28]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d005      	beq.n	8006172 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800616c:	69db      	ldr	r3, [r3, #28]
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006172:	2300      	movs	r3, #0
}
 8006174:	4618      	mov	r0, r3
 8006176:	3708      	adds	r7, #8
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b082      	sub	sp, #8
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	460b      	mov	r3, r1
 8006186:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800618e:	2b00      	cmp	r3, #0
 8006190:	d101      	bne.n	8006196 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006192:	2303      	movs	r3, #3
 8006194:	e014      	b.n	80061c0 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800619c:	b2db      	uxtb	r3, r3
 800619e:	2b03      	cmp	r3, #3
 80061a0:	d10d      	bne.n	80061be <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061a8:	6a1b      	ldr	r3, [r3, #32]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d007      	beq.n	80061be <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061b4:	6a1b      	ldr	r3, [r3, #32]
 80061b6:	78fa      	ldrb	r2, [r7, #3]
 80061b8:	4611      	mov	r1, r2
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80061be:	2300      	movs	r3, #0
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3708      	adds	r7, #8
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}

080061c8 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b082      	sub	sp, #8
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	460b      	mov	r3, r1
 80061d2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d101      	bne.n	80061e2 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80061de:	2303      	movs	r3, #3
 80061e0:	e014      	b.n	800620c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	2b03      	cmp	r3, #3
 80061ec:	d10d      	bne.n	800620a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d007      	beq.n	800620a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006202:	78fa      	ldrb	r2, [r7, #3]
 8006204:	4611      	mov	r1, r2
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3708      	adds	r7, #8
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	370c      	adds	r7, #12
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr

0800622a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800622a:	b580      	push	{r7, lr}
 800622c:	b082      	sub	sp, #8
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2201      	movs	r2, #1
 8006236:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006240:	2b00      	cmp	r3, #0
 8006242:	d009      	beq.n	8006258 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	6852      	ldr	r2, [r2, #4]
 8006250:	b2d2      	uxtb	r2, r2
 8006252:	4611      	mov	r1, r2
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	4798      	blx	r3
  }

  return USBD_OK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	3708      	adds	r7, #8
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}

08006262 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006262:	b480      	push	{r7}
 8006264:	b087      	sub	sp, #28
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	3301      	adds	r3, #1
 8006278:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006280:	8a3b      	ldrh	r3, [r7, #16]
 8006282:	021b      	lsls	r3, r3, #8
 8006284:	b21a      	sxth	r2, r3
 8006286:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800628a:	4313      	orrs	r3, r2
 800628c:	b21b      	sxth	r3, r3
 800628e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006290:	89fb      	ldrh	r3, [r7, #14]
}
 8006292:	4618      	mov	r0, r3
 8006294:	371c      	adds	r7, #28
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
	...

080062a0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80062aa:	2300      	movs	r3, #0
 80062ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062b6:	2b40      	cmp	r3, #64	; 0x40
 80062b8:	d005      	beq.n	80062c6 <USBD_StdDevReq+0x26>
 80062ba:	2b40      	cmp	r3, #64	; 0x40
 80062bc:	d853      	bhi.n	8006366 <USBD_StdDevReq+0xc6>
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00b      	beq.n	80062da <USBD_StdDevReq+0x3a>
 80062c2:	2b20      	cmp	r3, #32
 80062c4:	d14f      	bne.n	8006366 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	6839      	ldr	r1, [r7, #0]
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	4798      	blx	r3
 80062d4:	4603      	mov	r3, r0
 80062d6:	73fb      	strb	r3, [r7, #15]
      break;
 80062d8:	e04a      	b.n	8006370 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	785b      	ldrb	r3, [r3, #1]
 80062de:	2b09      	cmp	r3, #9
 80062e0:	d83b      	bhi.n	800635a <USBD_StdDevReq+0xba>
 80062e2:	a201      	add	r2, pc, #4	; (adr r2, 80062e8 <USBD_StdDevReq+0x48>)
 80062e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e8:	0800633d 	.word	0x0800633d
 80062ec:	08006351 	.word	0x08006351
 80062f0:	0800635b 	.word	0x0800635b
 80062f4:	08006347 	.word	0x08006347
 80062f8:	0800635b 	.word	0x0800635b
 80062fc:	0800631b 	.word	0x0800631b
 8006300:	08006311 	.word	0x08006311
 8006304:	0800635b 	.word	0x0800635b
 8006308:	08006333 	.word	0x08006333
 800630c:	08006325 	.word	0x08006325
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006310:	6839      	ldr	r1, [r7, #0]
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 f9de 	bl	80066d4 <USBD_GetDescriptor>
          break;
 8006318:	e024      	b.n	8006364 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800631a:	6839      	ldr	r1, [r7, #0]
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f000 fb6d 	bl	80069fc <USBD_SetAddress>
          break;
 8006322:	e01f      	b.n	8006364 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006324:	6839      	ldr	r1, [r7, #0]
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 fbac 	bl	8006a84 <USBD_SetConfig>
 800632c:	4603      	mov	r3, r0
 800632e:	73fb      	strb	r3, [r7, #15]
          break;
 8006330:	e018      	b.n	8006364 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006332:	6839      	ldr	r1, [r7, #0]
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f000 fc4b 	bl	8006bd0 <USBD_GetConfig>
          break;
 800633a:	e013      	b.n	8006364 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800633c:	6839      	ldr	r1, [r7, #0]
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 fc7c 	bl	8006c3c <USBD_GetStatus>
          break;
 8006344:	e00e      	b.n	8006364 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006346:	6839      	ldr	r1, [r7, #0]
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 fcab 	bl	8006ca4 <USBD_SetFeature>
          break;
 800634e:	e009      	b.n	8006364 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006350:	6839      	ldr	r1, [r7, #0]
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 fcba 	bl	8006ccc <USBD_ClrFeature>
          break;
 8006358:	e004      	b.n	8006364 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800635a:	6839      	ldr	r1, [r7, #0]
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f000 fd11 	bl	8006d84 <USBD_CtlError>
          break;
 8006362:	bf00      	nop
      }
      break;
 8006364:	e004      	b.n	8006370 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006366:	6839      	ldr	r1, [r7, #0]
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 fd0b 	bl	8006d84 <USBD_CtlError>
      break;
 800636e:	bf00      	nop
  }

  return ret;
 8006370:	7bfb      	ldrb	r3, [r7, #15]
}
 8006372:	4618      	mov	r0, r3
 8006374:	3710      	adds	r7, #16
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop

0800637c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006386:	2300      	movs	r3, #0
 8006388:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006392:	2b40      	cmp	r3, #64	; 0x40
 8006394:	d005      	beq.n	80063a2 <USBD_StdItfReq+0x26>
 8006396:	2b40      	cmp	r3, #64	; 0x40
 8006398:	d82f      	bhi.n	80063fa <USBD_StdItfReq+0x7e>
 800639a:	2b00      	cmp	r3, #0
 800639c:	d001      	beq.n	80063a2 <USBD_StdItfReq+0x26>
 800639e:	2b20      	cmp	r3, #32
 80063a0:	d12b      	bne.n	80063fa <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	3b01      	subs	r3, #1
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	d81d      	bhi.n	80063ec <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	889b      	ldrh	r3, [r3, #4]
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d813      	bhi.n	80063e2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	6839      	ldr	r1, [r7, #0]
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	4798      	blx	r3
 80063c8:	4603      	mov	r3, r0
 80063ca:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	88db      	ldrh	r3, [r3, #6]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d110      	bne.n	80063f6 <USBD_StdItfReq+0x7a>
 80063d4:	7bfb      	ldrb	r3, [r7, #15]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d10d      	bne.n	80063f6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 fd9d 	bl	8006f1a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80063e0:	e009      	b.n	80063f6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80063e2:	6839      	ldr	r1, [r7, #0]
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 fccd 	bl	8006d84 <USBD_CtlError>
          break;
 80063ea:	e004      	b.n	80063f6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80063ec:	6839      	ldr	r1, [r7, #0]
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 fcc8 	bl	8006d84 <USBD_CtlError>
          break;
 80063f4:	e000      	b.n	80063f8 <USBD_StdItfReq+0x7c>
          break;
 80063f6:	bf00      	nop
      }
      break;
 80063f8:	e004      	b.n	8006404 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80063fa:	6839      	ldr	r1, [r7, #0]
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f000 fcc1 	bl	8006d84 <USBD_CtlError>
      break;
 8006402:	bf00      	nop
  }

  return ret;
 8006404:	7bfb      	ldrb	r3, [r7, #15]
}
 8006406:	4618      	mov	r0, r3
 8006408:	3710      	adds	r7, #16
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}

0800640e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800640e:	b580      	push	{r7, lr}
 8006410:	b084      	sub	sp, #16
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
 8006416:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006418:	2300      	movs	r3, #0
 800641a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	889b      	ldrh	r3, [r3, #4]
 8006420:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800642a:	2b40      	cmp	r3, #64	; 0x40
 800642c:	d007      	beq.n	800643e <USBD_StdEPReq+0x30>
 800642e:	2b40      	cmp	r3, #64	; 0x40
 8006430:	f200 8145 	bhi.w	80066be <USBD_StdEPReq+0x2b0>
 8006434:	2b00      	cmp	r3, #0
 8006436:	d00c      	beq.n	8006452 <USBD_StdEPReq+0x44>
 8006438:	2b20      	cmp	r3, #32
 800643a:	f040 8140 	bne.w	80066be <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	6839      	ldr	r1, [r7, #0]
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	4798      	blx	r3
 800644c:	4603      	mov	r3, r0
 800644e:	73fb      	strb	r3, [r7, #15]
      break;
 8006450:	e13a      	b.n	80066c8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	785b      	ldrb	r3, [r3, #1]
 8006456:	2b03      	cmp	r3, #3
 8006458:	d007      	beq.n	800646a <USBD_StdEPReq+0x5c>
 800645a:	2b03      	cmp	r3, #3
 800645c:	f300 8129 	bgt.w	80066b2 <USBD_StdEPReq+0x2a4>
 8006460:	2b00      	cmp	r3, #0
 8006462:	d07f      	beq.n	8006564 <USBD_StdEPReq+0x156>
 8006464:	2b01      	cmp	r3, #1
 8006466:	d03c      	beq.n	80064e2 <USBD_StdEPReq+0xd4>
 8006468:	e123      	b.n	80066b2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006470:	b2db      	uxtb	r3, r3
 8006472:	2b02      	cmp	r3, #2
 8006474:	d002      	beq.n	800647c <USBD_StdEPReq+0x6e>
 8006476:	2b03      	cmp	r3, #3
 8006478:	d016      	beq.n	80064a8 <USBD_StdEPReq+0x9a>
 800647a:	e02c      	b.n	80064d6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800647c:	7bbb      	ldrb	r3, [r7, #14]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00d      	beq.n	800649e <USBD_StdEPReq+0x90>
 8006482:	7bbb      	ldrb	r3, [r7, #14]
 8006484:	2b80      	cmp	r3, #128	; 0x80
 8006486:	d00a      	beq.n	800649e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006488:	7bbb      	ldrb	r3, [r7, #14]
 800648a:	4619      	mov	r1, r3
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f001 f8c5 	bl	800761c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006492:	2180      	movs	r1, #128	; 0x80
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f001 f8c1 	bl	800761c <USBD_LL_StallEP>
 800649a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800649c:	e020      	b.n	80064e0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800649e:	6839      	ldr	r1, [r7, #0]
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 fc6f 	bl	8006d84 <USBD_CtlError>
              break;
 80064a6:	e01b      	b.n	80064e0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	885b      	ldrh	r3, [r3, #2]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d10e      	bne.n	80064ce <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80064b0:	7bbb      	ldrb	r3, [r7, #14]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d00b      	beq.n	80064ce <USBD_StdEPReq+0xc0>
 80064b6:	7bbb      	ldrb	r3, [r7, #14]
 80064b8:	2b80      	cmp	r3, #128	; 0x80
 80064ba:	d008      	beq.n	80064ce <USBD_StdEPReq+0xc0>
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	88db      	ldrh	r3, [r3, #6]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d104      	bne.n	80064ce <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80064c4:	7bbb      	ldrb	r3, [r7, #14]
 80064c6:	4619      	mov	r1, r3
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f001 f8a7 	bl	800761c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 fd23 	bl	8006f1a <USBD_CtlSendStatus>

              break;
 80064d4:	e004      	b.n	80064e0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80064d6:	6839      	ldr	r1, [r7, #0]
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 fc53 	bl	8006d84 <USBD_CtlError>
              break;
 80064de:	bf00      	nop
          }
          break;
 80064e0:	e0ec      	b.n	80066bc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	2b02      	cmp	r3, #2
 80064ec:	d002      	beq.n	80064f4 <USBD_StdEPReq+0xe6>
 80064ee:	2b03      	cmp	r3, #3
 80064f0:	d016      	beq.n	8006520 <USBD_StdEPReq+0x112>
 80064f2:	e030      	b.n	8006556 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80064f4:	7bbb      	ldrb	r3, [r7, #14]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d00d      	beq.n	8006516 <USBD_StdEPReq+0x108>
 80064fa:	7bbb      	ldrb	r3, [r7, #14]
 80064fc:	2b80      	cmp	r3, #128	; 0x80
 80064fe:	d00a      	beq.n	8006516 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006500:	7bbb      	ldrb	r3, [r7, #14]
 8006502:	4619      	mov	r1, r3
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f001 f889 	bl	800761c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800650a:	2180      	movs	r1, #128	; 0x80
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f001 f885 	bl	800761c <USBD_LL_StallEP>
 8006512:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006514:	e025      	b.n	8006562 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006516:	6839      	ldr	r1, [r7, #0]
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 fc33 	bl	8006d84 <USBD_CtlError>
              break;
 800651e:	e020      	b.n	8006562 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	885b      	ldrh	r3, [r3, #2]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d11b      	bne.n	8006560 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006528:	7bbb      	ldrb	r3, [r7, #14]
 800652a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800652e:	2b00      	cmp	r3, #0
 8006530:	d004      	beq.n	800653c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006532:	7bbb      	ldrb	r3, [r7, #14]
 8006534:	4619      	mov	r1, r3
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f001 f88f 	bl	800765a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f000 fcec 	bl	8006f1a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	6839      	ldr	r1, [r7, #0]
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	4798      	blx	r3
 8006550:	4603      	mov	r3, r0
 8006552:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006554:	e004      	b.n	8006560 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006556:	6839      	ldr	r1, [r7, #0]
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 fc13 	bl	8006d84 <USBD_CtlError>
              break;
 800655e:	e000      	b.n	8006562 <USBD_StdEPReq+0x154>
              break;
 8006560:	bf00      	nop
          }
          break;
 8006562:	e0ab      	b.n	80066bc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800656a:	b2db      	uxtb	r3, r3
 800656c:	2b02      	cmp	r3, #2
 800656e:	d002      	beq.n	8006576 <USBD_StdEPReq+0x168>
 8006570:	2b03      	cmp	r3, #3
 8006572:	d032      	beq.n	80065da <USBD_StdEPReq+0x1cc>
 8006574:	e097      	b.n	80066a6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006576:	7bbb      	ldrb	r3, [r7, #14]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d007      	beq.n	800658c <USBD_StdEPReq+0x17e>
 800657c:	7bbb      	ldrb	r3, [r7, #14]
 800657e:	2b80      	cmp	r3, #128	; 0x80
 8006580:	d004      	beq.n	800658c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006582:	6839      	ldr	r1, [r7, #0]
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 fbfd 	bl	8006d84 <USBD_CtlError>
                break;
 800658a:	e091      	b.n	80066b0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800658c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006590:	2b00      	cmp	r3, #0
 8006592:	da0b      	bge.n	80065ac <USBD_StdEPReq+0x19e>
 8006594:	7bbb      	ldrb	r3, [r7, #14]
 8006596:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800659a:	4613      	mov	r3, r2
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	4413      	add	r3, r2
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	3310      	adds	r3, #16
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	4413      	add	r3, r2
 80065a8:	3304      	adds	r3, #4
 80065aa:	e00b      	b.n	80065c4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80065ac:	7bbb      	ldrb	r3, [r7, #14]
 80065ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80065b2:	4613      	mov	r3, r2
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	4413      	add	r3, r2
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	4413      	add	r3, r2
 80065c2:	3304      	adds	r3, #4
 80065c4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	2200      	movs	r2, #0
 80065ca:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	2202      	movs	r2, #2
 80065d0:	4619      	mov	r1, r3
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 fc47 	bl	8006e66 <USBD_CtlSendData>
              break;
 80065d8:	e06a      	b.n	80066b0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80065da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	da11      	bge.n	8006606 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80065e2:	7bbb      	ldrb	r3, [r7, #14]
 80065e4:	f003 020f 	and.w	r2, r3, #15
 80065e8:	6879      	ldr	r1, [r7, #4]
 80065ea:	4613      	mov	r3, r2
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	4413      	add	r3, r2
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	440b      	add	r3, r1
 80065f4:	3324      	adds	r3, #36	; 0x24
 80065f6:	881b      	ldrh	r3, [r3, #0]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d117      	bne.n	800662c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80065fc:	6839      	ldr	r1, [r7, #0]
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 fbc0 	bl	8006d84 <USBD_CtlError>
                  break;
 8006604:	e054      	b.n	80066b0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006606:	7bbb      	ldrb	r3, [r7, #14]
 8006608:	f003 020f 	and.w	r2, r3, #15
 800660c:	6879      	ldr	r1, [r7, #4]
 800660e:	4613      	mov	r3, r2
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	4413      	add	r3, r2
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	440b      	add	r3, r1
 8006618:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800661c:	881b      	ldrh	r3, [r3, #0]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d104      	bne.n	800662c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006622:	6839      	ldr	r1, [r7, #0]
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 fbad 	bl	8006d84 <USBD_CtlError>
                  break;
 800662a:	e041      	b.n	80066b0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800662c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006630:	2b00      	cmp	r3, #0
 8006632:	da0b      	bge.n	800664c <USBD_StdEPReq+0x23e>
 8006634:	7bbb      	ldrb	r3, [r7, #14]
 8006636:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800663a:	4613      	mov	r3, r2
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	4413      	add	r3, r2
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	3310      	adds	r3, #16
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	4413      	add	r3, r2
 8006648:	3304      	adds	r3, #4
 800664a:	e00b      	b.n	8006664 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800664c:	7bbb      	ldrb	r3, [r7, #14]
 800664e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006652:	4613      	mov	r3, r2
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	4413      	add	r3, r2
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	4413      	add	r3, r2
 8006662:	3304      	adds	r3, #4
 8006664:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006666:	7bbb      	ldrb	r3, [r7, #14]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d002      	beq.n	8006672 <USBD_StdEPReq+0x264>
 800666c:	7bbb      	ldrb	r3, [r7, #14]
 800666e:	2b80      	cmp	r3, #128	; 0x80
 8006670:	d103      	bne.n	800667a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	2200      	movs	r2, #0
 8006676:	601a      	str	r2, [r3, #0]
 8006678:	e00e      	b.n	8006698 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800667a:	7bbb      	ldrb	r3, [r7, #14]
 800667c:	4619      	mov	r1, r3
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f001 f80a 	bl	8007698 <USBD_LL_IsStallEP>
 8006684:	4603      	mov	r3, r0
 8006686:	2b00      	cmp	r3, #0
 8006688:	d003      	beq.n	8006692 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	2201      	movs	r2, #1
 800668e:	601a      	str	r2, [r3, #0]
 8006690:	e002      	b.n	8006698 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	2200      	movs	r2, #0
 8006696:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	2202      	movs	r2, #2
 800669c:	4619      	mov	r1, r3
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 fbe1 	bl	8006e66 <USBD_CtlSendData>
              break;
 80066a4:	e004      	b.n	80066b0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80066a6:	6839      	ldr	r1, [r7, #0]
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 fb6b 	bl	8006d84 <USBD_CtlError>
              break;
 80066ae:	bf00      	nop
          }
          break;
 80066b0:	e004      	b.n	80066bc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80066b2:	6839      	ldr	r1, [r7, #0]
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 fb65 	bl	8006d84 <USBD_CtlError>
          break;
 80066ba:	bf00      	nop
      }
      break;
 80066bc:	e004      	b.n	80066c8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80066be:	6839      	ldr	r1, [r7, #0]
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 fb5f 	bl	8006d84 <USBD_CtlError>
      break;
 80066c6:	bf00      	nop
  }

  return ret;
 80066c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3710      	adds	r7, #16
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
	...

080066d4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80066de:	2300      	movs	r3, #0
 80066e0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80066e2:	2300      	movs	r3, #0
 80066e4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80066e6:	2300      	movs	r3, #0
 80066e8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	885b      	ldrh	r3, [r3, #2]
 80066ee:	0a1b      	lsrs	r3, r3, #8
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	3b01      	subs	r3, #1
 80066f4:	2b0e      	cmp	r3, #14
 80066f6:	f200 8152 	bhi.w	800699e <USBD_GetDescriptor+0x2ca>
 80066fa:	a201      	add	r2, pc, #4	; (adr r2, 8006700 <USBD_GetDescriptor+0x2c>)
 80066fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006700:	08006771 	.word	0x08006771
 8006704:	08006789 	.word	0x08006789
 8006708:	080067c9 	.word	0x080067c9
 800670c:	0800699f 	.word	0x0800699f
 8006710:	0800699f 	.word	0x0800699f
 8006714:	0800693f 	.word	0x0800693f
 8006718:	0800696b 	.word	0x0800696b
 800671c:	0800699f 	.word	0x0800699f
 8006720:	0800699f 	.word	0x0800699f
 8006724:	0800699f 	.word	0x0800699f
 8006728:	0800699f 	.word	0x0800699f
 800672c:	0800699f 	.word	0x0800699f
 8006730:	0800699f 	.word	0x0800699f
 8006734:	0800699f 	.word	0x0800699f
 8006738:	0800673d 	.word	0x0800673d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006742:	69db      	ldr	r3, [r3, #28]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00b      	beq.n	8006760 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800674e:	69db      	ldr	r3, [r3, #28]
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	7c12      	ldrb	r2, [r2, #16]
 8006754:	f107 0108 	add.w	r1, r7, #8
 8006758:	4610      	mov	r0, r2
 800675a:	4798      	blx	r3
 800675c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800675e:	e126      	b.n	80069ae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006760:	6839      	ldr	r1, [r7, #0]
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 fb0e 	bl	8006d84 <USBD_CtlError>
        err++;
 8006768:	7afb      	ldrb	r3, [r7, #11]
 800676a:	3301      	adds	r3, #1
 800676c:	72fb      	strb	r3, [r7, #11]
      break;
 800676e:	e11e      	b.n	80069ae <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	7c12      	ldrb	r2, [r2, #16]
 800677c:	f107 0108 	add.w	r1, r7, #8
 8006780:	4610      	mov	r0, r2
 8006782:	4798      	blx	r3
 8006784:	60f8      	str	r0, [r7, #12]
      break;
 8006786:	e112      	b.n	80069ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	7c1b      	ldrb	r3, [r3, #16]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d10d      	bne.n	80067ac <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006798:	f107 0208 	add.w	r2, r7, #8
 800679c:	4610      	mov	r0, r2
 800679e:	4798      	blx	r3
 80067a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	3301      	adds	r3, #1
 80067a6:	2202      	movs	r2, #2
 80067a8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80067aa:	e100      	b.n	80069ae <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b4:	f107 0208 	add.w	r2, r7, #8
 80067b8:	4610      	mov	r0, r2
 80067ba:	4798      	blx	r3
 80067bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	3301      	adds	r3, #1
 80067c2:	2202      	movs	r2, #2
 80067c4:	701a      	strb	r2, [r3, #0]
      break;
 80067c6:	e0f2      	b.n	80069ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	885b      	ldrh	r3, [r3, #2]
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	2b05      	cmp	r3, #5
 80067d0:	f200 80ac 	bhi.w	800692c <USBD_GetDescriptor+0x258>
 80067d4:	a201      	add	r2, pc, #4	; (adr r2, 80067dc <USBD_GetDescriptor+0x108>)
 80067d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067da:	bf00      	nop
 80067dc:	080067f5 	.word	0x080067f5
 80067e0:	08006829 	.word	0x08006829
 80067e4:	0800685d 	.word	0x0800685d
 80067e8:	08006891 	.word	0x08006891
 80067ec:	080068c5 	.word	0x080068c5
 80067f0:	080068f9 	.word	0x080068f9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d00b      	beq.n	8006818 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	7c12      	ldrb	r2, [r2, #16]
 800680c:	f107 0108 	add.w	r1, r7, #8
 8006810:	4610      	mov	r0, r2
 8006812:	4798      	blx	r3
 8006814:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006816:	e091      	b.n	800693c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006818:	6839      	ldr	r1, [r7, #0]
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 fab2 	bl	8006d84 <USBD_CtlError>
            err++;
 8006820:	7afb      	ldrb	r3, [r7, #11]
 8006822:	3301      	adds	r3, #1
 8006824:	72fb      	strb	r3, [r7, #11]
          break;
 8006826:	e089      	b.n	800693c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d00b      	beq.n	800684c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	7c12      	ldrb	r2, [r2, #16]
 8006840:	f107 0108 	add.w	r1, r7, #8
 8006844:	4610      	mov	r0, r2
 8006846:	4798      	blx	r3
 8006848:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800684a:	e077      	b.n	800693c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800684c:	6839      	ldr	r1, [r7, #0]
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 fa98 	bl	8006d84 <USBD_CtlError>
            err++;
 8006854:	7afb      	ldrb	r3, [r7, #11]
 8006856:	3301      	adds	r3, #1
 8006858:	72fb      	strb	r3, [r7, #11]
          break;
 800685a:	e06f      	b.n	800693c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d00b      	beq.n	8006880 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	7c12      	ldrb	r2, [r2, #16]
 8006874:	f107 0108 	add.w	r1, r7, #8
 8006878:	4610      	mov	r0, r2
 800687a:	4798      	blx	r3
 800687c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800687e:	e05d      	b.n	800693c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006880:	6839      	ldr	r1, [r7, #0]
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 fa7e 	bl	8006d84 <USBD_CtlError>
            err++;
 8006888:	7afb      	ldrb	r3, [r7, #11]
 800688a:	3301      	adds	r3, #1
 800688c:	72fb      	strb	r3, [r7, #11]
          break;
 800688e:	e055      	b.n	800693c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006896:	691b      	ldr	r3, [r3, #16]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d00b      	beq.n	80068b4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068a2:	691b      	ldr	r3, [r3, #16]
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	7c12      	ldrb	r2, [r2, #16]
 80068a8:	f107 0108 	add.w	r1, r7, #8
 80068ac:	4610      	mov	r0, r2
 80068ae:	4798      	blx	r3
 80068b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068b2:	e043      	b.n	800693c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80068b4:	6839      	ldr	r1, [r7, #0]
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 fa64 	bl	8006d84 <USBD_CtlError>
            err++;
 80068bc:	7afb      	ldrb	r3, [r7, #11]
 80068be:	3301      	adds	r3, #1
 80068c0:	72fb      	strb	r3, [r7, #11]
          break;
 80068c2:	e03b      	b.n	800693c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068ca:	695b      	ldr	r3, [r3, #20]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d00b      	beq.n	80068e8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068d6:	695b      	ldr	r3, [r3, #20]
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	7c12      	ldrb	r2, [r2, #16]
 80068dc:	f107 0108 	add.w	r1, r7, #8
 80068e0:	4610      	mov	r0, r2
 80068e2:	4798      	blx	r3
 80068e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068e6:	e029      	b.n	800693c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80068e8:	6839      	ldr	r1, [r7, #0]
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 fa4a 	bl	8006d84 <USBD_CtlError>
            err++;
 80068f0:	7afb      	ldrb	r3, [r7, #11]
 80068f2:	3301      	adds	r3, #1
 80068f4:	72fb      	strb	r3, [r7, #11]
          break;
 80068f6:	e021      	b.n	800693c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068fe:	699b      	ldr	r3, [r3, #24]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d00b      	beq.n	800691c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800690a:	699b      	ldr	r3, [r3, #24]
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	7c12      	ldrb	r2, [r2, #16]
 8006910:	f107 0108 	add.w	r1, r7, #8
 8006914:	4610      	mov	r0, r2
 8006916:	4798      	blx	r3
 8006918:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800691a:	e00f      	b.n	800693c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800691c:	6839      	ldr	r1, [r7, #0]
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 fa30 	bl	8006d84 <USBD_CtlError>
            err++;
 8006924:	7afb      	ldrb	r3, [r7, #11]
 8006926:	3301      	adds	r3, #1
 8006928:	72fb      	strb	r3, [r7, #11]
          break;
 800692a:	e007      	b.n	800693c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800692c:	6839      	ldr	r1, [r7, #0]
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 fa28 	bl	8006d84 <USBD_CtlError>
          err++;
 8006934:	7afb      	ldrb	r3, [r7, #11]
 8006936:	3301      	adds	r3, #1
 8006938:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800693a:	bf00      	nop
      }
      break;
 800693c:	e037      	b.n	80069ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	7c1b      	ldrb	r3, [r3, #16]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d109      	bne.n	800695a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800694c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800694e:	f107 0208 	add.w	r2, r7, #8
 8006952:	4610      	mov	r0, r2
 8006954:	4798      	blx	r3
 8006956:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006958:	e029      	b.n	80069ae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800695a:	6839      	ldr	r1, [r7, #0]
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 fa11 	bl	8006d84 <USBD_CtlError>
        err++;
 8006962:	7afb      	ldrb	r3, [r7, #11]
 8006964:	3301      	adds	r3, #1
 8006966:	72fb      	strb	r3, [r7, #11]
      break;
 8006968:	e021      	b.n	80069ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	7c1b      	ldrb	r3, [r3, #16]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d10d      	bne.n	800698e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800697a:	f107 0208 	add.w	r2, r7, #8
 800697e:	4610      	mov	r0, r2
 8006980:	4798      	blx	r3
 8006982:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	3301      	adds	r3, #1
 8006988:	2207      	movs	r2, #7
 800698a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800698c:	e00f      	b.n	80069ae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800698e:	6839      	ldr	r1, [r7, #0]
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 f9f7 	bl	8006d84 <USBD_CtlError>
        err++;
 8006996:	7afb      	ldrb	r3, [r7, #11]
 8006998:	3301      	adds	r3, #1
 800699a:	72fb      	strb	r3, [r7, #11]
      break;
 800699c:	e007      	b.n	80069ae <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800699e:	6839      	ldr	r1, [r7, #0]
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 f9ef 	bl	8006d84 <USBD_CtlError>
      err++;
 80069a6:	7afb      	ldrb	r3, [r7, #11]
 80069a8:	3301      	adds	r3, #1
 80069aa:	72fb      	strb	r3, [r7, #11]
      break;
 80069ac:	bf00      	nop
  }

  if (err != 0U)
 80069ae:	7afb      	ldrb	r3, [r7, #11]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d11e      	bne.n	80069f2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	88db      	ldrh	r3, [r3, #6]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d016      	beq.n	80069ea <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80069bc:	893b      	ldrh	r3, [r7, #8]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d00e      	beq.n	80069e0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	88da      	ldrh	r2, [r3, #6]
 80069c6:	893b      	ldrh	r3, [r7, #8]
 80069c8:	4293      	cmp	r3, r2
 80069ca:	bf28      	it	cs
 80069cc:	4613      	movcs	r3, r2
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80069d2:	893b      	ldrh	r3, [r7, #8]
 80069d4:	461a      	mov	r2, r3
 80069d6:	68f9      	ldr	r1, [r7, #12]
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 fa44 	bl	8006e66 <USBD_CtlSendData>
 80069de:	e009      	b.n	80069f4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80069e0:	6839      	ldr	r1, [r7, #0]
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 f9ce 	bl	8006d84 <USBD_CtlError>
 80069e8:	e004      	b.n	80069f4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 fa95 	bl	8006f1a <USBD_CtlSendStatus>
 80069f0:	e000      	b.n	80069f4 <USBD_GetDescriptor+0x320>
    return;
 80069f2:	bf00      	nop
  }
}
 80069f4:	3710      	adds	r7, #16
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
 80069fa:	bf00      	nop

080069fc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	889b      	ldrh	r3, [r3, #4]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d131      	bne.n	8006a72 <USBD_SetAddress+0x76>
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	88db      	ldrh	r3, [r3, #6]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d12d      	bne.n	8006a72 <USBD_SetAddress+0x76>
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	885b      	ldrh	r3, [r3, #2]
 8006a1a:	2b7f      	cmp	r3, #127	; 0x7f
 8006a1c:	d829      	bhi.n	8006a72 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	885b      	ldrh	r3, [r3, #2]
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a28:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	2b03      	cmp	r3, #3
 8006a34:	d104      	bne.n	8006a40 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006a36:	6839      	ldr	r1, [r7, #0]
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 f9a3 	bl	8006d84 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a3e:	e01d      	b.n	8006a7c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	7bfa      	ldrb	r2, [r7, #15]
 8006a44:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006a48:	7bfb      	ldrb	r3, [r7, #15]
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f000 fe4f 	bl	80076f0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 fa61 	bl	8006f1a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006a58:	7bfb      	ldrb	r3, [r7, #15]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d004      	beq.n	8006a68 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2202      	movs	r2, #2
 8006a62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a66:	e009      	b.n	8006a7c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a70:	e004      	b.n	8006a7c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006a72:	6839      	ldr	r1, [r7, #0]
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 f985 	bl	8006d84 <USBD_CtlError>
  }
}
 8006a7a:	bf00      	nop
 8006a7c:	bf00      	nop
 8006a7e:	3710      	adds	r7, #16
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	885b      	ldrh	r3, [r3, #2]
 8006a96:	b2da      	uxtb	r2, r3
 8006a98:	4b4c      	ldr	r3, [pc, #304]	; (8006bcc <USBD_SetConfig+0x148>)
 8006a9a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006a9c:	4b4b      	ldr	r3, [pc, #300]	; (8006bcc <USBD_SetConfig+0x148>)
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d905      	bls.n	8006ab0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006aa4:	6839      	ldr	r1, [r7, #0]
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 f96c 	bl	8006d84 <USBD_CtlError>
    return USBD_FAIL;
 8006aac:	2303      	movs	r3, #3
 8006aae:	e088      	b.n	8006bc2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	2b02      	cmp	r3, #2
 8006aba:	d002      	beq.n	8006ac2 <USBD_SetConfig+0x3e>
 8006abc:	2b03      	cmp	r3, #3
 8006abe:	d025      	beq.n	8006b0c <USBD_SetConfig+0x88>
 8006ac0:	e071      	b.n	8006ba6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006ac2:	4b42      	ldr	r3, [pc, #264]	; (8006bcc <USBD_SetConfig+0x148>)
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d01c      	beq.n	8006b04 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006aca:	4b40      	ldr	r3, [pc, #256]	; (8006bcc <USBD_SetConfig+0x148>)
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	461a      	mov	r2, r3
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006ad4:	4b3d      	ldr	r3, [pc, #244]	; (8006bcc <USBD_SetConfig+0x148>)
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	4619      	mov	r1, r3
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f7ff f91e 	bl	8005d1c <USBD_SetClassConfig>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006ae4:	7bfb      	ldrb	r3, [r7, #15]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d004      	beq.n	8006af4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006aea:	6839      	ldr	r1, [r7, #0]
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 f949 	bl	8006d84 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006af2:	e065      	b.n	8006bc0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f000 fa10 	bl	8006f1a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2203      	movs	r2, #3
 8006afe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006b02:	e05d      	b.n	8006bc0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 fa08 	bl	8006f1a <USBD_CtlSendStatus>
      break;
 8006b0a:	e059      	b.n	8006bc0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006b0c:	4b2f      	ldr	r3, [pc, #188]	; (8006bcc <USBD_SetConfig+0x148>)
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d112      	bne.n	8006b3a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2202      	movs	r2, #2
 8006b18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006b1c:	4b2b      	ldr	r3, [pc, #172]	; (8006bcc <USBD_SetConfig+0x148>)
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	461a      	mov	r2, r3
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006b26:	4b29      	ldr	r3, [pc, #164]	; (8006bcc <USBD_SetConfig+0x148>)
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f7ff f911 	bl	8005d54 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 f9f1 	bl	8006f1a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006b38:	e042      	b.n	8006bc0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006b3a:	4b24      	ldr	r3, [pc, #144]	; (8006bcc <USBD_SetConfig+0x148>)
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	461a      	mov	r2, r3
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d02a      	beq.n	8006b9e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	4619      	mov	r1, r3
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f7ff f8ff 	bl	8005d54 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006b56:	4b1d      	ldr	r3, [pc, #116]	; (8006bcc <USBD_SetConfig+0x148>)
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006b60:	4b1a      	ldr	r3, [pc, #104]	; (8006bcc <USBD_SetConfig+0x148>)
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	4619      	mov	r1, r3
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f7ff f8d8 	bl	8005d1c <USBD_SetClassConfig>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006b70:	7bfb      	ldrb	r3, [r7, #15]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d00f      	beq.n	8006b96 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8006b76:	6839      	ldr	r1, [r7, #0]
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 f903 	bl	8006d84 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	4619      	mov	r1, r3
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f7ff f8e4 	bl	8005d54 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2202      	movs	r2, #2
 8006b90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006b94:	e014      	b.n	8006bc0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 f9bf 	bl	8006f1a <USBD_CtlSendStatus>
      break;
 8006b9c:	e010      	b.n	8006bc0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 f9bb 	bl	8006f1a <USBD_CtlSendStatus>
      break;
 8006ba4:	e00c      	b.n	8006bc0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006ba6:	6839      	ldr	r1, [r7, #0]
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 f8eb 	bl	8006d84 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006bae:	4b07      	ldr	r3, [pc, #28]	; (8006bcc <USBD_SetConfig+0x148>)
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f7ff f8cd 	bl	8005d54 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006bba:	2303      	movs	r3, #3
 8006bbc:	73fb      	strb	r3, [r7, #15]
      break;
 8006bbe:	bf00      	nop
  }

  return ret;
 8006bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3710      	adds	r7, #16
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	2000124c 	.word	0x2000124c

08006bd0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b082      	sub	sp, #8
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	88db      	ldrh	r3, [r3, #6]
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d004      	beq.n	8006bec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006be2:	6839      	ldr	r1, [r7, #0]
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 f8cd 	bl	8006d84 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006bea:	e023      	b.n	8006c34 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	2b02      	cmp	r3, #2
 8006bf6:	dc02      	bgt.n	8006bfe <USBD_GetConfig+0x2e>
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	dc03      	bgt.n	8006c04 <USBD_GetConfig+0x34>
 8006bfc:	e015      	b.n	8006c2a <USBD_GetConfig+0x5a>
 8006bfe:	2b03      	cmp	r3, #3
 8006c00:	d00b      	beq.n	8006c1a <USBD_GetConfig+0x4a>
 8006c02:	e012      	b.n	8006c2a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	3308      	adds	r3, #8
 8006c0e:	2201      	movs	r2, #1
 8006c10:	4619      	mov	r1, r3
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 f927 	bl	8006e66 <USBD_CtlSendData>
        break;
 8006c18:	e00c      	b.n	8006c34 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	3304      	adds	r3, #4
 8006c1e:	2201      	movs	r2, #1
 8006c20:	4619      	mov	r1, r3
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 f91f 	bl	8006e66 <USBD_CtlSendData>
        break;
 8006c28:	e004      	b.n	8006c34 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006c2a:	6839      	ldr	r1, [r7, #0]
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 f8a9 	bl	8006d84 <USBD_CtlError>
        break;
 8006c32:	bf00      	nop
}
 8006c34:	bf00      	nop
 8006c36:	3708      	adds	r7, #8
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	3b01      	subs	r3, #1
 8006c50:	2b02      	cmp	r3, #2
 8006c52:	d81e      	bhi.n	8006c92 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	88db      	ldrh	r3, [r3, #6]
 8006c58:	2b02      	cmp	r3, #2
 8006c5a:	d004      	beq.n	8006c66 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006c5c:	6839      	ldr	r1, [r7, #0]
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 f890 	bl	8006d84 <USBD_CtlError>
        break;
 8006c64:	e01a      	b.n	8006c9c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2201      	movs	r2, #1
 8006c6a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d005      	beq.n	8006c82 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	f043 0202 	orr.w	r2, r3, #2
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	330c      	adds	r3, #12
 8006c86:	2202      	movs	r2, #2
 8006c88:	4619      	mov	r1, r3
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 f8eb 	bl	8006e66 <USBD_CtlSendData>
      break;
 8006c90:	e004      	b.n	8006c9c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006c92:	6839      	ldr	r1, [r7, #0]
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 f875 	bl	8006d84 <USBD_CtlError>
      break;
 8006c9a:	bf00      	nop
  }
}
 8006c9c:	bf00      	nop
 8006c9e:	3708      	adds	r7, #8
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	885b      	ldrh	r3, [r3, #2]
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d106      	bne.n	8006cc4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 f92b 	bl	8006f1a <USBD_CtlSendStatus>
  }
}
 8006cc4:	bf00      	nop
 8006cc6:	3708      	adds	r7, #8
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	3b01      	subs	r3, #1
 8006ce0:	2b02      	cmp	r3, #2
 8006ce2:	d80b      	bhi.n	8006cfc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	885b      	ldrh	r3, [r3, #2]
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d10c      	bne.n	8006d06 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 f910 	bl	8006f1a <USBD_CtlSendStatus>
      }
      break;
 8006cfa:	e004      	b.n	8006d06 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006cfc:	6839      	ldr	r1, [r7, #0]
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 f840 	bl	8006d84 <USBD_CtlError>
      break;
 8006d04:	e000      	b.n	8006d08 <USBD_ClrFeature+0x3c>
      break;
 8006d06:	bf00      	nop
  }
}
 8006d08:	bf00      	nop
 8006d0a:	3708      	adds	r7, #8
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	781a      	ldrb	r2, [r3, #0]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	3301      	adds	r3, #1
 8006d2a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	781a      	ldrb	r2, [r3, #0]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	3301      	adds	r3, #1
 8006d38:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006d3a:	68f8      	ldr	r0, [r7, #12]
 8006d3c:	f7ff fa91 	bl	8006262 <SWAPBYTE>
 8006d40:	4603      	mov	r3, r0
 8006d42:	461a      	mov	r2, r3
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	3301      	adds	r3, #1
 8006d52:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006d54:	68f8      	ldr	r0, [r7, #12]
 8006d56:	f7ff fa84 	bl	8006262 <SWAPBYTE>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	3301      	adds	r3, #1
 8006d66:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006d6e:	68f8      	ldr	r0, [r7, #12]
 8006d70:	f7ff fa77 	bl	8006262 <SWAPBYTE>
 8006d74:	4603      	mov	r3, r0
 8006d76:	461a      	mov	r2, r3
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	80da      	strh	r2, [r3, #6]
}
 8006d7c:	bf00      	nop
 8006d7e:	3710      	adds	r7, #16
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b082      	sub	sp, #8
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d8e:	2180      	movs	r1, #128	; 0x80
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 fc43 	bl	800761c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006d96:	2100      	movs	r1, #0
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 fc3f 	bl	800761c <USBD_LL_StallEP>
}
 8006d9e:	bf00      	nop
 8006da0:	3708      	adds	r7, #8
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}

08006da6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006da6:	b580      	push	{r7, lr}
 8006da8:	b086      	sub	sp, #24
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	60f8      	str	r0, [r7, #12]
 8006dae:	60b9      	str	r1, [r7, #8]
 8006db0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006db2:	2300      	movs	r3, #0
 8006db4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d036      	beq.n	8006e2a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006dc0:	6938      	ldr	r0, [r7, #16]
 8006dc2:	f000 f836 	bl	8006e32 <USBD_GetLen>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	3301      	adds	r3, #1
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	005b      	lsls	r3, r3, #1
 8006dce:	b29a      	uxth	r2, r3
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006dd4:	7dfb      	ldrb	r3, [r7, #23]
 8006dd6:	68ba      	ldr	r2, [r7, #8]
 8006dd8:	4413      	add	r3, r2
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	7812      	ldrb	r2, [r2, #0]
 8006dde:	701a      	strb	r2, [r3, #0]
  idx++;
 8006de0:	7dfb      	ldrb	r3, [r7, #23]
 8006de2:	3301      	adds	r3, #1
 8006de4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006de6:	7dfb      	ldrb	r3, [r7, #23]
 8006de8:	68ba      	ldr	r2, [r7, #8]
 8006dea:	4413      	add	r3, r2
 8006dec:	2203      	movs	r2, #3
 8006dee:	701a      	strb	r2, [r3, #0]
  idx++;
 8006df0:	7dfb      	ldrb	r3, [r7, #23]
 8006df2:	3301      	adds	r3, #1
 8006df4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006df6:	e013      	b.n	8006e20 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006df8:	7dfb      	ldrb	r3, [r7, #23]
 8006dfa:	68ba      	ldr	r2, [r7, #8]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	693a      	ldr	r2, [r7, #16]
 8006e00:	7812      	ldrb	r2, [r2, #0]
 8006e02:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	3301      	adds	r3, #1
 8006e08:	613b      	str	r3, [r7, #16]
    idx++;
 8006e0a:	7dfb      	ldrb	r3, [r7, #23]
 8006e0c:	3301      	adds	r3, #1
 8006e0e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006e10:	7dfb      	ldrb	r3, [r7, #23]
 8006e12:	68ba      	ldr	r2, [r7, #8]
 8006e14:	4413      	add	r3, r2
 8006e16:	2200      	movs	r2, #0
 8006e18:	701a      	strb	r2, [r3, #0]
    idx++;
 8006e1a:	7dfb      	ldrb	r3, [r7, #23]
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d1e7      	bne.n	8006df8 <USBD_GetString+0x52>
 8006e28:	e000      	b.n	8006e2c <USBD_GetString+0x86>
    return;
 8006e2a:	bf00      	nop
  }
}
 8006e2c:	3718      	adds	r7, #24
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}

08006e32 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006e32:	b480      	push	{r7}
 8006e34:	b085      	sub	sp, #20
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006e42:	e005      	b.n	8006e50 <USBD_GetLen+0x1e>
  {
    len++;
 8006e44:	7bfb      	ldrb	r3, [r7, #15]
 8006e46:	3301      	adds	r3, #1
 8006e48:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	3301      	adds	r3, #1
 8006e4e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d1f5      	bne.n	8006e44 <USBD_GetLen+0x12>
  }

  return len;
 8006e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3714      	adds	r7, #20
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr

08006e66 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006e66:	b580      	push	{r7, lr}
 8006e68:	b084      	sub	sp, #16
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	60f8      	str	r0, [r7, #12]
 8006e6e:	60b9      	str	r1, [r7, #8]
 8006e70:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2202      	movs	r2, #2
 8006e76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	68ba      	ldr	r2, [r7, #8]
 8006e8a:	2100      	movs	r1, #0
 8006e8c:	68f8      	ldr	r0, [r7, #12]
 8006e8e:	f000 fc4e 	bl	800772e <USBD_LL_Transmit>

  return USBD_OK;
 8006e92:	2300      	movs	r3, #0
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3710      	adds	r7, #16
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	60f8      	str	r0, [r7, #12]
 8006ea4:	60b9      	str	r1, [r7, #8]
 8006ea6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	68ba      	ldr	r2, [r7, #8]
 8006eac:	2100      	movs	r1, #0
 8006eae:	68f8      	ldr	r0, [r7, #12]
 8006eb0:	f000 fc3d 	bl	800772e <USBD_LL_Transmit>

  return USBD_OK;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3710      	adds	r7, #16
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}

08006ebe <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006ebe:	b580      	push	{r7, lr}
 8006ec0:	b084      	sub	sp, #16
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	60f8      	str	r0, [r7, #12]
 8006ec6:	60b9      	str	r1, [r7, #8]
 8006ec8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2203      	movs	r2, #3
 8006ece:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	68ba      	ldr	r2, [r7, #8]
 8006ee6:	2100      	movs	r1, #0
 8006ee8:	68f8      	ldr	r0, [r7, #12]
 8006eea:	f000 fc41 	bl	8007770 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006eee:	2300      	movs	r3, #0
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3710      	adds	r7, #16
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b084      	sub	sp, #16
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	60b9      	str	r1, [r7, #8]
 8006f02:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	68ba      	ldr	r2, [r7, #8]
 8006f08:	2100      	movs	r1, #0
 8006f0a:	68f8      	ldr	r0, [r7, #12]
 8006f0c:	f000 fc30 	bl	8007770 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006f10:	2300      	movs	r3, #0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3710      	adds	r7, #16
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}

08006f1a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006f1a:	b580      	push	{r7, lr}
 8006f1c:	b082      	sub	sp, #8
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2204      	movs	r2, #4
 8006f26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	2100      	movs	r1, #0
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f000 fbfc 	bl	800772e <USBD_LL_Transmit>

  return USBD_OK;
 8006f36:	2300      	movs	r3, #0
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3708      	adds	r7, #8
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b082      	sub	sp, #8
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2205      	movs	r2, #5
 8006f4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f50:	2300      	movs	r3, #0
 8006f52:	2200      	movs	r2, #0
 8006f54:	2100      	movs	r1, #0
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 fc0a 	bl	8007770 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006f5c:	2300      	movs	r3, #0
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3708      	adds	r7, #8
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
	...

08006f68 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	4912      	ldr	r1, [pc, #72]	; (8006fb8 <MX_USB_DEVICE_Init+0x50>)
 8006f70:	4812      	ldr	r0, [pc, #72]	; (8006fbc <MX_USB_DEVICE_Init+0x54>)
 8006f72:	f7fe fe65 	bl	8005c40 <USBD_Init>
 8006f76:	4603      	mov	r3, r0
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d001      	beq.n	8006f80 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006f7c:	f7f9 fc18 	bl	80007b0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006f80:	490f      	ldr	r1, [pc, #60]	; (8006fc0 <MX_USB_DEVICE_Init+0x58>)
 8006f82:	480e      	ldr	r0, [pc, #56]	; (8006fbc <MX_USB_DEVICE_Init+0x54>)
 8006f84:	f7fe fe8c 	bl	8005ca0 <USBD_RegisterClass>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d001      	beq.n	8006f92 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006f8e:	f7f9 fc0f 	bl	80007b0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006f92:	490c      	ldr	r1, [pc, #48]	; (8006fc4 <MX_USB_DEVICE_Init+0x5c>)
 8006f94:	4809      	ldr	r0, [pc, #36]	; (8006fbc <MX_USB_DEVICE_Init+0x54>)
 8006f96:	f7fe fdad 	bl	8005af4 <USBD_CDC_RegisterInterface>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d001      	beq.n	8006fa4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006fa0:	f7f9 fc06 	bl	80007b0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006fa4:	4805      	ldr	r0, [pc, #20]	; (8006fbc <MX_USB_DEVICE_Init+0x54>)
 8006fa6:	f7fe fea2 	bl	8005cee <USBD_Start>
 8006faa:	4603      	mov	r3, r0
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d001      	beq.n	8006fb4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006fb0:	f7f9 fbfe 	bl	80007b0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006fb4:	bf00      	nop
 8006fb6:	bd80      	pop	{r7, pc}
 8006fb8:	20000130 	.word	0x20000130
 8006fbc:	20001250 	.word	0x20001250
 8006fc0:	2000002c 	.word	0x2000002c
 8006fc4:	20000004 	.word	0x20000004

08006fc8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	4603      	mov	r3, r0
 8006fd0:	6039      	str	r1, [r7, #0]
 8006fd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	2212      	movs	r2, #18
 8006fd8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006fda:	4b03      	ldr	r3, [pc, #12]	; (8006fe8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	370c      	adds	r7, #12
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr
 8006fe8:	20000150 	.word	0x20000150

08006fec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	6039      	str	r1, [r7, #0]
 8006ff6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	2204      	movs	r2, #4
 8006ffc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006ffe:	4b03      	ldr	r3, [pc, #12]	; (800700c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007000:	4618      	mov	r0, r3
 8007002:	370c      	adds	r7, #12
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr
 800700c:	20000170 	.word	0x20000170

08007010 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b082      	sub	sp, #8
 8007014:	af00      	add	r7, sp, #0
 8007016:	4603      	mov	r3, r0
 8007018:	6039      	str	r1, [r7, #0]
 800701a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800701c:	79fb      	ldrb	r3, [r7, #7]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d105      	bne.n	800702e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007022:	683a      	ldr	r2, [r7, #0]
 8007024:	4907      	ldr	r1, [pc, #28]	; (8007044 <USBD_FS_ProductStrDescriptor+0x34>)
 8007026:	4808      	ldr	r0, [pc, #32]	; (8007048 <USBD_FS_ProductStrDescriptor+0x38>)
 8007028:	f7ff febd 	bl	8006da6 <USBD_GetString>
 800702c:	e004      	b.n	8007038 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800702e:	683a      	ldr	r2, [r7, #0]
 8007030:	4904      	ldr	r1, [pc, #16]	; (8007044 <USBD_FS_ProductStrDescriptor+0x34>)
 8007032:	4805      	ldr	r0, [pc, #20]	; (8007048 <USBD_FS_ProductStrDescriptor+0x38>)
 8007034:	f7ff feb7 	bl	8006da6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007038:	4b02      	ldr	r3, [pc, #8]	; (8007044 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800703a:	4618      	mov	r0, r3
 800703c:	3708      	adds	r7, #8
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop
 8007044:	20001520 	.word	0x20001520
 8007048:	08007988 	.word	0x08007988

0800704c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b082      	sub	sp, #8
 8007050:	af00      	add	r7, sp, #0
 8007052:	4603      	mov	r3, r0
 8007054:	6039      	str	r1, [r7, #0]
 8007056:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007058:	683a      	ldr	r2, [r7, #0]
 800705a:	4904      	ldr	r1, [pc, #16]	; (800706c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800705c:	4804      	ldr	r0, [pc, #16]	; (8007070 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800705e:	f7ff fea2 	bl	8006da6 <USBD_GetString>
  return USBD_StrDesc;
 8007062:	4b02      	ldr	r3, [pc, #8]	; (800706c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007064:	4618      	mov	r0, r3
 8007066:	3708      	adds	r7, #8
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}
 800706c:	20001520 	.word	0x20001520
 8007070:	080079a0 	.word	0x080079a0

08007074 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b082      	sub	sp, #8
 8007078:	af00      	add	r7, sp, #0
 800707a:	4603      	mov	r3, r0
 800707c:	6039      	str	r1, [r7, #0]
 800707e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	221a      	movs	r2, #26
 8007084:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007086:	f000 f855 	bl	8007134 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800708a:	4b02      	ldr	r3, [pc, #8]	; (8007094 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800708c:	4618      	mov	r0, r3
 800708e:	3708      	adds	r7, #8
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}
 8007094:	20000174 	.word	0x20000174

08007098 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b082      	sub	sp, #8
 800709c:	af00      	add	r7, sp, #0
 800709e:	4603      	mov	r3, r0
 80070a0:	6039      	str	r1, [r7, #0]
 80070a2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80070a4:	79fb      	ldrb	r3, [r7, #7]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d105      	bne.n	80070b6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80070aa:	683a      	ldr	r2, [r7, #0]
 80070ac:	4907      	ldr	r1, [pc, #28]	; (80070cc <USBD_FS_ConfigStrDescriptor+0x34>)
 80070ae:	4808      	ldr	r0, [pc, #32]	; (80070d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80070b0:	f7ff fe79 	bl	8006da6 <USBD_GetString>
 80070b4:	e004      	b.n	80070c0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80070b6:	683a      	ldr	r2, [r7, #0]
 80070b8:	4904      	ldr	r1, [pc, #16]	; (80070cc <USBD_FS_ConfigStrDescriptor+0x34>)
 80070ba:	4805      	ldr	r0, [pc, #20]	; (80070d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80070bc:	f7ff fe73 	bl	8006da6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80070c0:	4b02      	ldr	r3, [pc, #8]	; (80070cc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3708      	adds	r7, #8
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}
 80070ca:	bf00      	nop
 80070cc:	20001520 	.word	0x20001520
 80070d0:	080079b4 	.word	0x080079b4

080070d4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b082      	sub	sp, #8
 80070d8:	af00      	add	r7, sp, #0
 80070da:	4603      	mov	r3, r0
 80070dc:	6039      	str	r1, [r7, #0]
 80070de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80070e0:	79fb      	ldrb	r3, [r7, #7]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d105      	bne.n	80070f2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80070e6:	683a      	ldr	r2, [r7, #0]
 80070e8:	4907      	ldr	r1, [pc, #28]	; (8007108 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80070ea:	4808      	ldr	r0, [pc, #32]	; (800710c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80070ec:	f7ff fe5b 	bl	8006da6 <USBD_GetString>
 80070f0:	e004      	b.n	80070fc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80070f2:	683a      	ldr	r2, [r7, #0]
 80070f4:	4904      	ldr	r1, [pc, #16]	; (8007108 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80070f6:	4805      	ldr	r0, [pc, #20]	; (800710c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80070f8:	f7ff fe55 	bl	8006da6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80070fc:	4b02      	ldr	r3, [pc, #8]	; (8007108 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3708      	adds	r7, #8
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop
 8007108:	20001520 	.word	0x20001520
 800710c:	080079c0 	.word	0x080079c0

08007110 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007110:	b480      	push	{r7}
 8007112:	b083      	sub	sp, #12
 8007114:	af00      	add	r7, sp, #0
 8007116:	4603      	mov	r3, r0
 8007118:	6039      	str	r1, [r7, #0]
 800711a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	220c      	movs	r2, #12
 8007120:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8007122:	4b03      	ldr	r3, [pc, #12]	; (8007130 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8007124:	4618      	mov	r0, r3
 8007126:	370c      	adds	r7, #12
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr
 8007130:	20000164 	.word	0x20000164

08007134 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800713a:	4b0f      	ldr	r3, [pc, #60]	; (8007178 <Get_SerialNum+0x44>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007140:	4b0e      	ldr	r3, [pc, #56]	; (800717c <Get_SerialNum+0x48>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007146:	4b0e      	ldr	r3, [pc, #56]	; (8007180 <Get_SerialNum+0x4c>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800714c:	68fa      	ldr	r2, [r7, #12]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4413      	add	r3, r2
 8007152:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d009      	beq.n	800716e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800715a:	2208      	movs	r2, #8
 800715c:	4909      	ldr	r1, [pc, #36]	; (8007184 <Get_SerialNum+0x50>)
 800715e:	68f8      	ldr	r0, [r7, #12]
 8007160:	f000 f814 	bl	800718c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007164:	2204      	movs	r2, #4
 8007166:	4908      	ldr	r1, [pc, #32]	; (8007188 <Get_SerialNum+0x54>)
 8007168:	68b8      	ldr	r0, [r7, #8]
 800716a:	f000 f80f 	bl	800718c <IntToUnicode>
  }
}
 800716e:	bf00      	nop
 8007170:	3710      	adds	r7, #16
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	1fff7a10 	.word	0x1fff7a10
 800717c:	1fff7a14 	.word	0x1fff7a14
 8007180:	1fff7a18 	.word	0x1fff7a18
 8007184:	20000176 	.word	0x20000176
 8007188:	20000186 	.word	0x20000186

0800718c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800718c:	b480      	push	{r7}
 800718e:	b087      	sub	sp, #28
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	4613      	mov	r3, r2
 8007198:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800719a:	2300      	movs	r3, #0
 800719c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800719e:	2300      	movs	r3, #0
 80071a0:	75fb      	strb	r3, [r7, #23]
 80071a2:	e027      	b.n	80071f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	0f1b      	lsrs	r3, r3, #28
 80071a8:	2b09      	cmp	r3, #9
 80071aa:	d80b      	bhi.n	80071c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	0f1b      	lsrs	r3, r3, #28
 80071b0:	b2da      	uxtb	r2, r3
 80071b2:	7dfb      	ldrb	r3, [r7, #23]
 80071b4:	005b      	lsls	r3, r3, #1
 80071b6:	4619      	mov	r1, r3
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	440b      	add	r3, r1
 80071bc:	3230      	adds	r2, #48	; 0x30
 80071be:	b2d2      	uxtb	r2, r2
 80071c0:	701a      	strb	r2, [r3, #0]
 80071c2:	e00a      	b.n	80071da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	0f1b      	lsrs	r3, r3, #28
 80071c8:	b2da      	uxtb	r2, r3
 80071ca:	7dfb      	ldrb	r3, [r7, #23]
 80071cc:	005b      	lsls	r3, r3, #1
 80071ce:	4619      	mov	r1, r3
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	440b      	add	r3, r1
 80071d4:	3237      	adds	r2, #55	; 0x37
 80071d6:	b2d2      	uxtb	r2, r2
 80071d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	011b      	lsls	r3, r3, #4
 80071de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80071e0:	7dfb      	ldrb	r3, [r7, #23]
 80071e2:	005b      	lsls	r3, r3, #1
 80071e4:	3301      	adds	r3, #1
 80071e6:	68ba      	ldr	r2, [r7, #8]
 80071e8:	4413      	add	r3, r2
 80071ea:	2200      	movs	r2, #0
 80071ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80071ee:	7dfb      	ldrb	r3, [r7, #23]
 80071f0:	3301      	adds	r3, #1
 80071f2:	75fb      	strb	r3, [r7, #23]
 80071f4:	7dfa      	ldrb	r2, [r7, #23]
 80071f6:	79fb      	ldrb	r3, [r7, #7]
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d3d3      	bcc.n	80071a4 <IntToUnicode+0x18>
  }
}
 80071fc:	bf00      	nop
 80071fe:	bf00      	nop
 8007200:	371c      	adds	r7, #28
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr
	...

0800720c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b0a0      	sub	sp, #128	; 0x80
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007214:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007218:	2200      	movs	r2, #0
 800721a:	601a      	str	r2, [r3, #0]
 800721c:	605a      	str	r2, [r3, #4]
 800721e:	609a      	str	r2, [r3, #8]
 8007220:	60da      	str	r2, [r3, #12]
 8007222:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007224:	f107 0310 	add.w	r3, r7, #16
 8007228:	225c      	movs	r2, #92	; 0x5c
 800722a:	2100      	movs	r1, #0
 800722c:	4618      	mov	r0, r3
 800722e:	f000 fb97 	bl	8007960 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800723a:	d149      	bne.n	80072d0 <HAL_PCD_MspInit+0xc4>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800723c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007240:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8007242:	2300      	movs	r3, #0
 8007244:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007246:	f107 0310 	add.w	r3, r7, #16
 800724a:	4618      	mov	r0, r3
 800724c:	f7fb fba4 	bl	8002998 <HAL_RCCEx_PeriphCLKConfig>
 8007250:	4603      	mov	r3, r0
 8007252:	2b00      	cmp	r3, #0
 8007254:	d001      	beq.n	800725a <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8007256:	f7f9 faab 	bl	80007b0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800725a:	2300      	movs	r3, #0
 800725c:	60fb      	str	r3, [r7, #12]
 800725e:	4b1e      	ldr	r3, [pc, #120]	; (80072d8 <HAL_PCD_MspInit+0xcc>)
 8007260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007262:	4a1d      	ldr	r2, [pc, #116]	; (80072d8 <HAL_PCD_MspInit+0xcc>)
 8007264:	f043 0301 	orr.w	r3, r3, #1
 8007268:	6313      	str	r3, [r2, #48]	; 0x30
 800726a:	4b1b      	ldr	r3, [pc, #108]	; (80072d8 <HAL_PCD_MspInit+0xcc>)
 800726c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800726e:	f003 0301 	and.w	r3, r3, #1
 8007272:	60fb      	str	r3, [r7, #12]
 8007274:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007276:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800727a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800727c:	2302      	movs	r3, #2
 800727e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007280:	2300      	movs	r3, #0
 8007282:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007284:	2303      	movs	r3, #3
 8007286:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007288:	230a      	movs	r3, #10
 800728a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800728c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007290:	4619      	mov	r1, r3
 8007292:	4812      	ldr	r0, [pc, #72]	; (80072dc <HAL_PCD_MspInit+0xd0>)
 8007294:	f7f9 feea 	bl	800106c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007298:	4b0f      	ldr	r3, [pc, #60]	; (80072d8 <HAL_PCD_MspInit+0xcc>)
 800729a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800729c:	4a0e      	ldr	r2, [pc, #56]	; (80072d8 <HAL_PCD_MspInit+0xcc>)
 800729e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072a2:	6353      	str	r3, [r2, #52]	; 0x34
 80072a4:	2300      	movs	r3, #0
 80072a6:	60bb      	str	r3, [r7, #8]
 80072a8:	4b0b      	ldr	r3, [pc, #44]	; (80072d8 <HAL_PCD_MspInit+0xcc>)
 80072aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072ac:	4a0a      	ldr	r2, [pc, #40]	; (80072d8 <HAL_PCD_MspInit+0xcc>)
 80072ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80072b2:	6453      	str	r3, [r2, #68]	; 0x44
 80072b4:	4b08      	ldr	r3, [pc, #32]	; (80072d8 <HAL_PCD_MspInit+0xcc>)
 80072b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072bc:	60bb      	str	r3, [r7, #8]
 80072be:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80072c0:	2200      	movs	r2, #0
 80072c2:	2100      	movs	r1, #0
 80072c4:	2043      	movs	r0, #67	; 0x43
 80072c6:	f7f9 fe9a 	bl	8000ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80072ca:	2043      	movs	r0, #67	; 0x43
 80072cc:	f7f9 feb3 	bl	8001036 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80072d0:	bf00      	nop
 80072d2:	3780      	adds	r7, #128	; 0x80
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}
 80072d8:	40023800 	.word	0x40023800
 80072dc:	40020000 	.word	0x40020000

080072e0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b082      	sub	sp, #8
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80072f4:	4619      	mov	r1, r3
 80072f6:	4610      	mov	r0, r2
 80072f8:	f7fe fd44 	bl	8005d84 <USBD_LL_SetupStage>
}
 80072fc:	bf00      	nop
 80072fe:	3708      	adds	r7, #8
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	460b      	mov	r3, r1
 800730e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007316:	78fa      	ldrb	r2, [r7, #3]
 8007318:	6879      	ldr	r1, [r7, #4]
 800731a:	4613      	mov	r3, r2
 800731c:	00db      	lsls	r3, r3, #3
 800731e:	1a9b      	subs	r3, r3, r2
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	440b      	add	r3, r1
 8007324:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	78fb      	ldrb	r3, [r7, #3]
 800732c:	4619      	mov	r1, r3
 800732e:	f7fe fd7e 	bl	8005e2e <USBD_LL_DataOutStage>
}
 8007332:	bf00      	nop
 8007334:	3708      	adds	r7, #8
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}

0800733a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800733a:	b580      	push	{r7, lr}
 800733c:	b082      	sub	sp, #8
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
 8007342:	460b      	mov	r3, r1
 8007344:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800734c:	78fa      	ldrb	r2, [r7, #3]
 800734e:	6879      	ldr	r1, [r7, #4]
 8007350:	4613      	mov	r3, r2
 8007352:	00db      	lsls	r3, r3, #3
 8007354:	1a9b      	subs	r3, r3, r2
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	440b      	add	r3, r1
 800735a:	3348      	adds	r3, #72	; 0x48
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	78fb      	ldrb	r3, [r7, #3]
 8007360:	4619      	mov	r1, r3
 8007362:	f7fe fdc7 	bl	8005ef4 <USBD_LL_DataInStage>
}
 8007366:	bf00      	nop
 8007368:	3708      	adds	r7, #8
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b082      	sub	sp, #8
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800737c:	4618      	mov	r0, r3
 800737e:	f7fe fedb 	bl	8006138 <USBD_LL_SOF>
}
 8007382:	bf00      	nop
 8007384:	3708      	adds	r7, #8
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}

0800738a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800738a:	b580      	push	{r7, lr}
 800738c:	b084      	sub	sp, #16
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007392:	2301      	movs	r3, #1
 8007394:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	68db      	ldr	r3, [r3, #12]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d102      	bne.n	80073a4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800739e:	2300      	movs	r3, #0
 80073a0:	73fb      	strb	r3, [r7, #15]
 80073a2:	e008      	b.n	80073b6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	2b02      	cmp	r3, #2
 80073aa:	d102      	bne.n	80073b2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80073ac:	2301      	movs	r3, #1
 80073ae:	73fb      	strb	r3, [r7, #15]
 80073b0:	e001      	b.n	80073b6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80073b2:	f7f9 f9fd 	bl	80007b0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80073bc:	7bfa      	ldrb	r2, [r7, #15]
 80073be:	4611      	mov	r1, r2
 80073c0:	4618      	mov	r0, r3
 80073c2:	f7fe fe7b 	bl	80060bc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80073cc:	4618      	mov	r0, r3
 80073ce:	f7fe fe27 	bl	8006020 <USBD_LL_Reset>
}
 80073d2:	bf00      	nop
 80073d4:	3710      	adds	r7, #16
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
	...

080073dc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80073ea:	4618      	mov	r0, r3
 80073ec:	f7fe fe76 	bl	80060dc <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	6812      	ldr	r2, [r2, #0]
 80073fe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007402:	f043 0301 	orr.w	r3, r3, #1
 8007406:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6a1b      	ldr	r3, [r3, #32]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d005      	beq.n	800741c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007410:	4b04      	ldr	r3, [pc, #16]	; (8007424 <HAL_PCD_SuspendCallback+0x48>)
 8007412:	691b      	ldr	r3, [r3, #16]
 8007414:	4a03      	ldr	r2, [pc, #12]	; (8007424 <HAL_PCD_SuspendCallback+0x48>)
 8007416:	f043 0306 	orr.w	r3, r3, #6
 800741a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800741c:	bf00      	nop
 800741e:	3708      	adds	r7, #8
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}
 8007424:	e000ed00 	.word	0xe000ed00

08007428 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007436:	4618      	mov	r0, r3
 8007438:	f7fe fe66 	bl	8006108 <USBD_LL_Resume>
}
 800743c:	bf00      	nop
 800743e:	3708      	adds	r7, #8
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	460b      	mov	r3, r1
 800744e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007456:	78fa      	ldrb	r2, [r7, #3]
 8007458:	4611      	mov	r1, r2
 800745a:	4618      	mov	r0, r3
 800745c:	f7fe feb4 	bl	80061c8 <USBD_LL_IsoOUTIncomplete>
}
 8007460:	bf00      	nop
 8007462:	3708      	adds	r7, #8
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	460b      	mov	r3, r1
 8007472:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800747a:	78fa      	ldrb	r2, [r7, #3]
 800747c:	4611      	mov	r1, r2
 800747e:	4618      	mov	r0, r3
 8007480:	f7fe fe7c 	bl	800617c <USBD_LL_IsoINIncomplete>
}
 8007484:	bf00      	nop
 8007486:	3708      	adds	r7, #8
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800749a:	4618      	mov	r0, r3
 800749c:	f7fe feba 	bl	8006214 <USBD_LL_DevConnected>
}
 80074a0:	bf00      	nop
 80074a2:	3708      	adds	r7, #8
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80074b6:	4618      	mov	r0, r3
 80074b8:	f7fe feb7 	bl	800622a <USBD_LL_DevDisconnected>
}
 80074bc:	bf00      	nop
 80074be:	3708      	adds	r7, #8
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b082      	sub	sp, #8
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d13c      	bne.n	800754e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80074d4:	4a20      	ldr	r2, [pc, #128]	; (8007558 <USBD_LL_Init+0x94>)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	4a1e      	ldr	r2, [pc, #120]	; (8007558 <USBD_LL_Init+0x94>)
 80074e0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80074e4:	4b1c      	ldr	r3, [pc, #112]	; (8007558 <USBD_LL_Init+0x94>)
 80074e6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80074ea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80074ec:	4b1a      	ldr	r3, [pc, #104]	; (8007558 <USBD_LL_Init+0x94>)
 80074ee:	2206      	movs	r2, #6
 80074f0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80074f2:	4b19      	ldr	r3, [pc, #100]	; (8007558 <USBD_LL_Init+0x94>)
 80074f4:	2202      	movs	r2, #2
 80074f6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80074f8:	4b17      	ldr	r3, [pc, #92]	; (8007558 <USBD_LL_Init+0x94>)
 80074fa:	2200      	movs	r2, #0
 80074fc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80074fe:	4b16      	ldr	r3, [pc, #88]	; (8007558 <USBD_LL_Init+0x94>)
 8007500:	2202      	movs	r2, #2
 8007502:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007504:	4b14      	ldr	r3, [pc, #80]	; (8007558 <USBD_LL_Init+0x94>)
 8007506:	2200      	movs	r2, #0
 8007508:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800750a:	4b13      	ldr	r3, [pc, #76]	; (8007558 <USBD_LL_Init+0x94>)
 800750c:	2200      	movs	r2, #0
 800750e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007510:	4b11      	ldr	r3, [pc, #68]	; (8007558 <USBD_LL_Init+0x94>)
 8007512:	2200      	movs	r2, #0
 8007514:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007516:	4b10      	ldr	r3, [pc, #64]	; (8007558 <USBD_LL_Init+0x94>)
 8007518:	2200      	movs	r2, #0
 800751a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800751c:	4b0e      	ldr	r3, [pc, #56]	; (8007558 <USBD_LL_Init+0x94>)
 800751e:	2200      	movs	r2, #0
 8007520:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007522:	480d      	ldr	r0, [pc, #52]	; (8007558 <USBD_LL_Init+0x94>)
 8007524:	f7f9 ff4f 	bl	80013c6 <HAL_PCD_Init>
 8007528:	4603      	mov	r3, r0
 800752a:	2b00      	cmp	r3, #0
 800752c:	d001      	beq.n	8007532 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800752e:	f7f9 f93f 	bl	80007b0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007532:	2180      	movs	r1, #128	; 0x80
 8007534:	4808      	ldr	r0, [pc, #32]	; (8007558 <USBD_LL_Init+0x94>)
 8007536:	f7fb f8e0 	bl	80026fa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800753a:	2240      	movs	r2, #64	; 0x40
 800753c:	2100      	movs	r1, #0
 800753e:	4806      	ldr	r0, [pc, #24]	; (8007558 <USBD_LL_Init+0x94>)
 8007540:	f7fb f894 	bl	800266c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007544:	2280      	movs	r2, #128	; 0x80
 8007546:	2101      	movs	r1, #1
 8007548:	4803      	ldr	r0, [pc, #12]	; (8007558 <USBD_LL_Init+0x94>)
 800754a:	f7fb f88f 	bl	800266c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800754e:	2300      	movs	r3, #0
}
 8007550:	4618      	mov	r0, r3
 8007552:	3708      	adds	r7, #8
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}
 8007558:	20001720 	.word	0x20001720

0800755c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007564:	2300      	movs	r3, #0
 8007566:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007568:	2300      	movs	r3, #0
 800756a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007572:	4618      	mov	r0, r3
 8007574:	f7fa f84b 	bl	800160e <HAL_PCD_Start>
 8007578:	4603      	mov	r3, r0
 800757a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800757c:	7bfb      	ldrb	r3, [r7, #15]
 800757e:	4618      	mov	r0, r3
 8007580:	f000 f990 	bl	80078a4 <USBD_Get_USB_Status>
 8007584:	4603      	mov	r3, r0
 8007586:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007588:	7bbb      	ldrb	r3, [r7, #14]
}
 800758a:	4618      	mov	r0, r3
 800758c:	3710      	adds	r7, #16
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}

08007592 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007592:	b580      	push	{r7, lr}
 8007594:	b084      	sub	sp, #16
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
 800759a:	4608      	mov	r0, r1
 800759c:	4611      	mov	r1, r2
 800759e:	461a      	mov	r2, r3
 80075a0:	4603      	mov	r3, r0
 80075a2:	70fb      	strb	r3, [r7, #3]
 80075a4:	460b      	mov	r3, r1
 80075a6:	70bb      	strb	r3, [r7, #2]
 80075a8:	4613      	mov	r3, r2
 80075aa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075ac:	2300      	movs	r3, #0
 80075ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075b0:	2300      	movs	r3, #0
 80075b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80075ba:	78bb      	ldrb	r3, [r7, #2]
 80075bc:	883a      	ldrh	r2, [r7, #0]
 80075be:	78f9      	ldrb	r1, [r7, #3]
 80075c0:	f7fa fc5c 	bl	8001e7c <HAL_PCD_EP_Open>
 80075c4:	4603      	mov	r3, r0
 80075c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075c8:	7bfb      	ldrb	r3, [r7, #15]
 80075ca:	4618      	mov	r0, r3
 80075cc:	f000 f96a 	bl	80078a4 <USBD_Get_USB_Status>
 80075d0:	4603      	mov	r3, r0
 80075d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3710      	adds	r7, #16
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}

080075de <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075de:	b580      	push	{r7, lr}
 80075e0:	b084      	sub	sp, #16
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
 80075e6:	460b      	mov	r3, r1
 80075e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075ea:	2300      	movs	r3, #0
 80075ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075ee:	2300      	movs	r3, #0
 80075f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80075f8:	78fa      	ldrb	r2, [r7, #3]
 80075fa:	4611      	mov	r1, r2
 80075fc:	4618      	mov	r0, r3
 80075fe:	f7fa fca5 	bl	8001f4c <HAL_PCD_EP_Close>
 8007602:	4603      	mov	r3, r0
 8007604:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007606:	7bfb      	ldrb	r3, [r7, #15]
 8007608:	4618      	mov	r0, r3
 800760a:	f000 f94b 	bl	80078a4 <USBD_Get_USB_Status>
 800760e:	4603      	mov	r3, r0
 8007610:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007612:	7bbb      	ldrb	r3, [r7, #14]
}
 8007614:	4618      	mov	r0, r3
 8007616:	3710      	adds	r7, #16
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	460b      	mov	r3, r1
 8007626:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007628:	2300      	movs	r3, #0
 800762a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800762c:	2300      	movs	r3, #0
 800762e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007636:	78fa      	ldrb	r2, [r7, #3]
 8007638:	4611      	mov	r1, r2
 800763a:	4618      	mov	r0, r3
 800763c:	f7fa fd7d 	bl	800213a <HAL_PCD_EP_SetStall>
 8007640:	4603      	mov	r3, r0
 8007642:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007644:	7bfb      	ldrb	r3, [r7, #15]
 8007646:	4618      	mov	r0, r3
 8007648:	f000 f92c 	bl	80078a4 <USBD_Get_USB_Status>
 800764c:	4603      	mov	r3, r0
 800764e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007650:	7bbb      	ldrb	r3, [r7, #14]
}
 8007652:	4618      	mov	r0, r3
 8007654:	3710      	adds	r7, #16
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}

0800765a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800765a:	b580      	push	{r7, lr}
 800765c:	b084      	sub	sp, #16
 800765e:	af00      	add	r7, sp, #0
 8007660:	6078      	str	r0, [r7, #4]
 8007662:	460b      	mov	r3, r1
 8007664:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007666:	2300      	movs	r3, #0
 8007668:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800766a:	2300      	movs	r3, #0
 800766c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007674:	78fa      	ldrb	r2, [r7, #3]
 8007676:	4611      	mov	r1, r2
 8007678:	4618      	mov	r0, r3
 800767a:	f7fa fdc2 	bl	8002202 <HAL_PCD_EP_ClrStall>
 800767e:	4603      	mov	r3, r0
 8007680:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007682:	7bfb      	ldrb	r3, [r7, #15]
 8007684:	4618      	mov	r0, r3
 8007686:	f000 f90d 	bl	80078a4 <USBD_Get_USB_Status>
 800768a:	4603      	mov	r3, r0
 800768c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800768e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007690:	4618      	mov	r0, r3
 8007692:	3710      	adds	r7, #16
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007698:	b480      	push	{r7}
 800769a:	b085      	sub	sp, #20
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	460b      	mov	r3, r1
 80076a2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80076aa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80076ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	da0b      	bge.n	80076cc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80076b4:	78fb      	ldrb	r3, [r7, #3]
 80076b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076ba:	68f9      	ldr	r1, [r7, #12]
 80076bc:	4613      	mov	r3, r2
 80076be:	00db      	lsls	r3, r3, #3
 80076c0:	1a9b      	subs	r3, r3, r2
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	440b      	add	r3, r1
 80076c6:	333e      	adds	r3, #62	; 0x3e
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	e00b      	b.n	80076e4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80076cc:	78fb      	ldrb	r3, [r7, #3]
 80076ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076d2:	68f9      	ldr	r1, [r7, #12]
 80076d4:	4613      	mov	r3, r2
 80076d6:	00db      	lsls	r3, r3, #3
 80076d8:	1a9b      	subs	r3, r3, r2
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	440b      	add	r3, r1
 80076de:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80076e2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3714      	adds	r7, #20
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr

080076f0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	460b      	mov	r3, r1
 80076fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076fc:	2300      	movs	r3, #0
 80076fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007700:	2300      	movs	r3, #0
 8007702:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800770a:	78fa      	ldrb	r2, [r7, #3]
 800770c:	4611      	mov	r1, r2
 800770e:	4618      	mov	r0, r3
 8007710:	f7fa fb8f 	bl	8001e32 <HAL_PCD_SetAddress>
 8007714:	4603      	mov	r3, r0
 8007716:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007718:	7bfb      	ldrb	r3, [r7, #15]
 800771a:	4618      	mov	r0, r3
 800771c:	f000 f8c2 	bl	80078a4 <USBD_Get_USB_Status>
 8007720:	4603      	mov	r3, r0
 8007722:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007724:	7bbb      	ldrb	r3, [r7, #14]
}
 8007726:	4618      	mov	r0, r3
 8007728:	3710      	adds	r7, #16
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}

0800772e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800772e:	b580      	push	{r7, lr}
 8007730:	b086      	sub	sp, #24
 8007732:	af00      	add	r7, sp, #0
 8007734:	60f8      	str	r0, [r7, #12]
 8007736:	607a      	str	r2, [r7, #4]
 8007738:	603b      	str	r3, [r7, #0]
 800773a:	460b      	mov	r3, r1
 800773c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800773e:	2300      	movs	r3, #0
 8007740:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007742:	2300      	movs	r3, #0
 8007744:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800774c:	7af9      	ldrb	r1, [r7, #11]
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	f7fa fca8 	bl	80020a6 <HAL_PCD_EP_Transmit>
 8007756:	4603      	mov	r3, r0
 8007758:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800775a:	7dfb      	ldrb	r3, [r7, #23]
 800775c:	4618      	mov	r0, r3
 800775e:	f000 f8a1 	bl	80078a4 <USBD_Get_USB_Status>
 8007762:	4603      	mov	r3, r0
 8007764:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007766:	7dbb      	ldrb	r3, [r7, #22]
}
 8007768:	4618      	mov	r0, r3
 800776a:	3718      	adds	r7, #24
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b086      	sub	sp, #24
 8007774:	af00      	add	r7, sp, #0
 8007776:	60f8      	str	r0, [r7, #12]
 8007778:	607a      	str	r2, [r7, #4]
 800777a:	603b      	str	r3, [r7, #0]
 800777c:	460b      	mov	r3, r1
 800777e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007780:	2300      	movs	r3, #0
 8007782:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007784:	2300      	movs	r3, #0
 8007786:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800778e:	7af9      	ldrb	r1, [r7, #11]
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	f7fa fc24 	bl	8001fe0 <HAL_PCD_EP_Receive>
 8007798:	4603      	mov	r3, r0
 800779a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800779c:	7dfb      	ldrb	r3, [r7, #23]
 800779e:	4618      	mov	r0, r3
 80077a0:	f000 f880 	bl	80078a4 <USBD_Get_USB_Status>
 80077a4:	4603      	mov	r3, r0
 80077a6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80077a8:	7dbb      	ldrb	r3, [r7, #22]
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3718      	adds	r7, #24
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}

080077b2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80077b2:	b580      	push	{r7, lr}
 80077b4:	b082      	sub	sp, #8
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
 80077ba:	460b      	mov	r3, r1
 80077bc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80077c4:	78fa      	ldrb	r2, [r7, #3]
 80077c6:	4611      	mov	r1, r2
 80077c8:	4618      	mov	r0, r3
 80077ca:	f7fa fc54 	bl	8002076 <HAL_PCD_EP_GetRxCount>
 80077ce:	4603      	mov	r3, r0
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3708      	adds	r7, #8
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}

080077d8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b082      	sub	sp, #8
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	460b      	mov	r3, r1
 80077e2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80077e4:	78fb      	ldrb	r3, [r7, #3]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d002      	beq.n	80077f0 <HAL_PCDEx_LPM_Callback+0x18>
 80077ea:	2b01      	cmp	r3, #1
 80077ec:	d01f      	beq.n	800782e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80077ee:	e03b      	b.n	8007868 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6a1b      	ldr	r3, [r3, #32]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d007      	beq.n	8007808 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 80077f8:	f7f8 fed6 	bl	80005a8 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80077fc:	4b1c      	ldr	r3, [pc, #112]	; (8007870 <HAL_PCDEx_LPM_Callback+0x98>)
 80077fe:	691b      	ldr	r3, [r3, #16]
 8007800:	4a1b      	ldr	r2, [pc, #108]	; (8007870 <HAL_PCDEx_LPM_Callback+0x98>)
 8007802:	f023 0306 	bic.w	r3, r3, #6
 8007806:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	687a      	ldr	r2, [r7, #4]
 8007814:	6812      	ldr	r2, [r2, #0]
 8007816:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800781a:	f023 0301 	bic.w	r3, r3, #1
 800781e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007826:	4618      	mov	r0, r3
 8007828:	f7fe fc6e 	bl	8006108 <USBD_LL_Resume>
    break;
 800782c:	e01c      	b.n	8007868 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	6812      	ldr	r2, [r2, #0]
 800783c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007840:	f043 0301 	orr.w	r3, r3, #1
 8007844:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800784c:	4618      	mov	r0, r3
 800784e:	f7fe fc45 	bl	80060dc <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6a1b      	ldr	r3, [r3, #32]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d005      	beq.n	8007866 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800785a:	4b05      	ldr	r3, [pc, #20]	; (8007870 <HAL_PCDEx_LPM_Callback+0x98>)
 800785c:	691b      	ldr	r3, [r3, #16]
 800785e:	4a04      	ldr	r2, [pc, #16]	; (8007870 <HAL_PCDEx_LPM_Callback+0x98>)
 8007860:	f043 0306 	orr.w	r3, r3, #6
 8007864:	6113      	str	r3, [r2, #16]
    break;
 8007866:	bf00      	nop
}
 8007868:	bf00      	nop
 800786a:	3708      	adds	r7, #8
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}
 8007870:	e000ed00 	.word	0xe000ed00

08007874 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800787c:	4b03      	ldr	r3, [pc, #12]	; (800788c <USBD_static_malloc+0x18>)
}
 800787e:	4618      	mov	r0, r3
 8007880:	370c      	adds	r7, #12
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr
 800788a:	bf00      	nop
 800788c:	20001b28 	.word	0x20001b28

08007890 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]

}
 8007898:	bf00      	nop
 800789a:	370c      	adds	r7, #12
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b085      	sub	sp, #20
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	4603      	mov	r3, r0
 80078ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078ae:	2300      	movs	r3, #0
 80078b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80078b2:	79fb      	ldrb	r3, [r7, #7]
 80078b4:	2b03      	cmp	r3, #3
 80078b6:	d817      	bhi.n	80078e8 <USBD_Get_USB_Status+0x44>
 80078b8:	a201      	add	r2, pc, #4	; (adr r2, 80078c0 <USBD_Get_USB_Status+0x1c>)
 80078ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078be:	bf00      	nop
 80078c0:	080078d1 	.word	0x080078d1
 80078c4:	080078d7 	.word	0x080078d7
 80078c8:	080078dd 	.word	0x080078dd
 80078cc:	080078e3 	.word	0x080078e3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80078d0:	2300      	movs	r3, #0
 80078d2:	73fb      	strb	r3, [r7, #15]
    break;
 80078d4:	e00b      	b.n	80078ee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80078d6:	2303      	movs	r3, #3
 80078d8:	73fb      	strb	r3, [r7, #15]
    break;
 80078da:	e008      	b.n	80078ee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80078dc:	2301      	movs	r3, #1
 80078de:	73fb      	strb	r3, [r7, #15]
    break;
 80078e0:	e005      	b.n	80078ee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80078e2:	2303      	movs	r3, #3
 80078e4:	73fb      	strb	r3, [r7, #15]
    break;
 80078e6:	e002      	b.n	80078ee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80078e8:	2303      	movs	r3, #3
 80078ea:	73fb      	strb	r3, [r7, #15]
    break;
 80078ec:	bf00      	nop
  }
  return usb_status;
 80078ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3714      	adds	r7, #20
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr

080078fc <__libc_init_array>:
 80078fc:	b570      	push	{r4, r5, r6, lr}
 80078fe:	4d0d      	ldr	r5, [pc, #52]	; (8007934 <__libc_init_array+0x38>)
 8007900:	4c0d      	ldr	r4, [pc, #52]	; (8007938 <__libc_init_array+0x3c>)
 8007902:	1b64      	subs	r4, r4, r5
 8007904:	10a4      	asrs	r4, r4, #2
 8007906:	2600      	movs	r6, #0
 8007908:	42a6      	cmp	r6, r4
 800790a:	d109      	bne.n	8007920 <__libc_init_array+0x24>
 800790c:	4d0b      	ldr	r5, [pc, #44]	; (800793c <__libc_init_array+0x40>)
 800790e:	4c0c      	ldr	r4, [pc, #48]	; (8007940 <__libc_init_array+0x44>)
 8007910:	f000 f82e 	bl	8007970 <_init>
 8007914:	1b64      	subs	r4, r4, r5
 8007916:	10a4      	asrs	r4, r4, #2
 8007918:	2600      	movs	r6, #0
 800791a:	42a6      	cmp	r6, r4
 800791c:	d105      	bne.n	800792a <__libc_init_array+0x2e>
 800791e:	bd70      	pop	{r4, r5, r6, pc}
 8007920:	f855 3b04 	ldr.w	r3, [r5], #4
 8007924:	4798      	blx	r3
 8007926:	3601      	adds	r6, #1
 8007928:	e7ee      	b.n	8007908 <__libc_init_array+0xc>
 800792a:	f855 3b04 	ldr.w	r3, [r5], #4
 800792e:	4798      	blx	r3
 8007930:	3601      	adds	r6, #1
 8007932:	e7f2      	b.n	800791a <__libc_init_array+0x1e>
 8007934:	080079f0 	.word	0x080079f0
 8007938:	080079f0 	.word	0x080079f0
 800793c:	080079f0 	.word	0x080079f0
 8007940:	080079f4 	.word	0x080079f4

08007944 <memcpy>:
 8007944:	440a      	add	r2, r1
 8007946:	4291      	cmp	r1, r2
 8007948:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800794c:	d100      	bne.n	8007950 <memcpy+0xc>
 800794e:	4770      	bx	lr
 8007950:	b510      	push	{r4, lr}
 8007952:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007956:	f803 4f01 	strb.w	r4, [r3, #1]!
 800795a:	4291      	cmp	r1, r2
 800795c:	d1f9      	bne.n	8007952 <memcpy+0xe>
 800795e:	bd10      	pop	{r4, pc}

08007960 <memset>:
 8007960:	4402      	add	r2, r0
 8007962:	4603      	mov	r3, r0
 8007964:	4293      	cmp	r3, r2
 8007966:	d100      	bne.n	800796a <memset+0xa>
 8007968:	4770      	bx	lr
 800796a:	f803 1b01 	strb.w	r1, [r3], #1
 800796e:	e7f9      	b.n	8007964 <memset+0x4>

08007970 <_init>:
 8007970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007972:	bf00      	nop
 8007974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007976:	bc08      	pop	{r3}
 8007978:	469e      	mov	lr, r3
 800797a:	4770      	bx	lr

0800797c <_fini>:
 800797c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800797e:	bf00      	nop
 8007980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007982:	bc08      	pop	{r3}
 8007984:	469e      	mov	lr, r3
 8007986:	4770      	bx	lr
